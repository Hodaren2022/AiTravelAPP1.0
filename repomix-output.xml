This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
.env.example
.gitattributes
.gitignore
待改善.txt
待研究.txt
e word box added
ExpenseTracker改進.txt
GEMINI.md
index.html
netlify.toml
netlify/functions/analyze-itinerary.js
package.json
README.md
src/App.jsx
src/assets/favicon.svg
src/contexts/TripContext.jsx
src/data/Airportlist.txt
src/data/airports.json
src/main.jsx
src/pages/DailyItinerary.jsx
src/pages/DataManagement.jsx
src/pages/ExpenseTracker.jsx
src/pages/HotelInfo.jsx
src/pages/Notes.jsx
src/pages/PackingList.jsx
src/pages/Settings.jsx
src/pages/TravelNotes.jsx
src/pages/TravelTips.jsx
src/pages/TripManagement.jsx
src/styles/index.css
TravelApp
vite.config.js
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="待改善.txt">
1.新增常用語翻譯以及即時翻譯功能

X 2.我想增加一個將所有頁面彙整之後匯出PDF的功能，就是可以匯出產生旅遊手冊  你可以幫我增加這個功能到我的程式碼中嗎?




/////////////////////////////////////////////////////////////////////////////////////

V3. 行程管理頁面，飛行時間自動辨別起飛時區和降落時區後計算


V4. 物品清單頁面，新增物品"已打包"功能整合成按鈕


V5. 即時更新的匯率不正確


V6. 旅遊筆記的儲存上限是多少? 可以加大至多少?太大會有什麼影響?

V7. 我希望旅遊筆記頁面新增一個按鈕可以用來切換排序已儲存的筆記順序，按下時排序在最新在前和最舊在前做切換

V8. 新增旅遊筆記的刪除提醒，使用者刪除旅遊筆記時需要在提示窗再確認後，才執行刪除



-----------------------------------------------------------

V1. 位置獲取新增重新整理按紐重新抓取GPS資訊


V 2. 消費追蹤頁面，提供幾種常見貨幣對可供下拉選擇(台幣對日幣、台幣對美金、台幣對人民幣、台幣對韓元)，幣值自動換算功能，若在第一個欄位輸入金額，自動換算顯示於第二個欄位，若使用者輸入在第二個欄位，則自動換算顯示於第一個欄位，使用者按下"紀錄"後建立一筆消費紀錄
內建貨幣換算器(即時更新匯率)，但消費紀錄有手動設定匯率功能


X 3.我想增加一個將所有頁面彙整之後匯出PDF的功能，就是可以匯出產生旅遊手冊  你可以幫我增加這個功能到我的程式碼中嗎?

按下PDF無反應

V 數據管理頁面以文字顯示正在開發中，功能還不完整

V 4. 數據管理頁面，按鈕統一

V 5.旅遊筆記模板建立:天氣氣溫(自動抓取GPS訊號判別帶入，但可手動修改)、"我到了...""我看了..."、"我吃了..."、"我聽了..."、"我玩了..."垂直分行排列於內容輸入範圍中，寬度符合文字內容即可

6.新增常用語翻譯以及即時翻譯功能


V 7. 行程管理頁面，輸入開始日期和結束日期後，自動檢查時間是否合理(結束日期應在開始日期之後)
若日期輸入錯誤，則跳出提醒請使用者確認
並提示若日期輸入錯誤，每日行程頁面將無法正常編輯行程

V 8. 消費追蹤頁面，當新增消費時，一併紀錄時間(包含幾點幾分)，當建立一筆新的消費紀錄時不需要跳出提示"消費記錄已保存！"，直接建立即可

V 9. 我希望增加設定功能，在這個設定功能裡可以選擇要顯示的頁面。若未勾選顯示，則不顯示該頁面

V 10. 此外新增記事本頁面，記事本頁面含有可插入的Checkbox按鈕，按鈕顯示文字"完成"，插入記事內容後可以讓使用者點按，點按後亮起綠色

記事本頁面，插入完成按鈕改為插入"代辦"按鈕

此按鈕按下前顯示紅色"代辦"，按下後顯示綠色"完成"

按鈕大小符合顯示文字即可

按鈕位置靠左對齊放置，右側新增說明文字"插入代辦按鈕即可在新增筆記後變成代辦清單模式"
---------------------------------------------------------

請修正:

1. 點按文字方塊是將文字帶入正在編輯的筆記內容，不是直接新增筆記

2. 將資料連同視覺頁面輸出為.docx的功能是將所有分頁的資訊彙總輸出，不是只輸出筆記部分

3. 匯出資料功能是為了避免資料遺失，所以要匯出的是所有分頁已存儲的內容，而格式則需要編輯成能夠匯回程式使用的格式

4. 匯出匯入功能額外生成一個獨立分頁放置



--------------------------------------------------------


1. 
2. 旅遊筆記頁面，新增筆記的標題使用文字預先填入當下日期時間，地點自動優先帶入GPS資訊並用純文字填入，但這兩項資訊保持可手動修改；新增筆記條件不要求標題必填，下方新增可重複點按文字方塊可以快速將文字帶入筆記內容，按一次就將文字貼上一次，按兩次就貼上兩次，以此類推；預設文字按鈕分兩區，正面詞區有:"好吃""有特色""美麗""親切""想再來""難忘""便利""高CP"，負面詞區有:"服務差""不推薦""難吃""無聊""太貴""太花時間""不值得"

4. 新增資料匯出及匯入功能，以避免資料遺失
5. 新增將資料連同視覺頁面輸出為.docx的功能



------------------------------------------------------

1.在"物品清單"頁面內的呈現改為按鈕形式，未按下時是白色，按下後變成綠色；並且增加可新增按鈕功能

2.記憶功能保證下次開啟資料還在

3.每個頁面的下拉清單預設代入最後編輯過的行程，並保持各分頁同步選擇同一選項

-----------------

1. 物品清單頁面新增預設物品
</file>

<file path="待研究.txt">
待研究: .使用者上傳文件： 使用者將旅遊手冊、預訂確認信、機票截圖等的圖片或 PDF 檔案上傳到 App 中。
後端處理 (OCR)： App 的後端伺服器接收到文件後，將其發送給 OCR 服務進行文字辨識。OCR 服務會回傳辨識出來的文字內容，以及這些文字在圖片中的位置資訊（例如：每個字或詞的座標範圍）。

是否可以聯動航班資訊---目前尚未研究出免費資源



我希望在這個程式裡新增一個功能，這個功能整合在TripManagement頁面的"+"按鈕裡，"+"按鈕按下後出現兩個選項:"手動輸入行程""Ai辨識行程"，當按下手動輸入行程時，則以現行的行程新增方式不更動，當按下Ai辨識行程時，跳出一個文字輸入框，使用者可以在此輸入框中輸入各種行程資訊，當完成時，Ai可以自動辨識輸入內容並半自動的幫使用者按照不同資訊欄位頁面去新增填上資訊，所謂半自動指的是，每一個要新增的資訊皆要使用者按下確認後才進行新增動作，此Ai功能使用GitHub Models的GPT-4o免費模型來執行



執行netlify dev出現以下訊息 Still waiting for server on port 5173 to be ready. Are you sure this is the correct port? Change this with the targetPort option in your netlify.toml.網頁端錯誤為:Failed to load resource: the server responded with a status of 404 (Not Found)Understand this error
TripManagement.jsx:372 AI 分析失敗: Error: 伺服器錯誤: 404
    at handleAiSubmit (TripManagement.jsx:351:15)
handleAiSubmit @ TripManagement.jsx:372Understand this error


將.env填入API key會導致github跳出警示



出現以下提示:

﻿
:8888/.netlify/functions/analyze-itinerary:1  Failed to load resource: the server responded with a status of 500 (Internal Server Error)Understand this error
TripManagement.jsx:372 AI 分析失敗: Error: 伺服器錯誤: 500
    at handleAiSubmit (TripManagement.jsx:351:15)

react-router-dom.js?v=e4c5dd4a:4410 ⚠️ React Router Future Flag Warning: React Router will begin wrapping state updates in `React.startTransition` in v7. You can use the `v7_startTransition` future flag to opt-in early. For more information, see https://reactrouter.com/v6/upgrading/future#v7_starttransition.
warnOnce @ react-router-dom.js?v=e4c5dd4a:4410Understand this warning
react-router-dom.js?v=e4c5dd4a:4410 ⚠️ React Router Future Flag Warning: Relative route resolution within Splat routes is changing in v7. You can use the `v7_relativeSplatPath` future flag to opt-in early. For more information, see https://reactrouter.com/v6/upgrading/future#v7_relativesplatpath.

﻿
DataManagement.jsx:126 無法找到有效的vfs字體路徑，將使用默認字體
(anonymous)	@	DataManagement.jsx:126

 Loaded function analyze-itinerary
(node:4020) [DEP0060] DeprecationWarning: The `util._extend` API is deprecated. Please use Object.assign() instead.
(Use `node --trace-deprecation ...` to show where the warning was created)
Request from ::1: POST /.netlify/functions/analyze-itinerary
Failed to parse JSON from AI response: ```json
{
  "tripName": "澳門進出張家界 國家森林公園8天",
  "destination": "張家界, 鳳凰古城, 長沙",
  "startDate": "2024-08-13",
  "endDate": "2024-08-20",
  "description": "澳門進出張家界國家森林公園8天行程，包含張家界國家森林公園、天門山、鳳凰古城等景點，並包含餐食、交通、導遊及住宿。",
  "flights": [
    {
      "id": "1",
      "date": "2024-08-13",
      "airline": "BR",
      "flightNumber": "805",
      "departureCity": "RMQ",
      "arrivalCity": "MFM",
      "departureTime": "16:40",
      "arrivalTime": "18:35",
      "duration": ""
    },
    {
      "id": "2",
      "date": "2024-08-20",
      "airline": "BR",
      "flightNumber": "806",
      "departureCity": "MFM",
      "arrivalCity": "RMQ",
      "departureTime": "20:10",
      "arrivalTime": "22:05",
      "duration": ""
    }
  ]
}
```
Error processing request: Error: AI 回傳的格式不正確，無法解析。
    at Object.handler (C:\Users\BRO\AppData\Local\Temp\tmp-4020-Bj25YL101Sts\file:\D:\Ai%20software%20DEV\AiTravelAPP1.0\netlify\functions\analyze-itinerary.js:69:13)
    at processTicksAndRejections (node:internal/process/task_queues:105:5)
Response with status 500 in 2514 ms.



目前只辨識和填入了TripManagement頁面，我希望可以將所有有用訊息各自分別對應填入到對應的頁面，例如辨識出住宿旅館就填入到旅館資訊，辨識出日期加地點而非機場則填入每日行程資訊...等等    





顯示以下訊息console.log('原始活動列表:', window.selectedTripItinerary);
undefined
 console.log('排序後活動列表:', window.sortedActivities);
undefined
 console.log('原始活動列表:', window.selectedTripItinerary);
undefined
 1     console.log('原始活動列表:', window.selectedTripItinerary);
   2     console.log('排序後活動列表:', window.sortedActivities);
VM474:1 Uncaught SyntaxError: Unexpected identifier 'console'Understand this error
console.log
ƒ log() { [native code] }




我想解決這些警告

 client.ts:19 [vite] connecting...
chunk-VRHMX22Y.js?v=e4c5dd4a:21580 Download the React DevTools for a better development experience: https://reactjs.org/link/react-devtools
react-router-dom.js?v=e4c5dd4a:4410 ⚠️ React Router Future Flag Warning: React Router will begin wrapping state updates in `React.startTransition` in v7. You can use the `v7_startTransition` future flag to opt-in early. For more information, see https://reactrouter.com/v6/upgrading/future#v7_starttransition.
warnOnce @ react-router-dom.js?v=e4c5dd4a:4410Understand this warning
react-router-dom.js?v=e4c5dd4a:4410 ⚠️ React Router Future Flag Warning: Relative route resolution within Splat routes is changing in v7. You can use the `v7_relativeSplatPath` future flag to opt-in early. For more information, see https://reactrouter.com/v6/upgrading/future#v7_relativesplatpath.
warnOnce @ react-router-dom.js?v=e4c5dd4a:4410Understand this warning
client.ts:155 [vite] connected.
DataManagement.jsx:37 pdfmake 從 module.default 載入完成
DataManagement.jsx:63 Loaded vfs_fonts module: Object
DataManagement.jsx:126 無法找到有效的vfs字體路徑，將使用默認字體
(anonymous) @ DataManagement.jsx:126Understand this warning
DataManagement.jsx:129 設置空的vfs對象，將使用默認字體 (可能導致中文亂碼)



我在本地端測試都正常，但是上傳至github並且用netlify開啟網頁後就顯示以下訊息  

(index):1 Access to fetch at 'http://localhost:8888/.netlify/functions/analyze-itinerary' from origin 'https://aitravelapp10.netlify.app' has been blocked by CORS policy: Response to preflight request doesn't pass access control check: No 'Access-Control-Allow-Origin' header is present on the requested resource.
localhost:8888/.netl…analyze-itinerary:1 
 Failed to load resource: net::ERR_FAILED
index-bc3186c9.js:184 AI 分析失敗: TypeError: Failed to fetch
    at Ge (index-bc3186c9.js:184:3428)
    at Object._m (index-bc3186c9.js:37:9855)
    at Hm (index-bc3186c9.js:37:10009)
    at Gm (index-bc3186c9.js:37:10066)
    at Fc (index-bc3186c9.js:37:31466)
    at lf (index-bc3186c9.js:37:31883)
    at index-bc3186c9.js:37:36796
    at Js (index-bc3186c9.js:40:36881)
    at Rd (index-bc3186c9.js:37:8991)
    at No (index-bc3186c9.js:37:33170)
Ge	@	index-bc3186c9.js:184
</file>

<file path="ExpenseTracker改進.txt">
使用者希望我提供這次對 ExpenseTracker.jsx
  所做的所有修改的詳細摘要，以便他們可以將這些修改應用到另一個程式中。

  我將逐步說明我的思考過程和所做的更改，解釋每個修改的目的。

  以下是更改的細目：

   1. 初始目標： 在 ExpenseTracker 頁面中添加自訂匯率選項和功能，並將下拉選單字體大小增加到 16px。

   2. 發現 `styled-components`： 最初，我嘗試修改 src/styles/index.css 並添加 large-select 類別。然而，在檢查
      ExpenseTracker.jsx 後，我發現它使用 styled-components 進行樣式設定。這導致了：
       * 還原 `index.css`： 我清除了 src/styles/index.css 的內容，因為它不是這些樣式的正確位置。
       * 添加 `StyledSelect` 元件： 我使用 styled-components 定義了一個 StyledSelect
         元件，以應用所需的字體大小（16px）和其他樣式屬性到下拉選單。
       * 將 `<select>` 替換為 `<StyledSelect>`： ExpenseTracker.jsx 中的所有 <select> 標籤都被替換為
         <StyledSelect>。

   3. 實作「自訂匯率」功能：

       * 狀態變數：
           * customCurrencyCode：儲存使用者定義的自訂貨幣代碼（例如：「JPY」、「EUR」）。
           * customCurrencyRate：儲存使用者定義的匯率（例如：1 TWD = X 自訂貨幣）。
           * savedCustomCurrencyPairs：一個陣列，用於儲存多個已儲存的自訂貨幣對。此狀態會持久化到
             localStorage。

       * 動態 `allCurrencyPairs` 陣列：
           * 用於填充貨幣對下拉選單的 allCurrencyPairs 陣列現在是動態的。它現在包含：
               * 硬編碼的標準貨幣對（台幣對日圓、美元、人民幣、韓元、澳門元）。
               * 一個靜態佔位符選項：{ id: 'TWD_CUSTOM_NEW', name: '自訂匯率 (新增)', fromCode: 'TWD', toCode:
                  'CUSTOM_NEW' }。當選擇此選項時，會顯示用於定義新自訂匯率的輸入欄位。
               * 從 localStorage 加載的所有先前 savedCustomCurrencyPairs。這些會顯示在名稱後附加「(自訂)」。

       * 自訂匯率輸入和儲存的 UI：
           * 添加了 customCurrencyCode 和 customCurrencyRate
             的輸入欄位。這些欄位是條件式渲染的，僅在下拉選單中選擇 TWD_CUSTOM_NEW 時才顯示。
           * 在輸入欄位旁邊添加了一個「儲存自訂匯率」按鈕。

       * `handleSaveCustomPair` 函數：
           * 此函數處理儲存自訂貨幣對的邏輯。
           * 它驗證輸入（customCurrencyCode 和 customCurrencyRate）。
           * 它創建一個新的自訂貨幣對物件。
           * 它檢查 savedCustomCurrencyPairs 中是否已存在具有相同 toCode
             的貨幣對。如果存在，則更新現有條目；否則，添加新條目。
           * 它更新 savedCustomCurrencyPairs 狀態並將其持久化到 localStorage。

       * `handlePairChange` 函數修改：
           * 此函數已更新，以處理 TWD_CUSTOM_NEW 佔位符和任何 savedCustomCurrencyPairs 的選擇。
           * 當選擇 TWD_CUSTOM_NEW 時，它會清除自訂輸入欄位並將 useManualRate 設定為 true。
           * 當選擇 savedCustomCurrencyPair 時，它會使用儲存的值填充 customCurrencyCode 和 customCurrencyRate
             輸入欄位，並將 useManualRate 設定為 true。
           * 對於標準貨幣對，它會清除自訂輸入欄位並將 useManualRate 設定為 false。

       * `getCurrentPair` 和 `getCurrentRate` 函數修改：
           * 這些函數已更新，以正確檢索當前貨幣對及其有效匯率。
           * 如果選擇 TWD_CUSTOM_NEW，getCurrentRate 會使用 customCurrencyRate 中的值。
           * 如果選擇 savedCustomCurrencyPair，getCurrentRate 會使用儲存在該儲存貨幣對物件中的 rate。
           * getCurrentPair 函數現在正確地從 allCurrencyPairs 返回選定的貨幣對物件。

       * 「刪除此匯率」按鈕：
           * 在「手動設定匯率」和「刷新匯率」按鈕旁邊添加了一個「刪除此匯率」按鈕。
           * 此按鈕是條件式渲染的，僅在選擇已儲存的自訂貨幣對時才顯示（通過 selectedPairObject.rate 存在且
             selectedPairObject.toCode 不為 CUSTOM_NEW 來識別）。
           * `handleDeleteCustomPair` 函數： 此函數處理刪除已儲存的自訂貨幣對。
               * 它提示使用者確認。
               * 它從 savedCustomCurrencyPairs 中過濾掉選定的貨幣對。
               * 它更新 localStorage。
               * 刪除後，它將 selectedPair 重設為預設值（TWD_JPY）並清除相關的自訂貨幣狀態。

   4. 添加台幣對澳門元貨幣對：
       * 台幣對澳門元貨幣對（{ id: 'TWD_MOP', name: '台幣 → 澳門元', fromCode: 'TWD', toCode: 'MOP'
         }）已添加到 allCurrencyPairs 陣列的硬編碼部分。
       * fetchExchangeRates 函數已更新，將 MOP 包含在抓取的 rates 和 fallbackRates
         物件中，確保其匯率會自動檢索或使用預設值。

   5. 修復 `export default` 錯位：
       * export default ExpenseTracker; 語句被發現錯位在元件的 return 區塊內，導致「頂層」錯誤。
       * 此語句已移至 ExpenseTracker.jsx 檔案的最末尾，在元件定義之外，以解決錯誤。

  這套全面的更改增強了 ExpenseTracker
  元件，使其具有強大的自訂貨幣管理功能，包括儲存、載入和刪除自訂匯率，以及 UI 改進和新的標準貨幣對。

  希望這份詳細摘要對您的其他程式有所幫助。
</file>

<file path=".env.example">
GEMINI_API_KEY="YOUR_API_KEY_HERE"
VITE_API_BASE_URL="YOUR_NETLIFY_DEV_URL_HERE"
</file>

<file path=".gitattributes">
# Set default behavior to automatically normalize line endings to LF
* text=auto eol=lf

# Explicitly declare text files you want to always be normalized and converted
# to LF in repository, and to the appropriate EOL for the platform when checked out.
*.jsx text
*.js text
*.ts text
*.tsx text
*.css text
*.html text
*.json text
*.md text
*.txt text
*.yml text
*.yaml text

# Binary files - do not normalize
*.png binary
*.jpg binary
*.jpeg binary
*.gif binary
*.ico binary
*.zip binary
*.gz binary
*.pdf binary
</file>

<file path=".gitignore">
".env" 

# Local Netlify folder
.netlify
</file>

<file path="GEMINI.md">
# Gemini 使用指南

本文件旨在幫助 Gemini 更好地理解此專案，並提供更精準的協助。

---

### **1. 專案概述 (Project Overview)**

*   **專案簡介**: 這是一個幫助使用者規劃旅行的 React 應用，包含行程管理、開銷記錄和打包清单等功能。
*   **技術棧**:
    *   **前端**: React (使用 Vite)
    *   **狀態管理**: React Context API
    *   **樣式**: 普通 CSS (`src/styles/index.css`)

---

### **2. 互動規則 (Interaction Rules)**

*   **語言**: 請使用繁體中文與我互動。

---

### **3. 程式碼規範 (Coding Conventions)**

*   **命名約定**:
    *   React 元件使用大駝峰命名法 (PascalCase)，例如 `DailyItinerary.jsx`。
    *   變數與函式使用小駝峰命名法 (camelCase)。
*   **程式碼風格**:
    *   遵循 Prettier 的預設規則。
    *   使用 2 個空格進行縮排。

---

### **4. 專案結構 (Project Structure)**

*   `src/pages`: 存放頁面級元件。
*   `src/components`: 存放可複用的 UI 元件 (目前尚未建立)。
*   `src/contexts`: 存放 React Context，用於全域狀態管理。
*   `src/assets`: 存放靜態資源，如圖片、SVG 等。
*   `src/styles`: 存放全域樣式。

---

### **5. 常用指令 (Common Commands)**

*   **啟動開發環境**: `npm run dev`
*   **執行測試**: `npm run test` (如果已設定)
*   **打包應用**: `npm run build`
</file>

<file path="README.md">
# 旅遊應用程序

這是一個用React開發的旅遊應用程序，提供行程管理、旅館資訊、旅遊須知等功能。

## 功能模塊

1. **行程管理** - 創建和管理旅遊行程
2. **每日行程** - 查看和編輯每日行程安排
3. **旅館資訊** - 保存和查看住宿相關信息
4. **旅遊須知** - 目的地相關的重要信息
5. **物品清單** - 旅行所需物品的檢查清單
6. **旅遊筆記** - 記錄旅行中的想法和經歷

## 安裝與運行

```bash
# 安裝依賴
npm install

# 啟動開發服務器
npm run dev

# 構建生產版本
npm run build
```

## 項目結構

```
src/
├── assets/       # 靜態資源
├── components/   # 共用組件
├── contexts/     # React上下文
├── hooks/        # 自定義鉤子
├── pages/        # 頁面組件
├── services/     # 服務和API
├── styles/       # 全局樣式
├── utils/        # 工具函數
├── App.jsx       # 主應用組件
└── main.jsx      # 應用入口
```

## 技術棧

- React
- React Router
- Styled Components
- Vite (構建工具)
</file>

<file path="src/assets/favicon.svg">
<svg xmlns="http://www.w3.org/2000/svg" width="64" height="64" viewBox="0 0 64 64">
  <rect width="64" height="64" rx="8" fill="#3498db" />
  <path d="M32 16 L42 32 L32 48 L22 32 Z" fill="white" />
  <circle cx="32" cy="32" r="6" fill="#f39c12" />
</svg>
</file>

<file path="src/data/Airportlist.txt">
台灣
TPE: TAIPEI-CHIANG KAI SHEK, 台灣桃園

CYI: CHIAYI, 台灣嘉義

CMJ: CHIMAY, 台灣七美

GNI: GREEN ISLAND, 台灣綠島

HUN: HUALIEN, 台灣花蓮

KHH: KAOHSIUNG, 台灣高雄

KNH: KINMEN, 台灣金門

MZG: MAKUNG, 台灣馬公

MFK: MATSU, 台灣馬祖

KYD: ORCHID ISLAND, 台灣蘭嶼

PIF: PINGTUNG, 台灣屏東

WOT: WON-AN, 台灣望安

TSA: SUNG SHAN - TAIPEI CITY, 台灣松山

TXG: TAICHUNG, 台灣台中

TTT: TAITUNG, 台灣台東

TNN: TAINAN, 台灣台南

中國
BHY: BEIHAI, 中國北海

PEK: BEIJING, 中國北京

CAN: CANTON, 中國廣州

CGQ: CHANGCHUN, 中國長春

CSX: CHANGSHA, 中國長沙

CTU: CHENGTU, 中國成都

CKG: CHONGQING, 中國重慶

DLC: DALIAN, 中國大連

DYG: DAYONG, 中國張家界

FOC: FOOCHOW, 中國福州

KWL: GUILIN, 中國桂林

KWE: GUIYANG, 中國貴陽

HAK: HAIKOU, 中國海口

HGH: HANGCHOW, 中國杭州

HRB: HARBIN, 中國哈爾濱

HFE: HEFEI, 中國合肥

TNA: JINAN, 中國濟南

KMG: KUNMING, 中國昆明

LHW: LANZHOU, 中國蘭州

LYA: LUOYANG, 中國洛陽

MXZ: MEIXIAN, 中國梅縣

KHN: NANCHANG, 中國南昌

SYX: SANYA, 中國三亞

SHA: SHANGHAI, 中國上海

SHE: SHENYANG, 中國瀋陽

SZX: SHENZHEN, 中國深圳

SJW: SHIJIAZHUANG, 中國石家莊

SWA: SWATOW, 中國汕頭

TYN: TAIYUAN, 中國太原

TSN: TIANJIN, 中國天津

TAO: TSINGTAO, 中國青島

TXN: TUNXI, 中國黃山

URC: URUMQI, 中國烏魯木齊

WNZ: WENZHOU, 中國溫州

WUH: WUHAN, 中國武漢

XMN: XIAMEN, 中國廈門

SIA: XIAN, 中國西安

XIY: XIANYANG, 中國襄陽

YNT: YANTAI, 中國煙台

CGO: ZHENGZHOU, 中國鄭州

ZHA: ZHANJIANG, 中國湛江

ZUH: ZHUHAI, 中國珠海

港澳日韓
HKG: HONG KONG, 香港

MFM: MACAU, 澳門

SEL: SEOU, 南韓首爾

PUS: PUSAN, 南韓釜山

CTS: CHITOSE, 日本千歲

FUK: FUKUOKA, 日本福岡

HKD: HAKODATE, 日本函館

HND: HANEDA, 日本東京羽田

NGO: NAGOYA, 日本名古屋

NRT: NARITA, 日本東京成田

OKA: OKINAWA, 日本沖繩

KIX: OSAKA-KANSAI INTERNATIONAL, 日本大阪

SPK: SAPPORO, 日本札幌

東南亞
BAG: BAGUIO, 菲律賓碧瑤

BWN: BANDAR SERI BEGAWAN, 汶萊

BKK: BANGKOK, 泰國曼谷

BOM: BOMBAY, 印度孟買

CCU: CALCUTTA, 印度加爾各答

CEB: CEBU, 菲律賓宿霧

CNX: CHIANG MAI, 泰國清邁

CGP: CHITTAGON, 孟加拉吉大港

CMB: COLOMBO, 斯里蘭卡可倫坡

DAC: DACCA, 孟加拉達卡

DVO: DAVAO, 菲律賓達沃

DEL: DELHI, 印度德里

DPS: DENPASAR, 印尼巴里島

DIL: DILI, 印尼帝利

HAN: HANOI, 越南河內

IPH: IPOH, 馬來西亞怡保

CGK: JAKARTA, 印尼雅加達

KBL: KABUL, 阿富汗喀布爾

KHI: KARACHI, 巴基斯坦喀拉蚩

KTM: KATHMANDU, 尼泊爾加德滿都

BKI: KOTA KINABALU, 馬來西亞亞庇

KUL: KUALA LUMPUR, 馬來西亞吉隆坡

MDC: MANADO, 印尼馬納多

MNL: MANILA, 菲律賓馬尼拉

AMI: MATARAM, 印尼馬塔蘭

MES: MEDAN, 印尼棉蘭

INU: NAURU, 諾魯諾魯

PDG: PADANG, 印尼巴東

PLM: PALEMBANG, 印尼巨港

PKU: PEKANBARU, 印尼北干巴魯

PEN: PENANG, 馬來西亞檳城

PNH: PHNOM PENH, 柬埔寨金邊

HKT: PHUKET, 泰國普吉島

RGN: RANGOON, 緬甸仰光

SGN: SAIGON, 越南胡志明市

SPN: SAIPAN, 塞班塞班

SBW: SIBU, 馬來西亞詩巫

SIN: SINGAPORE, 新加坡

SOC: SOLO CITY, 印尼梭羅

SUB: SURABAYA, 印尼泗水

TBU: TONGATAPU, 東加王國東加塔布

VTE: VIENTIANE, 寮國永珍

美國
ABI: ABILENE, 美國阿比林

ABR: ABERDEEN, 美國阿伯丁

CAK: AKRON/CANTON, 美國阿克倫/坎頓

ALS: ALAMOSA, 美國阿拉莫薩

ALB: ALBANY-SCHENCTADY, 美國奧爾巴尼

ABQ: ALBUOERQUE, 美國阿波寇爾克

AEX: ALEXANDRIA, 美國亞歷山大

ABE: ALLENTOWN-BTHLEHM, 美國阿倫敦

AIA: ALLIANCE, 美國聯盟市

AMA: AMARILLO, 美國阿馬里洛

ANC: ANCHORAGE, 美國安克拉治

ATW: APPLETON, 美國阿普爾頓

ACV: ARCATA, 美國阿克塔

AVL: ASHEVLE-HENDSNVLE, 美國阿什維爾

ASE: ASPEN, 美國阿斯彭

ATL: ATLANTA, 美國亞特蘭大

AGS: AUGUSTA, 美國奧古斯塔

AUS: AUSTIN, 美國奧斯丁

BFL: BAKERSFIELD, 美國貝克斯菲爾德

BGR: BANGOR, 美國班戈

BTR: BATON ROUGE - RYAN, 美國巴頓魯日

BPT: BEAUMONT-PTARTHUR-JEFFERSON, 美國博蒙特

ZBV: BEAVER CREEK VAN SVC, 美國比弗克里克

BLI: BELLINGHAM, 美國貝靈漢

BIL: BILLINGS, 美國比林斯

BGM: BINGHAMTON, 美國賓漢頓

BHM: BIRMINGHAM, 美國伯明罕

BOI: BOISE, 美國波夕

BOS: BOSTON, 美國波士頓

BZN: BOZEMAN, 美國波茲曼

BMI: BLOOMINGTON-NORMAL, 美國布盧明頓

BMG: BLOOMINGTON, 美國布盧明頓

BDL: BRADLEY INTL–HARTFORD, 美國哈特福德

BKX: BROOKINGS, 美國布魯金斯

BUF: BUFFALO, 美國水牛城

BRL: BURLINGTON, 美國伯靈頓

BTV: BURLINGTON, 美國伯靈頓

MDH: CARBONDALE, 美國卡本代爾

CLD: CARLSBAD, 美國卡爾斯巴德

CPR: CASPER, 美國卡斯珀

CID: CEDAR RAPIDS, 美國錫達拉皮茲

CYS: CHEYENNE, 美國夏延

CDR: CHADRON, 美國查德倫

CMI: CHAMPAIGN, 美國尚佩恩

CHS: CHARLESTON, 美國查爾斯頓

CRW: CHARLESTON, 美國查爾斯頓

CLT: CHARLOTTE, 美國夏洛特

CHO: CHARLOTTESVILLE, 美國夏洛茨維爾

CHA: CHATTANOOGA-LOVELL FIELD, 美國查塔努加

ORD: CHICAGO-O HARE INTER., 美國芝加哥

CIC: CHICO, 美國奇科

CVG: CINCINNATI, 美國辛辛那提

COD: CODY/YELLOWSTONE, 美國科迪

COS: COLORADO SPRINGS, 美國科羅拉多泉

CAE: COLUMBIA, 美國哥倫比亞

CSG: COLUMBUS, 美國哥倫布

CMH: COLUMBUS, 美國哥倫布

UBS: COLUMBUS-GOLDEN TRIANGLE REG., 美國哥倫布

SBP: COUNTY AIRPORT, 美國聖路易斯-奧比斯波

CRP: CORPUS CHRISTI, 美國科珀斯克里斯蒂

CEZ: CORTEZ, 美國科爾特斯

CLE: CLEVELAND, 美國克利夫蘭

CEC: CRESCENT CITY, 美國新月城

DFW: DALLAS,TX, 美國達拉斯

DAY: DAYTON, 美國代頓

DAB: DAYTONA BEACH, 美國代托納比奇

DEC: DECATUR, 美國迪凱特

DEN: DENVER, 美國丹佛

DVL: DEVILS LAKE, 美國魔鬼湖

DSM: DES MOINES, 美國狄蒙

DTW: DETROIT, 美國底特律

DIK: DICKINSON, 美國狄金森

DDC: DODGE CITY, 美國道奇城

DBQ: DUBUQUE, 美國迪比克

DRO: DURANGO, 美國杜蘭戈

EGE: EAGLE, 美國伊格爾

ELP: EL PASO, 美國埃爾帕索

ELM: ELMIRA, 美國埃爾邁拉

ESC: ESCANABA, 美國埃斯卡諾巴

EUG: EUGENE, 美國尤金

EVV: EVANSVILLE, 美國埃文斯維爾

FRM: FAIRMONT, 美國費爾蒙特

FAR: FARGO, 美國法戈

FMN: FARMINGTON, 美國法明頓

FLL: FORT LAUDERDALE, 美國勞德代爾堡

FMY: FORT MYERS-PAGE FIELD, 美國邁爾斯堡

RSW: FORT MYERS-SOUTH WEST FLORIDA, 美國邁爾斯堡

FSM: FORT SMITH, 美國史密斯堡

FWA: FORT WAYNE, 美國韋恩堡

FAT: FRESNO, 美國弗雷斯諾

QWF: FT. COLLINS BUS SERVICE, 美國科林斯堡

GCC: GILLETTE, 美國吉列特

GNV: GAINESVILLE, 美國蓋恩斯維爾

GBG: GALESBURG, 美國蓋爾斯堡

GCK: GARDEN CITY, 美國花園城

GRI: GRAND ISLAND, 美國大島

GJT: GRAND JUNCTION, 美國大章克申

GRR: GRAND RAPIDS, 美國大急流城

GTF: GREAT FALLS, 美國大瀑布城

GRB: GREEN BAY, 美國綠灣

GSO: GREENSBORO-HIGHPT, 美國格林斯伯勒

GSP: GREENVL-SPARTANBG, 美國格林維爾/斯帕坦堡

GUM: GUAM, 美國關島

GUC: GUNNISON, 美國甘尼森

HRL: HARLINGEN, 美國哈林根

HAR: HARRISBURG SKYPORT, 美國哈里斯堡

MDT: HARRISBURG INTL, 美國哈里斯堡

HFD: HARTFORD, 美國哈特福德

HDN: HAYDEN, 美國海登

HYS: HAYS, 美國海斯

HNL: HONOLULU(HAWAII), 美國夏威夷檀香山

HOU: HOUSTON-HOBBY, 美國休斯頓

IAH: HOUSTON-INTERCONTINENTAL, 美國休斯頓

HON: HURON, 美國休倫

HSV: HUNTSVIL-DECATUR, 美國亨茨維爾/迪凱特

IPL: IMPERIAL, 美國帝國城

IND: INDIANAPOLIS, 美國印第安納波利斯

IYK: INYOKERN, 美國因約肯

IMT: IRON MOUNTAIN, 美國鐵山

IWD: IRONWOOD, 美國鐵木

JAN: JACKSON, 美國傑克遜

JAC: JACKSON, 美國傑克遜

JAX: JACKSONVILLE, 美國傑克遜維爾

JMS: JAMESTOWN, 美國詹姆斯敦

TRI: JOHNSON CTY - KINGPORT, 美國布里斯托爾/金斯波特

AZO: KALAMAZOO, 美國卡拉馬祖

MKC: KANSAS CITY-DOWNTOWN, 美國堪薩斯城

MCI: KANSAS CITY-INTERNATIONAL, 美國堪薩斯城

ILE: KILLEEN, 美國基林

EYW: KEY WEST, 美國基韋斯特

TYS: KNOXVILLE, 美國諾克斯維爾

LSE: LA CROSSE, 美國拉克羅斯

LAF: LAFAYETTE, 美國拉斐特

LCH: LAKE CHARLES, 美國查爾斯湖

LAN: LANSING, 美國蘭辛

LAR: LARAMIE, 美國拉勒米

LRD: LAREDO, 美國拉雷多

LAS: LAS VEGAS, 美國拉斯維加斯

LEX: LEXINGTON, 美國列克星敦

LBL: LIBERAL, 美國利伯勒爾

LNK: LINCOLN, 美國林肯

LIT: LITTLE ROCK, 美國小岩城

GGG: LONGVIEW, 美國朗維尤

LAX: LOS ANGELES, 美國洛杉磯

BUR: LOS ANGELES-BURBANK, 美國伯班克

LGB: LOS ANGELES-LONG BEACH, 美國長灘

SDF: LOUISVILLE, 美國路易維爾

LYH: LYNCHBURG, 美國林奇堡

MFE: MCALLEN, 美國麥卡倫

MSN: MADISON, 美國麥迪遜

MHT: MANCHESTER, 美國曼徹斯特

MBL: MANISTEE, 美國馬尼斯蒂

MCW: MASON CITY, 美國梅森城

MTO: MATTOON, 美國馬圖恩

MFR: MEDFORD, 美國梅德福

MLB: MELBOURNE, 美國墨爾本

MEM: MEMPHIS, 美國孟菲斯

MCE: MERCED, 美國默塞德

MIA: MIAMI, 美國邁阿密

MAF: MIDLAND, 美國米德蘭

MSP: MINNEAPOLIS, 美國明尼阿波利斯

MKE: MIWAKEE, 美國密爾瓦基

MSO: MISSOULA, 美國米蘇拉

MOB: MOBILE, 美國莫比爾

MOD: MODESTO, 美國莫德斯托

MLI: MOLINE, 美國莫林

MRY: MONTEREY, 美國蒙特利

MGM: MONTGOMERY, 美國蒙哥馬利

MTJ: MONTROSE, 美國蒙特羅斯

MLU: MONROE, 美國蒙羅

MKG: MUSKEGON, 美國馬斯基岡

MVN: MT VERNON, 美國弗農山

BNA: NASHVILLE, 美國納許維爾

ARA: NEW IBERIA-ACADIANA REGIONAL, 美國新伊比利亞

LFT: NEW IBERIA-LAFAYETTE, 美國拉斐特

MSY: NEW ORLEANS, 美國紐奧良

PHF: NEWPORTNEWS-HAMPT, 美國紐波特紐斯

JFK: NEW YORK-J.F.KENNEDY INTL., 美國紐約

LGA: NEW YORK-LA GUARDIA, 美國紐約

EWR: NEW YORK-NEWARK INTL, 美國紐約紐華克

OFK: NORFOLK, 美國諾福克

ORF: NORFOLK, 美國諾福克

LBF: NORTH PLATTE, 美國北普拉特

OAK: OAKLAND, 美國奧克蘭

OKC: OKLAHOMA CITY, 美國奧克拉荷馬城

OMA: OMAHA, 美國奧馬哈

ONT: ONTARIO, 美國安大略

MCO: ORLANDO, 美國奧蘭多

OSH: OSHKOSH, 美國奧什科什

OTM: OTTUMWA, 美國奧圖姆瓦

OXR: OXNARD/VENTURA, 美國奧克斯納德

PSP: PALM SPRINGS, 美國棕櫚泉

PFN: PANAMA CITY, 美國巴拿馬城

PSC: PASCO-RICHLD-KENN, 美國帕斯科

PNS: PENSACOLA, 美國彭薩科拉

PIA: PEORIA, 美國皮歐立亞

PHL: PHILADEPHIA, 美國費城

PHX: PHOENIX, 美國鳳凰城

PIR: PIERRE, 美國皮爾

PIT: PITTSBURGH, 美國匹茲堡

PDX: PORTLAND, 美國波特蘭

PWM: PORTLAND, 美國波特蘭

POU: POUGHKEEPSIE-DUCHESS COUNTY, 美國波基普西

SWF: POUGHKEEPSIE-NEWBURGH, 美國紐堡

PUB: PUEBLO, 美國普韋布洛

PUW: PULLMAN, 美國普爾曼

RDU: RALEIGH/DURHAM, 美國羅利/德罕

RAP: RAPID CITY, 美國拉皮德城

RDD: REDDING, 美國雷丁

RDM: REDMOND, 美國雷德蒙德

RNO: RENO, 美國里諾

RIC: RICHMOND, 美國里士滿

RIW: RIVERTON, 美國里弗頓

PVD: PROVIDENCE, 美國普羅維登斯

UIN: QUINCY, 美國昆西

ROA: ROANOKE, 美國羅阿諾克

RST: ROCHESTER, 美國羅徹斯特

ROC: ROCHESTER, 美國羅徹斯特

RFD: ROCKFORD-GREATER ROCKFORD, 美國羅克福德

ZRF: ROCKFORD-ROCKFORD PARK & RIDE, 美國羅克福德

RKS: ROCK SPRINGS, 美國羅克斯普林斯

SMF: SACRAMENTO, 美國沙加緬度

MBS: SAGINAW-BAYCITY, 美國薩吉諾

SAT: SAN ANTONIO, 美國聖安東尼奧

SLC: SALT LAKE CITY, 美國鹽湖城

SJT: SAN ANGELO, 美國聖安吉洛

SAN: SAN DIEGO, 美國聖地牙哥

SFO: SAN FRANCISCO, 美國舊金山

SJC: SAN JOSE, CA., 美國聖荷西

CSL: SAN LUIS OBISPO, 美國聖路易斯-奧比斯波

SBP: SAN LUIS OBISPO-COUNTY AIRPORT, 美國聖路易斯-奧比斯波

SNA: SANTA ANA, 美國聖安娜

SBA: SANTA BARBARA, 美國聖塔芭芭拉

SAF: SANTA FE, 美國聖塔菲

SMX: SANTA MARIA, 美國聖瑪麗亞

STS: SANTA ROSA, 美國聖羅莎

SRQ: SARASOTA, 美國薩拉索塔

SAV: SAVANNAH, 美國薩凡納

BFF: SCOTTSBLUFF, 美國斯科茨布拉夫

AVP: SCRANTN-WILKESBAR, 美國斯克蘭頓/威爾克斯-巴里

SEA: SEATTLE, 美國西雅圖

SHR: SHERIDAN, 美國謝里登

SHV: SHREVEPORT, 美國什里夫波特

FSD: SIOUX FALLS, 美國蘇瀑布

SBN: SOUTH BEND, 美國南灣

SPW: SPENCER, 美國斯賓塞

SPI: SPRINGFIELD, 美國斯普林菲爾德

SGF: SPRINGFIELD, 美國斯普林菲爾德

GEG: SPOKANE INTERNATIONAL, 美國斯波坎

STL: ST. LOUIS, 美國聖路易

SCE: STATE COLLEGE, 美國大學城

SYR: SYRACUSE(NY), 美國雪城

QBF: VAIL, 美國韋爾

VIS: VISALIA, 美國維塞利亞

TLH: TALLAHASSEE, 美國塔拉哈西

TPA: TAMPA, 美國坦帕

TEX: TELLURIDE, 美國特柳賴德

HUF: TERRE HAUTE, 美國特雷霍特

TXK: TEXARKANA, 美國特克薩卡納

TOL: TOLEDO, 美國托萊多

TVC: TRAVERSE CITY, 美國特拉弗斯城

TUS: TUCSON, 美國圖森

TUL: TULSA, 美國塔爾薩

TYR: TYLER, 美國泰勒

ACT: WACO-MUNICIPAL, 美國韋科

BWI: WASHIONTON-BALTIMORE/WASH INTL, 美國華盛頓巴爾的摩

IAD: WASHIONTON-DULLES INTL., 美國華盛頓杜勒斯

DCA: WASHIONTON-RONALD REAGAN NATL., 美國華盛頓雷根

ALO: WATERLOO, 美國滑鐵盧

ATY: WATERTOWN, 美國沃特敦

AUW: WAUSAU-MUNICIPAL, 美國沃索

CWA: WAUSAU-CENTRAL WISCONSIN, 美國沃索

HPN: WESTCHESTER COUNTY, 美國威斯特徹斯特

PBI: WEST PALM BEACH, 美國西棕櫚灘

ICT: WICHITA, 美國威奇托

SPS: WICHITA FALLS, 美國威奇托福爾斯

ISN: WILLISTON, 美國威利斯頓

WRL: WORLAND, 美國沃蘭

YKM: YAKIMA, 美國亞基馬

YKN: YANKTON, 美國揚克頓

YNG: YOUNGSTOWN, 美國揚斯敦

YUM: YUMA, 美國尤馬


加拿大
YBC: BAIE COMEAU, 加拿大貝克

YBG: BAGOTVILLE, 加拿大波哥維

YYC: CALGARY, 加拿大卡加立

YCG: CASTLEGAR, 加拿大卡司特雷加

YYG: CHARLOTTETOWN, 加拿大沙洛特城

YOD: COLD LAKE, 加拿大冷湖

YQQ: COMOX, 加拿大康英克斯

YXC: CRANBROOK, 加拿大克藍布魯克

YDF: DEER LAKE, 加拿大鹿湖

YPR: DIGBY ISLAND, 加拿大魯伯王子鎮

YEA: EDMONTON, 加拿大艾德頓

YMM: FORT MCMURRAY, 加拿大福麥木瑞

YXJ: FORT SAINT JOHN, 加拿大福聖約翰

YFC: FREDERICTON, 加拿大菲德里鎮

YQX: GANDER, 加拿大甘德

YGP: GASPE, 加拿大加斯佩

YQU: GRANDE PRAIRIE, 加拿大格蘭伯瑞爾

YYR: GOOSE BAY, 加拿大鵝灣

YHZ: HALIFAX, 加拿大哈利法克斯

YKA: KAMLOOPS, 加拿大康露市

YLW: KELOWNA, 加拿大卡洛那

YQL: LETHBRIDGE, 加拿大雷絲橋

YLL: LLOYDMINSTER, 加拿大羅明斯特

YXU: LONDON, 加拿大倫敦

YXH: MEDICINE HAT, 加拿大麥迪森漢

YQM: MONCTON, 加拿大蒙克通

YYY: MONT JOLI, 加拿大蒙特朱利

YMQ: MONTREAL, 加拿大蒙特利爾

YUL: MONTREAL, 加拿大蒙特利爾

YBL: MUNICIPAL, 加拿大原貝爾河

YCD: NANAIMO ARPT, 加拿大娜娜莫

YYB: NORTH BAY, 加拿大北灣市

YOW: OTTAWA, 加拿大渥太華

YYF: PENTICTON, 加拿大攀蒂頓

YXS: PRINCE GEORGE, 加拿大喬治王子鎮

YQB: QUEBEC, 加拿大魁北克

YQR: REGINA, 加拿大瑞吉娜

YSJ: SAINT JOHN, 加拿大聖約翰

YAM: SAULT STE MARIE, 加拿大所聖瑪利

YXE: SASKATOON, 加拿大撒司卡通

YYD: SMITHERS, 加拿大使密得斯

YYT: ST. JOHNS, 加拿大聖約翰斯

YSL: ST LEONARD, 加拿大聖隆那

YSB: SUDBURY, 加拿大蘇布瑞

YQY: SYDNEY, 加拿大希梨

YXT: TERRACE, 加拿大德瑞司

YQT: THUNDER BAY, 加拿大雷灣市

YTS: TIMMINS, 加拿大丁敏市

YYZ: TORONTO, 加拿大多倫多

YTO: TORONTO, 加拿大多倫多

YVO: VAL D OR, 加拿大瓦多爾

YVR: VANCOUVER, 加拿大溫哥華

YYJ: VICTORIA, 加拿大維多利亞

YWK: WABUSH, 加拿大瓦布希

YQG: WINDSOR, 加拿大溫莎

YWG: WINNIPEG, 加拿大溫尼伯

YQI: YARMOUTH, 加拿大亞茅斯

YZF: YELLOWKNIFE, 加拿大黃刀鎮

紐澳
AKL: AUCKLANd, 紐西蘭奧克蘭

BNE: BRISBANE, 澳洲布里斯本

CNS: CAIRNS, 澳洲凱恩斯

CBR: CANBERRA, 澳洲坎培拉

CHC: CHRISTCHURCH, 紐西蘭基督城

DRW: DARWIN, 澳洲達爾文

HBA: HOBART, 澳洲荷巴特

HTI: HAMILTON ISLAND, 澳洲哈密爾頓島

MEL: MELBOURNE, 澳洲墨爾本

MIM: MERIMBULA, 澳洲梅里姆布拉

NAN: NADI, 斐濟南地

NOU: NOUMEA, 新喀里多尼亞努美亞

PPG: PAGO PAGO, 美屬薩摩亞巴哥巴哥

PPT: PAPEETE, 法屬玻里尼西亞大溪地

PER: PERTH, 澳洲伯斯

POM: POTR MORESBY, 巴布亞紐幾內亞摩勒斯比港

WLG: WELLINGTON, 紐西蘭威靈頓

SUV: SUVA, 斐濟蘇瓦

SYD: SYDNEY, 澳洲雪梨

歐洲
ABZ: ABERDEEN, 英國亞伯丁

AMS: AMSTERDAM, 荷蘭阿姆斯特丹

ATH: ATHENS, 希臘雅典

ANR: ANTWERP, 比利時安特衛普

BUH: BUCHAREST, 羅馬尼亞布加勒斯特

BUD: BUDAPEST, 匈牙利布達佩斯

BCN: BARCELONA, 西班牙巴塞隆納

BFS: BELFAST, 英國貝爾法斯特

BEG: BELGRADE, 塞爾維亞貝爾格勒

BGO: BERGEN, 挪威卑爾根

TXL: BERLIN, 德國柏林

BLQ: BOLOGNA, 義大利波隆那

BNJ: BONN, 德國波昂

BRS: BRISTOL, 英國布里斯托

BRU: BRUSSELS, 比利時布魯塞爾

CWL: CARDIFF, 英國卡地夫

CGN: COLOGNE, 德國科隆

CPH: COPENHAGEN, 丹麥哥本哈根

DUB: DUBLIN, 愛爾蘭都柏林

DUS: DUSSDOLF, 德國杜塞道夫

EDI: EDINBURGH, 英國愛丁堡

FAO: FARO, 葡萄牙法魯

FRA: FRANKFURT, 德國法蘭克福

GOA: GENOA, 義大利熱那亞

GVA: GENEVA, 瑞士日內瓦

GIB: GIBRALTAR, 直布羅陀

GLA: GLASGOW, 英國格拉斯哥

GOT: GOTHENBURG, 瑞典哥德堡

GRZ: GRAZ, 奧地利格拉茨

HAM: HAMBURG, 德國漢堡

HAJ: HANOVER, 德國漢諾威

HUY: HUMBERSIDE, 英國亨伯賽德

LHR: HEATHROW, 英國倫敦

HEL: HELSINKI, 芬蘭赫爾辛基

INN: INNSBRUCK, 奧地利因斯布魯克

IST: ISTANBUL, 土耳其伊斯坦堡

IEV: KIEV, 烏克蘭基輔

KLU: KLAGENFURT, 奧地利克拉根福

KBP: BORISPOL, 烏克蘭鮑里斯波爾

KRK: KRAKOW, 波蘭克拉科夫

LBA: LEEDS, 英國里茲

LNZ: LINZ, 奧地利林茨

LIS: LISBON, 葡萄牙里斯本

LGW: LONDON-GATWICK, 英國倫敦

LJU: LJUBLJANA, 斯洛維尼亞盧比安納

LUX: LUXEMBOURG, 盧森堡

LYS: LYON, 法國里昂

MAD: MADRID, 西班牙馬德里

AGP: MALAGA, 西班牙馬拉加

MAN: MANCHESTER, 英國曼徹斯特

MRS: MARSEILLE, 法國馬賽

MOW: MOSCOW, 俄羅斯莫斯科

MPL: MONTPELLIER, 法國蒙彼利埃

MUC: MUNICH, 德國慕尼黑

MXP: MILAN-MALPENSA, 義大利米蘭

LIN: MILAN-LINATE, 義大利米蘭

NAP: NAPLES, 義大利那不勒斯

NCL: NEW CASTLE, 英國新堡

NCE: NICE, 法國尼斯

NWI: NORWICH, 英國諾里奇

ODS: ODESSA, 烏克蘭敖德薩

OSL: OSLO, 挪威奧斯陸

CDG: PARIS-CHARLES DE GAULLE, 法國巴黎

ORY: PARIS-ORLY, 法國巴黎

PRG: PRAGUE, 捷克布拉格

RIX: RIGA, 拉脫維亞里加

FCO: ROME, 義大利羅馬

SZG: SALZBURG, 奧地利薩爾茨堡

SNN: SHANNON, 愛爾蘭香農

SOF: SOFIA, 保加利亞索非亞

SPU: SPLIT, 克羅埃西亞斯普利特

STO: STOCKHOLM, 瑞典斯德哥爾摩

LED: ST PETERSBURG, 俄羅斯聖彼得堡

STR: STUTTGART, 德國斯圖加特

TLL: TALLINN, 愛沙尼亞塔林

MME: TEESSIDE, 英國提賽德

TSR: TIMISOARA, 羅馬尼亞蒂米什瓦拉

TLS: TOULOUSE, 法國土魯斯

VRN: VERONA, 義大利維羅納

VCE: VENICE, 義大利威尼斯

VIE: VIENNA, 奧地利維也納

VNO: VILNIUS, 立陶宛維爾紐斯

WAW: WARSAW, 波蘭華沙

WRO: WROCLAW, 波蘭弗羅茨瓦夫

ZAG: ZAGREB, 克羅埃西亞薩格勒布

ZRH: ZURICH, 瑞士蘇黎世

中南美洲
ACA: ACAPUCCO, 墨西哥阿卡普爾科

ASU: ASUNCION, 巴拉圭亞松森

BOG: BOGOTA, 哥倫比亞波哥大

BUE: BUENDS AIRES, 阿根廷布宜諾斯艾利斯

BSB: BRASILIA, 巴西巴西利亞

BGI: BRIDGE TOWN, 巴貝多橋鎮

CCS: CARACAS, 委內瑞拉加拉加斯

CAY: CAYENNE, 法屬圭亞那卡宴

GRG: GEORGE TOWN, 蓋亞那喬治市

GUA: GUATEMALA CITY, 瓜地馬拉瓜地馬拉市

HAV: HAVANA, 古巴哈瓦那

KIN: KINGSTON, 牙買加京士頓

LPB: LA PAZ, 玻利維亞拉巴斯

LIM: LIMA, 秘魯利馬

MGA: MANAGUA, 尼加拉瓜馬拿瓜

MAO: MANAUS, 巴西瑪瑙斯

MAY: MANGROVE CAY, 巴哈馬紅樹灣

MEX: MEXICO CITY, 墨西哥墨西哥城

MVD: MONTEBIDEO, 烏拉圭蒙特維多

MBJ: MONTEGO BAY, 牙買加蒙特哥灣

PTY: PANAMA CITY, 巴拿馬巴拿馬城

PBM: PARAMARIBO, 蘇利南巴拉馬利波

PAP: PORT AU PRINCE, 海地太子港

POS: PORT OF SPAIN, 千里達及托巴哥西班牙港

UIO: QUITO, 厄瓜多基多

REL: RECIFE, 巴西累西腓

RIO: RIO DE JANEIRO, 巴西里約熱內盧

SJO: SAN JOSE, 哥斯大黎加聖約瑟

SJU: SAN JUAN, 波多黎各聖胡安

SAO: SAO PAULO(GRU), 巴西聖保羅

SAL: SAN SALVADOR, 薩爾瓦多聖薩爾瓦多

SCL: SANTIAGO, 智利聖地牙哥

SDQ: SANTO DOMINGO, 多明尼加聖多明哥

TGU: TEGUCIGALPA, 宏都拉斯德古斯加巴

非洲
ACA: ACAPULCO, 墨西哥阿卡普爾科

ABD: ABADAN, 伊朗阿巴丹

ABJ: ABIDJAN, 象牙海岸阿必尚

AUH: ABU DHABI, 阿拉伯聯合大公國阿布達比

ABV: ABUJA, 奈及利亞阿布加

ACC: ACCRA, 迦納阿克拉

ADD: ADDIS ABABA, 衣索比亞阿迪斯阿魯巴

ADE: ADEN, 葉門亞丁

ALG: ALGIERS, 阿爾及利亞阿爾及爾

AMM: AMMAN, 約旦安曼

ANK: ANKARA, 土耳其安卡拉

BGW: BAGHDAD, 伊拉克巴格達

BAH: BAHRAIN, 巴林

BKO: BAMAKO, 馬利巴馬科

BGF: BAN-GUI, 中非共和國班基

BEY: BEIRUT, 黎巴嫩貝魯特

BLZ: BLANTYRE, 馬拉威布蘭太

BZV: BRAXXABILLE, 剛果布拉薩市

CAI: CAIRO, 埃及開羅

CPT: CAPETOWN, 南非開普敦

CAS: CASABLANCA, 摩洛哥卡薩布蘭卡

CKY: CONAKRY, 幾內亞柯那克里

COO: COTONOU, 貝南柯多努

DKR: DAKAR, 塞內加爾達卡

DAM: DAMASCUS, 敘利亞大馬士革

DAR: DAR ES SALAAM, 坦尚尼亞達累斯薩拉姆

DHA: DHAHRAN, 沙烏地阿拉伯達蘭

DOH: DOHA, 卡達杜哈

DXB: DUBAI, 阿拉伯聯合大公國杜拜

EBB: ENTEBBE/KAMPALA, 烏干達恩特比/坎帕拉

FTL: FORT LAMY, 查德拉米堡

FNA: FREETOWN, 獅子山自由城

HRE: HARARE, 辛巴威哈拉雷

HBT: HAFR ALBATIN, 沙烏地阿拉伯哈夫爾巴廷

IST: ISTANBUL, 土耳其伊斯坦堡

JED: JEDDAH, 沙烏地阿拉伯吉達

JNB: JOHANNESBURG, 南非約翰尼斯堡

KRT: KHARTOUM, 蘇丹喀土穆

FIA: KINSHASA, 剛果民主共和國金夏沙

KWI: KUWAIT, 科威特

LOS: LAGOS, 奈及利亞拉哥斯

LPA: LASPALMAS, 西班牙拉斯巴馬斯

LBV: LIBREVILLE, 加彭自由市

LLW: LILONGWE, 馬拉威里郎威

LFW: LOME, 多哥洛美

LUM: LOURENCO MAROUES, 莫三比克魯倫素馬凱斯

LAD: LUAN DA, 安哥拉盧安達

LUN: LUSAKA, 尚比亞路沙卡

MLA: MALTA, 馬爾他

MTS: MANZINI, 史瓦帝尼曼齊尼

MSU: MASERU, 賴索托馬塞魯

MRU: MAURITIUS, 模里西斯

MGQ: MOGADISHU, 索馬利亞摩加迪休

MLW: MONROVIA, 賴比瑞亞蒙羅維亞

MCT: MUSCAT, 阿曼馬斯開特

NBO: NAIROBI, 肯亞奈洛比

NDJ: N’DJAMENA, 查德恩將納

NIM: NIAMEY, 尼日尼阿美

OUA: OUAGADOUGOU, 布吉納法索瓦加杜古

WDH: WINDHOEK, 納米比亞溫得和克

RAK: MARRAKECH, 摩洛哥馬拉喀什

RUH: RIYADH, 沙烏地阿拉伯利雅德

SAY: SALISBURY, 辛巴威索爾茲伯里

SEC: SERRE CHEVALIER, 法國塞爾舍瓦利耶

TNG: TANGIER, 摩洛哥丹吉爾

TNR: TANANARIVE, 馬達加斯加塔那那利佛

THR: TEHRAN, 伊朗德黑蘭

TLV: TELAVIV, 以色列特拉維夫

TIP: TRIPOLI, 利比亞的黎波里

TUN: TUNIS, 突尼西亞突尼斯

YAO: YAOUNDE, 喀麥隆雅恩德
</file>

<file path="src/data/airports.json">
[
  {
    "iata": "TPE",
    "name": "TAIPEI-CHIANG KAI SHEK",
    "city": "台灣桃園"
  },
  {
    "iata": "CYI",
    "name": "CHIAYI",
    "city": "台灣嘉義"
  },
  {
    "iata": "CMJ",
    "name": "CHIMAY",
    "city": "台灣七美"
  },
  {
    "iata": "GNI",
    "name": "GREEN ISLAND",
    "city": "台灣綠島"
  },
  {
    "iata": "HUN",
    "name": "HUALIEN",
    "city": "台灣花蓮"
  },
  {
    "iata": "KHH",
    "name": "KAOHSIUNG",
    "city": "台灣高雄"
  },
  {
    "iata": "KNH",
    "name": "KINMEN",
    "city": "台灣金門"
  },
  {
    "iata": "MZG",
    "name": "MAKUNG",
    "city": "台灣馬公"
  },
  {
    "iata": "MFK",
    "name": "MATSU",
    "city": "台灣馬祖"
  },
  {
    "iata": "KYD",
    "name": "ORCHID ISLAND",
    "city": "台灣蘭嶼"
  },
  {
    "iata": "PIF",
    "name": "PINGTUNG",
    "city": "台灣屏東"
  },
  {
    "iata": "WOT",
    "name": "WON-AN",
    "city": "台灣望安"
  },
  {
    "iata": "TSA",
    "name": "SUNG SHAN - TAIPEI CITY",
    "city": "台灣松山"
  },
  {
    "iata": "TXG",
    "name": "TAICHUNG",
    "city": "台灣台中"
  },
  {
    "iata": "TTT",
    "name": "TAITUNG",
    "city": "台灣台東"
  },
  {
    "iata": "TNN",
    "name": "TAINAN",
    "city": "台灣台南"
  },
  {
    "iata": "BHY",
    "name": "BEIHAI",
    "city": "中國北海"
  },
  {
    "iata": "PEK",
    "name": "BEIJING",
    "city": "中國北京"
  },
  {
    "iata": "CAN",
    "name": "CANTON",
    "city": "中國廣州"
  },
  {
    "iata": "CGQ",
    "name": "CHANGCHUN",
    "city": "中國長春"
  },
  {
    "iata": "CSX",
    "name": "CHANGSHA",
    "city": "中國長沙"
  },
  {
    "iata": "CTU",
    "name": "CHENGTU",
    "city": "中國成都"
  },
  {
    "iata": "CKG",
    "name": "CHONGQING",
    "city": "中國重慶"
  },
  {
    "iata": "DLC",
    "name": "DALIAN",
    "city": "中國大連"
  },
  {
    "iata": "DYG",
    "name": "DAYONG",
    "city": "中國張家界"
  },
  {
    "iata": "FOC",
    "name": "FOOCHOW",
    "city": "中國福州"
  },
  {
    "iata": "KWL",
    "name": "GUILIN",
    "city": "中國桂林"
  },
  {
    "iata": "KWE",
    "name": "GUIYANG",
    "city": "中國貴陽"
  },
  {
    "iata": "HAK",
    "name": "HAIKOU",
    "city": "中國海口"
  },
  {
    "iata": "HGH",
    "name": "HANGCHOW",
    "city": "中國杭州"
  },
  {
    "iata": "HRB",
    "name": "HARBIN",
    "city": "中國哈爾濱"
  },
  {
    "iata": "HFE",
    "name": "HEFEI",
    "city": "中國合肥"
  },
  {
    "iata": "TNA",
    "name": "JINAN",
    "city": "中國濟南"
  },
  {
    "iata": "KMG",
    "name": "KUNMING",
    "city": "中國昆明"
  },
  {
    "iata": "LHW",
    "name": "LANZHOU",
    "city": "中國蘭州"
  },
  {
    "iata": "LYA",
    "name": "LUOYANG",
    "city": "中國洛陽"
  },
  {
    "iata": "MXZ",
    "name": "MEIXIAN",
    "city": "中國梅縣"
  },
  {
    "iata": "KHN",
    "name": "NANCHANG",
    "city": "中國南昌"
  },
  {
    "iata": "SYX",
    "name": "SANYA",
    "city": "中國三亞"
  },
  {
    "iata": "SHA",
    "name": "SHANGHAI",
    "city": "中國上海"
  },
  {
    "iata": "SHE",
    "name": "SHENYANG",
    "city": "中國瀋陽"
  },
  {
    "iata": "SZX",
    "name": "SHENZHEN",
    "city": "中國深圳"
  },
  {
    "iata": "SJW",
    "name": "SHIJIAZHUANG",
    "city": "中國石家莊"
  },
  {
    "iata": "SWA",
    "name": "SWATOW",
    "city": "中國汕頭"
  },
  {
    "iata": "TYN",
    "name": "TAIYUAN",
    "city": "中國太原"
  },
  {
    "iata": "TSN",
    "name": "TIANJIN",
    "city": "中國天津"
  },
  {
    "iata": "TAO",
    "name": "TSINGTAO",
    "city": "中國青島"
  },
  {
    "iata": "TXN",
    "name": "TUNXI",
    "city": "中國黃山"
  },
  {
    "iata": "URC",
    "name": "URUMQI",
    "city": "中國烏魯木齊"
  },
  {
    "iata": "WNZ",
    "name": "WENZHOU",
    "city": "中國溫州"
  },
  {
    "iata": "WUH",
    "name": "WUHAN",
    "city": "中國武漢"
  },
  {
    "iata": "XMN",
    "name": "XIAMEN",
    "city": "中國廈門"
  },
  {
    "iata": "SIA",
    "name": "XIAN",
    "city": "中國西安"
  },
  {
    "iata": "XIY",
    "name": "XIANYANG",
    "city": "中國襄陽"
  },
  {
    "iata": "YNT",
    "name": "YANTAI",
    "city": "中國煙台"
  },
  {
    "iata": "CGO",
    "name": "ZHENGZHOU",
    "city": "中國鄭州"
  },
  {
    "iata": "ZHA",
    "name": "ZHANJIANG",
    "city": "中國湛江"
  },
  {
    "iata": "ZUH",
    "name": "ZHUHAI",
    "city": "中國珠海"
  },
  {
    "iata": "HKG",
    "name": "HONG KONG",
    "city": "香港"
  },
  {
    "iata": "MFM",
    "name": "MACAU",
    "city": "澳門"
  },
  {
    "iata": "SEL",
    "name": "SEOU",
    "city": "南韓首爾"
  },
  {
    "iata": "PUS",
    "name": "PUSAN",
    "city": "南韓釜山"
  },
  {
    "iata": "CTS",
    "name": "CHITOSE",
    "city": "日本千歲"
  },
  {
    "iata": "FUK",
    "name": "FUKUOKA",
    "city": "日本福岡"
  },
  {
    "iata": "HKD",
    "name": "HAKODATE",
    "city": "日本函館"
  },
  {
    "iata": "HND",
    "name": "HANEDA",
    "city": "日本東京羽田"
  },
  {
    "iata": "NGO",
    "name": "NAGOYA",
    "city": "日本名古屋"
  },
  {
    "iata": "NRT",
    "name": "NARITA",
    "city": "日本東京成田"
  },
  {
    "iata": "OKA",
    "name": "OKINAWA",
    "city": "日本沖繩"
  },
  {
    "iata": "KIX",
    "name": "OSAKA-KANSAI INTERNATIONAL",
    "city": "日本大阪"
  },
  {
    "iata": "SPK",
    "name": "SAPPORO",
    "city": "日本札幌"
  },
  {
    "iata": "BAG",
    "name": "BAGUIO",
    "city": "菲律賓碧瑤"
  },
  {
    "iata": "BWN",
    "name": "BANDAR SERI BEGAWAN",
    "city": "汶萊"
  },
  {
    "iata": "BKK",
    "name": "BANGKOK",
    "city": "泰國曼谷"
  },
  {
    "iata": "BOM",
    "name": "BOMBAY",
    "city": "印度孟買"
  },
  {
    "iata": "CCU",
    "name": "CALCUTTA",
    "city": "印度加爾各答"
  },
  {
    "iata": "CEB",
    "name": "CEBU",
    "city": "菲律賓宿霧"
  },
  {
    "iata": "CNX",
    "name": "CHIANG MAI",
    "city": "泰國清邁"
  },
  {
    "iata": "CGP",
    "name": "CHITTAGON",
    "city": "孟加拉吉大港"
  },
  {
    "iata": "CMB",
    "name": "COLOMBO",
    "city": "斯里蘭卡可倫坡"
  },
  {
    "iata": "DAC",
    "name": "DACCA",
    "city": "孟加拉達卡"
  },
  {
    "iata": "DVO",
    "name": "DAVAO",
    "city": "菲律賓達沃"
  },
  {
    "iata": "DEL",
    "name": "DELHI",
    "city": "印度德里"
  },
  {
    "iata": "DPS",
    "name": "DENPASAR",
    "city": "印尼巴里島"
  },
  {
    "iata": "DIL",
    "name": "DILI",
    "city": "印尼帝利"
  },
  {
    "iata": "HAN",
    "name": "HANOI",
    "city": "越南河內"
  },
  {
    "iata": "IPH",
    "name": "IPOH",
    "city": "馬來西亞怡保"
  },
  {
    "iata": "CGK",
    "name": "JAKARTA",
    "city": "印尼雅加達"
  },
  {
    "iata": "KBL",
    "name": "KABUL",
    "city": "阿富汗喀布爾"
  },
  {
    "iata": "KHI",
    "name": "KARACHI",
    "city": "巴基斯坦喀拉蚩"
  },
  {
    "iata": "KTM",
    "name": "KATHMANDU",
    "city": "尼泊爾加德滿都"
  },
  {
    "iata": "BKI",
    "name": "KOTA KINABALU",
    "city": "馬來西亞亞庇"
  },
  {
    "iata": "KUL",
    "name": "KUALA LUMPUR",
    "city": "馬來西亞吉隆坡"
  },
  {
    "iata": "MDC",
    "name": "MANADO",
    "city": "印尼馬納多"
  },
  {
    "iata": "MNL",
    "name": "MANILA",
    "city": "菲律賓馬尼拉"
  },
  {
    "iata": "AMI",
    "name": "MATARAM",
    "city": "印尼馬塔蘭"
  },
  {
    "iata": "MES",
    "name": "MEDAN",
    "city": "印尼棉蘭"
  },
  {
    "iata": "INU",
    "name": "NAURU",
    "city": "諾魯諾魯"
  },
  {
    "iata": "PDG",
    "name": "PADANG",
    "city": "印尼巴東"
  },
  {
    "iata": "PLM",
    "name": "PALEMBANG",
    "city": "印尼巨港"
  },
  {
    "iata": "PKU",
    "name": "PEKANBARU",
    "city": "印尼北干巴魯"
  },
  {
    "iata": "PEN",
    "name": "PENANG",
    "city": "馬來西亞檳城"
  },
  {
    "iata": "PNH",
    "name": "PHNOM PENH",
    "city": "柬埔寨金邊"
  },
  {
    "iata": "HKT",
    "name": "PHUKET",
    "city": "泰國普吉島"
  },
  {
    "iata": "RGN",
    "name": "RANGOON",
    "city": "緬甸仰光"
  },
  {
    "iata": "SGN",
    "name": "SAIGON",
    "city": "越南胡志明市"
  },
  {
    "iata": "SPN",
    "name": "SAIPAN",
    "city": "塞班塞班"
  },
  {
    "iata": "SBW",
    "name": "SIBU",
    "city": "馬來西亞詩巫"
  },
  {
    "iata": "SIN",
    "name": "SINGAPORE",
    "city": "新加坡"
  },
  {
    "iata": "SOC",
    "name": "SOLO CITY",
    "city": "印尼梭羅"
  },
  {
    "iata": "SUB",
    "name": "SURABAYA",
    "city": "印尼泗水"
  },
  {
    "iata": "TBU",
    "name": "TONGATAPU",
    "city": "東加王國東加塔布"
  },
  {
    "iata": "VTE",
    "name": "VIENTIANE",
    "city": "寮國永珍"
  },
  {
    "iata": "ABI",
    "name": "ABILENE",
    "city": "美國阿比林"
  },
  {
    "iata": "ABR",
    "name": "ABERDEEN",
    "city": "美國阿伯丁"
  },
  {
    "iata": "CAK",
    "name": "AKRON/CANTON",
    "city": "美國阿克倫/坎頓"
  },
  {
    "iata": "ALS",
    "name": "ALAMOSA",
    "city": "美國阿拉莫薩"
  },
  {
    "iata": "ALB",
    "name": "ALBANY-SCHENCTADY",
    "city": "美國奧爾巴尼"
  },
  {
    "iata": "ABQ",
    "name": "ALBUOERQUE",
    "city": "美國阿波寇爾克"
  },
  {
    "iata": "AEX",
    "name": "ALEXANDRIA",
    "city": "美國亞歷山大"
  },
  {
    "iata": "ABE",
    "name": "ALLENTOWN-BTHLEHM",
    "city": "美國阿倫敦"
  },
  {
    "iata": "AIA",
    "name": "ALLIANCE",
    "city": "美國聯盟市"
  },
  {
    "iata": "AMA",
    "name": "AMARILLO",
    "city": "美國阿馬里洛"
  },
  {
    "iata": "ANC",
    "name": "ANCHORAGE",
    "city": "美國安克拉治"
  },
  {
    "iata": "ATW",
    "name": "APPLETON",
    "city": "美國阿普爾頓"
  },
  {
    "iata": "ACV",
    "name": "ARCATA",
    "city": "美國阿克塔"
  },
  {
    "iata": "AVL",
    "name": "ASHEVLE-HENDSNVLE",
    "city": "美國阿什維爾"
  },
  {
    "iata": "ASE",
    "name": "ASPEN",
    "city": "美國阿斯彭"
  },
  {
    "iata": "ATL",
    "name": "ATLANTA",
    "city": "美國亞特蘭大"
  },
  {
    "iata": "AGS",
    "name": "AUGUSTA",
    "city": "美國奧古斯塔"
  },
  {
    "iata": "AUS",
    "name": "AUSTIN",
    "city": "美國奧斯丁"
  },
  {
    "iata": "BFL",
    "name": "BAKERSFIELD",
    "city": "美國貝克斯菲爾德"
  },
  {
    "iata": "BGR",
    "name": "BANGOR",
    "city": "美國班戈"
  },
  {
    "iata": "BTR",
    "name": "BATON ROUGE - RYAN",
    "city": "美國巴頓魯日"
  },
  {
    "iata": "BPT",
    "name": "BEAUMONT-PTARTHUR-JEFFERSON",
    "city": "美國博蒙特"
  },
  {
    "iata": "ZBV",
    "name": "BEAVER CREEK VAN SVC",
    "city": "美國比弗克里克"
  },
  {
    "iata": "BLI",
    "name": "BELLINGHAM",
    "city": "美國貝靈漢"
  },
  {
    "iata": "BIL",
    "name": "BILLINGS",
    "city": "美國比林斯"
  },
  {
    "iata": "BGM",
    "name": "BINGHAMTON",
    "city": "美國賓漢頓"
  },
  {
    "iata": "BHM",
    "name": "BIRMINGHAM",
    "city": "美國伯明罕"
  },
  {
    "iata": "BOI",
    "name": "BOISE",
    "city": "美國波夕"
  },
  {
    "iata": "BOS",
    "name": "BOSTON",
    "city": "美國波士頓"
  },
  {
    "iata": "BZN",
    "name": "BOZEMAN",
    "city": "美國波茲曼"
  },
  {
    "iata": "BMI",
    "name": "BLOOMINGTON-NORMAL",
    "city": "美國布盧明頓"
  },
  {
    "iata": "BMG",
    "name": "BLOOMINGTON",
    "city": "美國布盧明頓"
  },
  {
    "iata": "BDL",
    "name": "BRADLEY INTL–HARTFORD",
    "city": "美國哈特福德"
  },
  {
    "iata": "BKX",
    "name": "BROOKINGS",
    "city": "美國布魯金斯"
  },
  {
    "iata": "BUF",
    "name": "BUFFALO",
    "city": "美國水牛城"
  },
  {
    "iata": "BRL",
    "name": "BURLINGTON",
    "city": "美國伯靈頓"
  },
  {
    "iata": "BTV",
    "name": "BURLINGTON",
    "city": "美國伯靈頓"
  },
  {
    "iata": "MDH",
    "name": "CARBONDALE",
    "city": "美國卡本代爾"
  },
  {
    "iata": "CLD",
    "name": "CARLSBAD",
    "city": "美國卡爾斯巴德"
  },
  {
    "iata": "CPR",
    "name": "CASPER",
    "city": "美國卡斯珀"
  },
  {
    "iata": "CID",
    "name": "CEDAR RAPIDS",
    "city": "美國錫達拉皮茲"
  },
  {
    "iata": "CYS",
    "name": "CHEYENNE",
    "city": "美國夏延"
  },
  {
    "iata": "CDR",
    "name": "CHADRON",
    "city": "美國查德倫"
  },
  {
    "iata": "CMI",
    "name": "CHAMPAIGN",
    "city": "美國尚佩恩"
  },
  {
    "iata": "CHS",
    "name": "CHARLESTON",
    "city": "美國查爾斯頓"
  },
  {
    "iata": "CRW",
    "name": "CHARLESTON",
    "city": "美國查爾斯頓"
  },
  {
    "iata": "CLT",
    "name": "CHARLOTTE",
    "city": "美國夏洛特"
  },
  {
    "iata": "CHO",
    "name": "CHARLOTTESVILLE",
    "city": "美國夏洛茨維爾"
  },
  {
    "iata": "CHA",
    "name": "CHATTANOOGA-LOVELL FIELD",
    "city": "美國查塔努加"
  },
  {
    "iata": "ORD",
    "name": "CHICAGO-O HARE INTER.",
    "city": "美國芝加哥"
  },
  {
    "iata": "CIC",
    "name": "CHICO",
    "city": "美國奇科"
  },
  {
    "iata": "CVG",
    "name": "CINCINNATI",
    "city": "美國辛辛那提"
  },
  {
    "iata": "COD",
    "name": "CODY/YELLOWSTONE",
    "city": "美國科迪"
  },
  {
    "iata": "COS",
    "name": "COLORADO SPRINGS",
    "city": "美國科羅拉多泉"
  },
  {
    "iata": "CAE",
    "name": "COLUMBIA",
    "city": "美國哥倫比亞"
  },
  {
    "iata": "CSG",
    "name": "COLUMBUS",
    "city": "美國哥倫布"
  },
  {
    "iata": "CMH",
    "name": "COLUMBUS",
    "city": "美國哥倫布"
  },
  {
    "iata": "UBS",
    "name": "COLUMBUS-GOLDEN TRIANGLE REG.",
    "city": "美國哥倫布"
  },
  {
    "iata": "SBP",
    "name": "COUNTY AIRPORT",
    "city": "美國聖路易斯-奧比斯波"
  },
  {
    "iata": "CRP",
    "name": "CORPUS CHRISTI",
    "city": "美國科珀斯克里斯蒂"
  },
  {
    "iata": "CEZ",
    "name": "CORTEZ",
    "city": "美國科爾特斯"
  },
  {
    "iata": "CLE",
    "name": "CLEVELAND",
    "city": "美國克利夫蘭"
  },
  {
    "iata": "CEC",
    "name": "CRESCENT CITY",
    "city": "美國新月城"
  },
  {
    "iata": "DFW",
    "name": "DALLAS,TX",
    "city": "美國達拉斯"
  },
  {
    "iata": "DAY",
    "name": "DAYTON",
    "city": "美國代頓"
  },
  {
    "iata": "DAB",
    "name": "DAYTONA BEACH",
    "city": "美國代托納比奇"
  },
  {
    "iata": "DEC",
    "name": "DECATUR",
    "city": "美國迪凱特"
  },
  {
    "iata": "DEN",
    "name": "DENVER",
    "city": "美國丹佛"
  },
  {
    "iata": "DVL",
    "name": "DEVILS LAKE",
    "city": "美國魔鬼湖"
  },
  {
    "iata": "DSM",
    "name": "DES MOINES",
    "city": "美國狄蒙"
  },
  {
    "iata": "DTW",
    "name": "DETROIT",
    "city": "美國底特律"
  },
  {
    "iata": "DIK",
    "name": "DICKINSON",
    "city": "美國狄金森"
  },
  {
    "iata": "DDC",
    "name": "DODGE CITY",
    "city": "美國道奇城"
  },
  {
    "iata": "DBQ",
    "name": "DUBUQUE",
    "city": "美國迪比克"
  },
  {
    "iata": "DRO",
    "name": "DURANGO",
    "city": "美國杜蘭戈"
  },
  {
    "iata": "EGE",
    "name": "EAGLE",
    "city": "美國伊格爾"
  },
  {
    "iata": "ELP",
    "name": "EL PASO",
    "city": "美國埃爾帕索"
  },
  {
    "iata": "ELM",
    "name": "ELMIRA",
    "city": "美國埃爾邁拉"
  },
  {
    "iata": "ESC",
    "name": "ESCANABA",
    "city": "美國埃斯卡諾巴"
  },
  {
    "iata": "EUG",
    "name": "EUGENE",
    "city": "美國尤金"
  },
  {
    "iata": "EVV",
    "name": "EVANSVILLE",
    "city": "美國埃文斯維爾"
  },
  {
    "iata": "FRM",
    "name": "FAIRMONT",
    "city": "美國費爾蒙特"
  },
  {
    "iata": "FAR",
    "name": "FARGO",
    "city": "美國法戈"
  },
  {
    "iata": "FMN",
    "name": "FARMINGTON",
    "city": "美國法明頓"
  },
  {
    "iata": "FLL",
    "name": "FORT LAUDERDALE",
    "city": "美國勞德代爾堡"
  },
  {
    "iata": "FMY",
    "name": "FORT MYERS-PAGE FIELD",
    "city": "美國邁爾斯堡"
  },
  {
    "iata": "RSW",
    "name": "FORT MYERS-SOUTH WEST FLORIDA",
    "city": "美國邁爾斯堡"
  },
  {
    "iata": "FSM",
    "name": "FORT SMITH",
    "city": "美國史密斯堡"
  },
  {
    "iata": "FWA",
    "name": "FORT WAYNE",
    "city": "美國韋恩堡"
  },
  {
    "iata": "FAT",
    "name": "FRESNO",
    "city": "美國弗雷斯諾"
  },
  {
    "iata": "QWF",
    "name": "FT. COLLINS BUS SERVICE",
    "city": "美國科林斯堡"
  },
  {
    "iata": "GCC",
    "name": "GILLETTE",
    "city": "美國吉列特"
  },
  {
    "iata": "GNV",
    "name": "GAINESVILLE",
    "city": "美國蓋恩斯維爾"
  },
  {
    "iata": "GBG",
    "name": "GALESBURG",
    "city": "美國蓋爾斯堡"
  },
  {
    "iata": "GCK",
    "name": "GARDEN CITY",
    "city": "美國花園城"
  },
  {
    "iata": "GRI",
    "name": "GRAND ISLAND",
    "city": "美國大島"
  },
  {
    "iata": "GJT",
    "name": "GRAND JUNCTION",
    "city": "美國大章克申"
  },
  {
    "iata": "GRR",
    "name": "GRAND RAPIDS",
    "city": "美國大急流城"
  },
  {
    "iata": "GTF",
    "name": "GREAT FALLS",
    "city": "美國大瀑布城"
  },
  {
    "iata": "GRB",
    "name": "GREEN BAY",
    "city": "美國綠灣"
  },
  {
    "iata": "GSO",
    "name": "GREENSBORO-HIGHPT",
    "city": "美國格林斯伯勒"
  },
  {
    "iata": "GSP",
    "name": "GREENVL-SPARTANBG",
    "city": "美國格林維爾/斯帕坦堡"
  },
  {
    "iata": "GUM",
    "name": "GUAM",
    "city": "美國關島"
  },
  {
    "iata": "GUC",
    "name": "GUNNISON",
    "city": "美國甘尼森"
  },
  {
    "iata": "HRL",
    "name": "HARLINGEN",
    "city": "美國哈林根"
  },
  {
    "iata": "HAR",
    "name": "HARRISBURG SKYPORT",
    "city": "美國哈里斯堡"
  },
  {
    "iata": "MDT",
    "name": "HARRISBURG INTL",
    "city": "美國哈里斯堡"
  },
  {
    "iata": "HFD",
    "name": "HARTFORD",
    "city": "美國哈特福德"
  },
  {
    "iata": "HDN",
    "name": "HAYDEN",
    "city": "美國海登"
  },
  {
    "iata": "HYS",
    "name": "HAYS",
    "city": "美國海斯"
  },
  {
    "iata": "HNL",
    "name": "HONOLULU(HAWAII)",
    "city": "美國夏威夷檀香山"
  },
  {
    "iata": "HOU",
    "name": "HOUSTON-HOBBY",
    "city": "美國休斯頓"
  },
  {
    "iata": "IAH",
    "name": "HOUSTON-INTERCONTINENTAL",
    "city": "美國休斯頓"
  },
  {
    "iata": "HON",
    "name": "HURON",
    "city": "美國休倫"
  },
  {
    "iata": "HSV",
    "name": "HUNTSVIL-DECATUR",
    "city": "美國亨茨維爾/迪凱特"
  },
  {
    "iata": "IPL",
    "name": "IMPERIAL",
    "city": "美國帝國城"
  },
  {
    "iata": "IND",
    "name": "INDIANAPOLIS",
    "city": "美國印第安納波利斯"
  },
  {
    "iata": "IYK",
    "name": "INYOKERN",
    "city": "美國因約肯"
  },
  {
    "iata": "IMT",
    "name": "IRON MOUNTAIN",
    "city": "美國鐵山"
  },
  {
    "iata": "IWD",
    "name": "IRONWOOD",
    "city": "美國鐵木"
  },
  {
    "iata": "JAN",
    "name": "JACKSON",
    "city": "美國傑克遜"
  },
  {
    "iata": "JAC",
    "name": "JACKSON",
    "city": "美國傑克遜"
  },
  {
    "iata": "JAX",
    "name": "JACKSONVILLE",
    "city": "美國傑克遜維爾"
  },
  {
    "iata": "JMS",
    "name": "JAMESTOWN",
    "city": "美國詹姆斯敦"
  },
  {
    "iata": "TRI",
    "name": "JOHNSON CTY - KINGPORT",
    "city": "美國布里斯托爾/金斯波特"
  },
  {
    "iata": "AZO",
    "name": "KALAMAZOO",
    "city": "美國卡拉馬祖"
  },
  {
    "iata": "MKC",
    "name": "KANSAS CITY-DOWNTOWN",
    "city": "美國堪薩斯城"
  },
  {
    "iata": "MCI",
    "name": "KANSAS CITY-INTERNATIONAL",
    "city": "美國堪薩斯城"
  },
  {
    "iata": "ILE",
    "name": "KILLEEN",
    "city": "美國基林"
  },
  {
    "iata": "EYW",
    "name": "KEY WEST",
    "city": "美國基韋斯特"
  },
  {
    "iata": "TYS",
    "name": "KNOXVILLE",
    "city": "美國諾克斯維爾"
  },
  {
    "iata": "LSE",
    "name": "LA CROSSE",
    "city": "美國拉克羅斯"
  },
  {
    "iata": "LAF",
    "name": "LAFAYETTE",
    "city": "美國拉斐特"
  },
  {
    "iata": "LCH",
    "name": "LAKE CHARLES",
    "city": "美國查爾斯湖"
  },
  {
    "iata": "LAN",
    "name": "LANSING",
    "city": "美國蘭辛"
  },
  {
    "iata": "LAR",
    "name": "LARAMIE",
    "city": "美國拉勒米"
  },
  {
    "iata": "LRD",
    "name": "LAREDO",
    "city": "美國拉雷多"
  },
  {
    "iata": "LAS",
    "name": "LAS VEGAS",
    "city": "美國拉斯維加斯"
  },
  {
    "iata": "LEX",
    "name": "LEXINGTON",
    "city": "美國列克星敦"
  },
  {
    "iata": "LBL",
    "name": "LIBERAL",
    "city": "美國利伯勒爾"
  },
  {
    "iata": "LNK",
    "name": "LINCOLN",
    "city": "美國林肯"
  },
  {
    "iata": "LIT",
    "name": "LITTLE ROCK",
    "city": "美國小岩城"
  },
  {
    "iata": "GGG",
    "name": "LONGVIEW",
    "city": "美國朗維尤"
  },
  {
    "iata": "LAX",
    "name": "LOS ANGELES",
    "city": "美國洛杉磯"
  },
  {
    "iata": "BUR",
    "name": "LOS ANGELES-BURBANK",
    "city": "美國伯班克"
  },
  {
    "iata": "LGB",
    "name": "LOS ANGELES-LONG BEACH",
    "city": "美國長灘"
  },
  {
    "iata": "SDF",
    "name": "LOUISVILLE",
    "city": "美國路易維爾"
  },
  {
    "iata": "LYH",
    "name": "LYNCHBURG",
    "city": "美國林奇堡"
  },
  {
    "iata": "MFE",
    "name": "MCALLEN",
    "city": "美國麥卡倫"
  },
  {
    "iata": "MSN",
    "name": "MADISON",
    "city": "美國麥迪遜"
  },
  {
    "iata": "MHT",
    "name": "MANCHESTER",
    "city": "美國曼徹斯特"
  },
  {
    "iata": "MBL",
    "name": "MANISTEE",
    "city": "美國馬尼斯蒂"
  },
  {
    "iata": "MCW",
    "name": "MASON CITY",
    "city": "美國梅森城"
  },
  {
    "iata": "MTO",
    "name": "MATTOON",
    "city": "美國馬圖恩"
  },
  {
    "iata": "MFR",
    "name": "MEDFORD",
    "city": "美國梅德福"
  },
  {
    "iata": "MLB",
    "name": "MELBOURNE",
    "city": "美國墨爾本"
  },
  {
    "iata": "MEM",
    "name": "MEMPHIS",
    "city": "美國孟菲斯"
  },
  {
    "iata": "MCE",
    "name": "MERCED",
    "city": "美國默塞德"
  },
  {
    "iata": "MIA",
    "name": "MIAMI",
    "city": "美國邁阿密"
  },
  {
    "iata": "MAF",
    "name": "MIDLAND",
    "city": "美國米德蘭"
  },
  {
    "iata": "MSP",
    "name": "MINNEAPOLIS",
    "city": "美國明尼阿波利斯"
  },
  {
    "iata": "MKE",
    "name": "MIWAKEE",
    "city": "美國密爾瓦基"
  },
  {
    "iata": "MSO",
    "name": "MISSOULA",
    "city": "美國米蘇拉"
  },
  {
    "iata": "MOB",
    "name": "MOBILE",
    "city": "美國莫比爾"
  },
  {
    "iata": "MOD",
    "name": "MODESTO",
    "city": "美國莫德斯托"
  },
  {
    "iata": "MLI",
    "name": "MOLINE",
    "city": "美國莫林"
  },
  {
    "iata": "MRY",
    "name": "MONTEREY",
    "city": "美國蒙特利"
  },
  {
    "iata": "MGM",
    "name": "MONTGOMERY",
    "city": "美國蒙哥馬利"
  },
  {
    "iata": "MTJ",
    "name": "MONTROSE",
    "city": "美國蒙特羅斯"
  },
  {
    "iata": "MLU",
    "name": "MONROE",
    "city": "美國蒙羅"
  },
  {
    "iata": "MKG",
    "name": "MUSKEGON",
    "city": "美國馬斯基岡"
  },
  {
    "iata": "MVN",
    "name": "MT VERNON",
    "city": "美國弗農山"
  },
  {
    "iata": "BNA",
    "name": "NASHVILLE",
    "city": "美國納許維爾"
  },
  {
    "iata": "ARA",
    "name": "NEW IBERIA-ACADIANA REGIONAL",
    "city": "美國新伊比利亞"
  },
  {
    "iata": "LFT",
    "name": "NEW IBERIA-LAFAYETTE",
    "city": "美國拉斐特"
  },
  {
    "iata": "MSY",
    "name": "NEW ORLEANS",
    "city": "美國紐奧良"
  },
  {
    "iata": "PHF",
    "name": "NEWPORTNEWS-HAMPT",
    "city": "美國紐波特紐斯"
  },
  {
    "iata": "JFK",
    "name": "NEW YORK-J.F.KENNEDY INTL.",
    "city": "美國紐約"
  },
  {
    "iata": "LGA",
    "name": "NEW YORK-LA GUARDIA",
    "city": "美國紐約"
  },
  {
    "iata": "EWR",
    "name": "NEW YORK-NEWARK INTL",
    "city": "美國紐約紐華克"
  },
  {
    "iata": "OFK",
    "name": "NORFOLK",
    "city": "美國諾福克"
  },
  {
    "iata": "ORF",
    "name": "NORFOLK",
    "city": "美國諾福克"
  },
  {
    "iata": "LBF",
    "name": "NORTH PLATTE",
    "city": "美國北普拉特"
  },
  {
    "iata": "OAK",
    "name": "OAKLAND",
    "city": "美國奧克蘭"
  },
  {
    "iata": "OKC",
    "name": "OKLAHOMA CITY",
    "city": "美國奧克拉荷馬城"
  },
  {
    "iata": "OMA",
    "name": "OMAHA",
    "city": "美國奧馬哈"
  },
  {
    "iata": "ONT",
    "name": "ONTARIO",
    "city": "美國安大略"
  },
  {
    "iata": "MCO",
    "name": "ORLANDO",
    "city": "美國奧蘭多"
  },
  {
    "iata": "OSH",
    "name": "OSHKOSH",
    "city": "美國奧什科什"
  },
  {
    "iata": "OTM",
    "name": "OTTUMWA",
    "city": "美國奧圖姆瓦"
  },
  {
    "iata": "OXR",
    "name": "OXNARD/VENTURA",
    "city": "美國奧克斯納德"
  },
  {
    "iata": "PSP",
    "name": "PALM SPRINGS",
    "city": "美國棕櫚泉"
  },
  {
    "iata": "PFN",
    "name": "PANAMA CITY",
    "city": "美國巴拿馬城"
  },
  {
    "iata": "PSC",
    "name": "PASCO-RICHLD-KENN",
    "city": "美國帕斯科"
  },
  {
    "iata": "PNS",
    "name": "PENSACOLA",
    "city": "美國彭薩科拉"
  },
  {
    "iata": "PIA",
    "name": "PEORIA",
    "city": "美國皮歐立亞"
  },
  {
    "iata": "PHL",
    "name": "PHILADEPHIA",
    "city": "美國費城"
  },
  {
    "iata": "PHX",
    "name": "PHOENIX",
    "city": "美國鳳凰城"
  },
  {
    "iata": "PIR",
    "name": "PIERRE",
    "city": "美國皮爾"
  },
  {
    "iata": "PIT",
    "name": "PITTSBURGH",
    "city": "美國匹茲堡"
  },
  {
    "iata": "PDX",
    "name": "PORTLAND",
    "city": "美國波特蘭"
  },
  {
    "iata": "PWM",
    "name": "PORTLAND",
    "city": "美國波特蘭"
  },
  {
    "iata": "POU",
    "name": "POUGHKEEPSIE-DUCHESS COUNTY",
    "city": "美國波基普西"
  },
  {
    "iata": "SWF",
    "name": "POUGHKEEPSIE-NEWBURGH",
    "city": "美國紐堡"
  },
  {
    "iata": "PUB",
    "name": "PUEBLO",
    "city": "美國普韋布洛"
  },
  {
    "iata": "PUW",
    "name": "PULLMAN",
    "city": "美國普爾曼"
  },
  {
    "iata": "RDU",
    "name": "RALEIGH/DURHAM",
    "city": "美國羅利/德罕"
  },
  {
    "iata": "RAP",
    "name": "RAPID CITY",
    "city": "美國拉皮德城"
  },
  {
    "iata": "RDD",
    "name": "REDDING",
    "city": "美國雷丁"
  },
  {
    "iata": "RDM",
    "name": "REDMOND",
    "city": "美國雷德蒙德"
  },
  {
    "iata": "RNO",
    "name": "RENO",
    "city": "美國里諾"
  },
  {
    "iata": "RIC",
    "name": "RICHMOND",
    "city": "美國里士滿"
  },
  {
    "iata": "RIW",
    "name": "RIVERTON",
    "city": "美國里弗頓"
  },
  {
    "iata": "PVD",
    "name": "PROVIDENCE",
    "city": "美國普羅維登斯"
  },
  {
    "iata": "UIN",
    "name": "QUINCY",
    "city": "美國昆西"
  },
  {
    "iata": "ROA",
    "name": "ROANOKE",
    "city": "美國羅阿諾克"
  },
  {
    "iata": "RST",
    "name": "ROCHESTER",
    "city": "美國羅徹斯特"
  },
  {
    "iata": "ROC",
    "name": "ROCHESTER",
    "city": "美國羅徹斯特"
  },
  {
    "iata": "RFD",
    "name": "ROCKFORD-GREATER ROCKFORD",
    "city": "美國羅克福德"
  },
  {
    "iata": "ZRF",
    "name": "ROCKFORD-ROCKFORD PARK & RIDE",
    "city": "美國羅克福德"
  },
  {
    "iata": "RKS",
    "name": "ROCK SPRINGS",
    "city": "美國羅克斯普林斯"
  },
  {
    "iata": "SMF",
    "name": "SACRAMENTO",
    "city": "美國沙加緬度"
  },
  {
    "iata": "MBS",
    "name": "SAGINAW-BAYCITY",
    "city": "美國薩吉諾"
  },
  {
    "iata": "SAT",
    "name": "SAN ANTONIO",
    "city": "美國聖安東尼奧"
  },
  {
    "iata": "SLC",
    "name": "SALT LAKE CITY",
    "city": "美國鹽湖城"
  },
  {
    "iata": "SJT",
    "name": "SAN ANGELO",
    "city": "美國聖安吉洛"
  },
  {
    "iata": "SAN",
    "name": "SAN DIEGO",
    "city": "美國聖地牙哥"
  },
  {
    "iata": "SFO",
    "name": "SAN FRANCISCO",
    "city": "美國舊金山"
  },
  {
    "iata": "SJC",
    "name": "SAN JOSE, CA.",
    "city": "美國聖荷西"
  },
  {
    "iata": "CSL",
    "name": "SAN LUIS OBISPO",
    "city": "美國聖路易斯-奧比斯波"
  },
  {
    "iata": "SBP",
    "name": "SAN LUIS OBISPO-COUNTY AIRPORT",
    "city": "美國聖路易斯-奧比斯波"
  },
  {
    "iata": "SNA",
    "name": "SANTA ANA",
    "city": "美國聖安娜"
  },
  {
    "iata": "SBA",
    "name": "SANTA BARBARA",
    "city": "美國聖塔芭芭拉"
  },
  {
    "iata": "SAF",
    "name": "SANTA FE",
    "city": "美國聖塔菲"
  },
  {
    "iata": "SMX",
    "name": "SANTA MARIA",
    "city": "美國聖瑪麗亞"
  },
  {
    "iata": "STS",
    "name": "SANTA ROSA",
    "city": "美國聖羅莎"
  },
  {
    "iata": "SRQ",
    "name": "SARASOTA",
    "city": "美國薩拉索塔"
  },
  {
    "iata": "SAV",
    "name": "SAVANNAH",
    "city": "美國薩凡納"
  },
  {
    "iata": "BFF",
    "name": "SCOTTSBLUFF",
    "city": "美國斯科茨布拉夫"
  },
  {
    "iata": "AVP",
    "name": "SCRANTN-WILKESBAR",
    "city": "美國斯克蘭頓/威爾克斯-巴里"
  },
  {
    "iata": "SEA",
    "name": "SEATTLE",
    "city": "美國西雅圖"
  },
  {
    "iata": "SHR",
    "name": "SHERIDAN",
    "city": "美國謝里登"
  },
  {
    "iata": "SHV",
    "name": "SHREVEPORT",
    "city": "美國什里夫波特"
  },
  {
    "iata": "FSD",
    "name": "SIOUX FALLS",
    "city": "美國蘇瀑布"
  },
  {
    "iata": "SBN",
    "name": "SOUTH BEND",
    "city": "美國南灣"
  },
  {
    "iata": "SPW",
    "name": "SPENCER",
    "city": "美國斯賓塞"
  },
  {
    "iata": "SPI",
    "name": "SPRINGFIELD",
    "city": "美國斯普林菲爾德"
  },
  {
    "iata": "SGF",
    "name": "SPRINGFIELD",
    "city": "美國斯普林菲爾德"
  },
  {
    "iata": "GEG",
    "name": "SPOKANE INTERNATIONAL",
    "city": "美國斯波坎"
  },
  {
    "iata": "STL",
    "name": "ST. LOUIS",
    "city": "美國聖路易"
  },
  {
    "iata": "SCE",
    "name": "STATE COLLEGE",
    "city": "美國大學城"
  },
  {
    "iata": "SYR",
    "name": "SYRACUSE(NY)",
    "city": "美國雪城"
  },
  {
    "iata": "QBF",
    "name": "VAIL",
    "city": "美國韋爾"
  },
  {
    "iata": "VIS",
    "name": "VISALIA",
    "city": "美國維塞利亞"
  },
  {
    "iata": "TLH",
    "name": "TALLAHASSEE",
    "city": "美國塔拉哈西"
  },
  {
    "iata": "TPA",
    "name": "TAMPA",
    "city": "美國坦帕"
  },
  {
    "iata": "TEX",
    "name": "TELLURIDE",
    "city": "美國特柳賴德"
  },
  {
    "iata": "HUF",
    "name": "TERRE HAUTE",
    "city": "美國特雷霍特"
  },
  {
    "iata": "TXK",
    "name": "TEXARKANA",
    "city": "美國特克薩卡納"
  },
  {
    "iata": "TOL",
    "name": "TOLEDO",
    "city": "美國托萊多"
  },
  {
    "iata": "TVC",
    "name": "TRAVERSE CITY",
    "city": "美國特拉弗斯城"
  },
  {
    "iata": "TUS",
    "name": "TUCSON",
    "city": "美國圖森"
  },
  {
    "iata": "TUL",
    "name": "TULSA",
    "city": "美國塔爾薩"
  },
  {
    "iata": "TYR",
    "name": "TYLER",
    "city": "美國泰勒"
  },
  {
    "iata": "ACT",
    "name": "WACO-MUNICIPAL",
    "city": "美國韋科"
  },
  {
    "iata": "BWI",
    "name": "WASHIONTON-BALTIMORE/WASH INTL",
    "city": "美國華盛頓巴爾的摩"
  },
  {
    "iata": "IAD",
    "name": "WASHIONTON-DULLES INTL.",
    "city": "美國華盛頓杜勒斯"
  },
  {
    "iata": "DCA",
    "name": "WASHIONTON-RONALD REAGAN NATL.",
    "city": "美國華盛頓雷根"
  },
  {
    "iata": "ALO",
    "name": "WATERLOO",
    "city": "美國滑鐵盧"
  },
  {
    "iata": "ATY",
    "name": "WATERTOWN",
    "city": "美國沃特敦"
  },
  {
    "iata": "AUW",
    "name": "WAUSAU-MUNICIPAL",
    "city": "美國沃索"
  },
  {
    "iata": "CWA",
    "name": "WAUSAU-CENTRAL WISCONSIN",
    "city": "美國沃索"
  },
  {
    "iata": "HPN",
    "name": "WESTCHESTER COUNTY",
    "city": "美國威斯特徹斯特"
  },
  {
    "iata": "PBI",
    "name": "WEST PALM BEACH",
    "city": "美國西棕櫚灘"
  },
  {
    "iata": "ICT",
    "name": "WICHITA",
    "city": "美國威奇托"
  },
  {
    "iata": "SPS",
    "name": "WICHITA FALLS",
    "city": "美國威奇托福爾斯"
  },
  {
    "iata": "ISN",
    "name": "WILLISTON",
    "city": "美國威利斯頓"
  },
  {
    "iata": "WRL",
    "name": "WORLAND",
    "city": "美國沃蘭"
  },
  {
    "iata": "YKM",
    "name": "YAKIMA",
    "city": "美國亞基馬"
  },
  {
    "iata": "YKN",
    "name": "YANKTON",
    "city": "美國揚克頓"
  },
  {
    "iata": "YNG",
    "name": "YOUNGSTOWN",
    "city": "美國揚斯敦"
  },
  {
    "iata": "YUM",
    "name": "YUMA",
    "city": "美國尤馬"
  },
  {
    "iata": "YBC",
    "name": "BAIE COMEAU",
    "city": "加拿大貝克"
  },
  {
    "iata": "YBG",
    "name": "BAGOTVILLE",
    "city": "加拿大波哥維"
  },
  {
    "iata": "YYC",
    "name": "CALGARY",
    "city": "加拿大卡加立"
  },
  {
    "iata": "YCG",
    "name": "CASTLEGAR",
    "city": "加拿大卡司特雷加"
  },
  {
    "iata": "YYG",
    "name": "CHARLOTTETOWN",
    "city": "加拿大沙洛特城"
  },
  {
    "iata": "YOD",
    "name": "COLD LAKE",
    "city": "加拿大冷湖"
  },
  {
    "iata": "YQQ",
    "name": "COMOX",
    "city": "加拿大康英克斯"
  },
  {
    "iata": "YXC",
    "name": "CRANBROOK",
    "city": "加拿大克藍布魯克"
  },
  {
    "iata": "YDF",
    "name": "DEER LAKE",
    "city": "加拿大鹿湖"
  },
  {
    "iata": "YPR",
    "name": "DIGBY ISLAND",
    "city": "加拿大魯伯王子鎮"
  },
  {
    "iata": "YEA",
    "name": "EDMONTON",
    "city": "加拿大艾德頓"
  },
  {
    "iata": "YMM",
    "name": "FORT MCMURRAY",
    "city": "加拿大福麥木瑞"
  },
  {
    "iata": "YXJ",
    "name": "FORT SAINT JOHN",
    "city": "加拿大福聖約翰"
  },
  {
    "iata": "YFC",
    "name": "FREDERICTON",
    "city": "加拿大菲德里鎮"
  },
  {
    "iata": "YQX",
    "name": "GANDER",
    "city": "加拿大甘德"
  },
  {
    "iata": "YGP",
    "name": "GASPE",
    "city": "加拿大加斯佩"
  },
  {
    "iata": "YQU",
    "name": "GRANDE PRAIRIE",
    "city": "加拿大格蘭伯瑞爾"
  },
  {
    "iata": "YYR",
    "name": "GOOSE BAY",
    "city": "加拿大鵝灣"
  },
  {
    "iata": "YHZ",
    "name": "HALIFAX",
    "city": "加拿大哈利法克斯"
  },
  {
    "iata": "YKA",
    "name": "KAMLOOPS",
    "city": "加拿大康露市"
  },
  {
    "iata": "YLW",
    "name": "KELOWNA",
    "city": "加拿大卡洛那"
  },
  {
    "iata": "YQL",
    "name": "LETHBRIDGE",
    "city": "加拿大雷絲橋"
  },
  {
    "iata": "YLL",
    "name": "LLOYDMINSTER",
    "city": "加拿大羅明斯特"
  },
  {
    "iata": "YXU",
    "name": "LONDON",
    "city": "加拿大倫敦"
  },
  {
    "iata": "YXH",
    "name": "MEDICINE HAT",
    "city": "加拿大麥迪森漢"
  },
  {
    "iata": "YQM",
    "name": "MONCTON",
    "city": "加拿大蒙克通"
  },
  {
    "iata": "YYY",
    "name": "MONT JOLI",
    "city": "加拿大蒙特朱利"
  },
  {
    "iata": "YMQ",
    "name": "MONTREAL",
    "city": "加拿大蒙特利爾"
  },
  {
    "iata": "YUL",
    "name": "MONTREAL",
    "city": "加拿大蒙特利爾"
  },
  {
    "iata": "YBL",
    "name": "MUNICIPAL",
    "city": "加拿大原貝爾河"
  },
  {
    "iata": "YCD",
    "name": "NANAIMO ARPT",
    "city": "加拿大娜娜莫"
  },
  {
    "iata": "YYB",
    "name": "NORTH BAY",
    "city": "加拿大北灣市"
  },
  {
    "iata": "YOW",
    "name": "OTTAWA",
    "city": "加拿大渥太華"
  },
  {
    "iata": "YYF",
    "name": "PENTICTON",
    "city": "加拿大攀蒂頓"
  },
  {
    "iata": "YXS",
    "name": "PRINCE GEORGE",
    "city": "加拿大喬治王子鎮"
  },
  {
    "iata": "YQB",
    "name": "QUEBEC",
    "city": "加拿大魁北克"
  },
  {
    "iata": "YQR",
    "name": "REGINA",
    "city": "加拿大瑞吉娜"
  },
  {
    "iata": "YSJ",
    "name": "SAINT JOHN",
    "city": "加拿大聖約翰"
  },
  {
    "iata": "YAM",
    "name": "SAULT STE MARIE",
    "city": "加拿大所聖瑪利"
  },
  {
    "iata": "YXE",
    "name": "SASKATOON",
    "city": "加拿大撒司卡通"
  },
  {
    "iata": "YYD",
    "name": "SMITHERS",
    "city": "加拿大使密得斯"
  },
  {
    "iata": "YYT",
    "name": "ST. JOHNS",
    "city": "加拿大聖約翰斯"
  },
  {
    "iata": "YSL",
    "name": "ST LEONARD",
    "city": "加拿大聖隆那"
  },
  {
    "iata": "YSB",
    "name": "SUDBURY",
    "city": "加拿大蘇布瑞"
  },
  {
    "iata": "YQY",
    "name": "SYDNEY",
    "city": "加拿大希梨"
  },
  {
    "iata": "YXT",
    "name": "TERRACE",
    "city": "加拿大德瑞司"
  },
  {
    "iata": "YQT",
    "name": "THUNDER BAY",
    "city": "加拿大雷灣市"
  },
  {
    "iata": "YTS",
    "name": "TIMMINS",
    "city": "加拿大丁敏市"
  },
  {
    "iata": "YYZ",
    "name": "TORONTO",
    "city": "加拿大多倫多"
  },
  {
    "iata": "YTO",
    "name": "TORONTO",
    "city": "加拿大多倫多"
  },
  {
    "iata": "YVO",
    "name": "VAL D OR",
    "city": "加拿大瓦多爾"
  },
  {
    "iata": "YVR",
    "name": "VANCOUVER",
    "city": "加拿大溫哥華"
  },
  {
    "iata": "YYJ",
    "name": "VICTORIA",
    "city": "加拿大維多利亞"
  },
  {
    "iata": "YWK",
    "name": "WABUSH",
    "city": "加拿大瓦布希"
  },
  {
    "iata": "YQG",
    "name": "WINDSOR",
    "city": "加拿大溫莎"
  },
  {
    "iata": "YWG",
    "name": "WINNIPEG",
    "city": "加拿大溫尼伯"
  },
  {
    "iata": "YQI",
    "name": "YARMOUTH",
    "city": "加拿大亞茅斯"
  },
  {
    "iata": "YZF",
    "name": "YELLOWKNIFE",
    "city": "加拿大黃刀鎮"
  },
  {
    "iata": "AKL",
    "name": "AUCKLANd",
    "city": "紐西蘭奧克蘭"
  },
  {
    "iata": "BNE",
    "name": "BRISBANE",
    "city": "澳洲布里斯本"
  },
  {
    "iata": "CNS",
    "name": "CAIRNS",
    "city": "澳洲凱恩斯"
  },
  {
    "iata": "CBR",
    "name": "CANBERRA",
    "city": "澳洲坎培拉"
  },
  {
    "iata": "CHC",
    "name": "CHRISTCHURCH",
    "city": "紐西蘭基督城"
  },
  {
    "iata": "DRW",
    "name": "DARWIN",
    "city": "澳洲達爾文"
  },
  {
    "iata": "HBA",
    "name": "HOBART",
    "city": "澳洲荷巴特"
  },
  {
    "iata": "HTI",
    "name": "HAMILTON ISLAND",
    "city": "澳洲哈密爾頓島"
  },
  {
    "iata": "MEL",
    "name": "MELBOURNE",
    "city": "澳洲墨爾本"
  },
  {
    "iata": "MIM",
    "name": "MERIMBULA",
    "city": "澳洲梅里姆布拉"
  },
  {
    "iata": "NAN",
    "name": "NADI",
    "city": "斐濟南地"
  },
  {
    "iata": "NOU",
    "name": "NOUMEA",
    "city": "新喀里多尼亞努美亞"
  },
  {
    "iata": "PPG",
    "name": "PAGO PAGO",
    "city": "美屬薩摩亞巴哥巴哥"
  },
  {
    "iata": "PPT",
    "name": "PAPEETE",
    "city": "法屬玻里尼西亞大溪地"
  },
  {
    "iata": "PER",
    "name": "PERTH",
    "city": "澳洲伯斯"
  },
  {
    "iata": "POM",
    "name": "POTR MORESBY",
    "city": "巴布亞紐幾內亞摩勒斯比港"
  },
  {
    "iata": "WLG",
    "name": "WELLINGTON",
    "city": "紐西蘭威靈頓"
  },
  {
    "iata": "SUV",
    "name": "SUVA",
    "city": "斐濟蘇瓦"
  },
  {
    "iata": "SYD",
    "name": "SYDNEY",
    "city": "澳洲雪梨"
  },
  {
    "iata": "ABZ",
    "name": "ABERDEEN",
    "city": "英國亞伯丁"
  },
  {
    "iata": "AMS",
    "name": "AMSTERDAM",
    "city": "荷蘭阿姆斯特丹"
  },
  {
    "iata": "ATH",
    "name": "ATHENS",
    "city": "希臘雅典"
  },
  {
    "iata": "ANR",
    "name": "ANTWERP",
    "city": "比利時安特衛普"
  },
  {
    "iata": "BUH",
    "name": "BUCHAREST",
    "city": "羅馬尼亞布加勒斯特"
  },
  {
    "iata": "BUD",
    "name": "BUDAPEST",
    "city": "匈牙利布達佩斯"
  },
  {
    "iata": "BCN",
    "name": "BARCELONA",
    "city": "西班牙巴塞隆納"
  },
  {
    "iata": "BFS",
    "name": "BELFAST",
    "city": "英國貝爾法斯特"
  },
  {
    "iata": "BEG",
    "name": "BELGRADE",
    "city": "塞爾維亞貝爾格勒"
  },
  {
    "iata": "BGO",
    "name": "BERGEN",
    "city": "挪威卑爾根"
  },
  {
    "iata": "TXL",
    "name": "BERLIN",
    "city": "德國柏林"
  },
  {
    "iata": "BLQ",
    "name": "BOLOGNA",
    "city": "義大利波隆那"
  },
  {
    "iata": "BNJ",
    "name": "BONN",
    "city": "德國波昂"
  },
  {
    "iata": "BRS",
    "name": "BRISTOL",
    "city": "英國布里斯托"
  },
  {
    "iata": "BRU",
    "name": "BRUSSELS",
    "city": "比利時布魯塞爾"
  },
  {
    "iata": "CWL",
    "name": "CARDIFF",
    "city": "英國卡地夫"
  },
  {
    "iata": "CGN",
    "name": "COLOGNE",
    "city": "德國科隆"
  },
  {
    "iata": "CPH",
    "name": "COPENHAGEN",
    "city": "丹麥哥本哈根"
  },
  {
    "iata": "DUB",
    "name": "DUBLIN",
    "city": "愛爾蘭都柏林"
  },
  {
    "iata": "DUS",
    "name": "DUSSDOLF",
    "city": "德國杜塞道夫"
  },
  {
    "iata": "EDI",
    "name": "EDINBURGH",
    "city": "英國愛丁堡"
  },
  {
    "iata": "FAO",
    "name": "FARO",
    "city": "葡萄牙法魯"
  },
  {
    "iata": "FRA",
    "name": "FRANKFURT",
    "city": "德國法蘭克福"
  },
  {
    "iata": "GOA",
    "name": "GENOA",
    "city": "義大利熱那亞"
  },
  {
    "iata": "GVA",
    "name": "GENEVA",
    "city": "瑞士日內瓦"
  },
  {
    "iata": "GIB",
    "name": "GIBRALTAR",
    "city": "直布羅陀"
  },
  {
    "iata": "GLA",
    "name": "GLASGOW",
    "city": "英國格拉斯哥"
  },
  {
    "iata": "GOT",
    "name": "GOTHENBURG",
    "city": "瑞典哥德堡"
  },
  {
    "iata": "GRZ",
    "name": "GRAZ",
    "city": "奧地利格拉茨"
  },
  {
    "iata": "HAM",
    "name": "HAMBURG",
    "city": "德國漢堡"
  },
  {
    "iata": "HAJ",
    "name": "HANOVER",
    "city": "德國漢諾威"
  },
  {
    "iata": "HUY",
    "name": "HUMBERSIDE",
    "city": "英國亨伯賽德"
  },
  {
    "iata": "LHR",
    "name": "HEATHROW",
    "city": "英國倫敦"
  },
  {
    "iata": "HEL",
    "name": "HELSINKI",
    "city": "芬蘭赫爾辛基"
  },
  {
    "iata": "INN",
    "name": "INNSBRUCK",
    "city": "奧地利因斯布魯克"
  },
  {
    "iata": "IST",
    "name": "ISTANBUL",
    "city": "土耳其伊斯坦堡"
  },
  {
    "iata": "IEV",
    "name": "KIEV",
    "city": "烏克蘭基輔"
  },
  {
    "iata": "KLU",
    "name": "KLAGENFURT",
    "city": "奧地利克拉根福"
  },
  {
    "iata": "KBP",
    "name": "BORISPOL",
    "city": "烏克蘭鮑里斯波爾"
  },
  {
    "iata": "KRK",
    "name": "KRAKOW",
    "city": "波蘭克拉科夫"
  },
  {
    "iata": "LBA",
    "name": "LEEDS",
    "city": "英國里茲"
  },
  {
    "iata": "LNZ",
    "name": "LINZ",
    "city": "奧地利林茨"
  },
  {
    "iata": "LIS",
    "name": "LISBON",
    "city": "葡萄牙里斯本"
  },
  {
    "iata": "LGW",
    "name": "LONDON-GATWICK",
    "city": "英國倫敦"
  },
  {
    "iata": "LJU",
    "name": "LJUBLJANA",
    "city": "斯洛維尼亞盧比安納"
  },
  {
    "iata": "LUX",
    "name": "LUXEMBOURG",
    "city": "盧森堡"
  },
  {
    "iata": "LYS",
    "name": "LYON",
    "city": "法國里昂"
  },
  {
    "iata": "MAD",
    "name": "MADRID",
    "city": "西班牙馬德里"
  },
  {
    "iata": "AGP",
    "name": "MALAGA",
    "city": "西班牙馬拉加"
  },
  {
    "iata": "MAN",
    "name": "MANCHESTER",
    "city": "英國曼徹斯特"
  },
  {
    "iata": "MRS",
    "name": "MARSEILLE",
    "city": "法國馬賽"
  },
  {
    "iata": "MOW",
    "name": "MOSCOW",
    "city": "俄羅斯莫斯科"
  },
  {
    "iata": "MPL",
    "name": "MONTPELLIER",
    "city": "法國蒙彼利埃"
  },
  {
    "iata": "MUC",
    "name": "MUNICH",
    "city": "德國慕尼黑"
  },
  {
    "iata": "MXP",
    "name": "MILAN-MALPENSA",
    "city": "義大利米蘭"
  },
  {
    "iata": "LIN",
    "name": "MILAN-LINATE",
    "city": "義大利米蘭"
  },
  {
    "iata": "NAP",
    "name": "NAPLES",
    "city": "義大利那不勒斯"
  },
  {
    "iata": "NCL",
    "name": "NEW CASTLE",
    "city": "英國新堡"
  },
  {
    "iata": "NCE",
    "name": "NICE",
    "city": "法國尼斯"
  },
  {
    "iata": "NWI",
    "name": "NORWICH",
    "city": "英國諾里奇"
  },
  {
    "iata": "ODS",
    "name": "ODESSA",
    "city": "烏克蘭敖德薩"
  },
  {
    "iata": "OSL",
    "name": "OSLO",
    "city": "挪威奧斯陸"
  },
  {
    "iata": "CDG",
    "name": "PARIS-CHARLES DE GAULLE",
    "city": "法國巴黎"
  },
  {
    "iata": "ORY",
    "name": "PARIS-ORLY",
    "city": "法國巴黎"
  },
  {
    "iata": "PRG",
    "name": "PRAGUE",
    "city": "捷克布拉格"
  },
  {
    "iata": "RIX",
    "name": "RIGA",
    "city": "拉脫維亞里加"
  },
  {
    "iata": "FCO",
    "name": "ROME",
    "city": "義大利羅馬"
  },
  {
    "iata": "SZG",
    "name": "SALZBURG",
    "city": "奧地利薩爾茨堡"
  },
  {
    "iata": "SNN",
    "name": "SHANNON",
    "city": "愛爾蘭香農"
  },
  {
    "iata": "SOF",
    "name": "SOFIA",
    "city": "保加利亞索非亞"
  },
  {
    "iata": "SPU",
    "name": "SPLIT",
    "city": "克羅埃西亞斯普利特"
  },
  {
    "iata": "STO",
    "name": "STOCKHOLM",
    "city": "瑞典斯德哥爾摩"
  },
  {
    "iata": "LED",
    "name": "ST PETERSBURG",
    "city": "俄羅斯聖彼得堡"
  },
  {
    "iata": "STR",
    "name": "STUTTGART",
    "city": "德國斯圖加特"
  },
  {
    "iata": "TLL",
    "name": "TALLINN",
    "city": "愛沙尼亞塔林"
  },
  {
    "iata": "MME",
    "name": "TEESSIDE",
    "city": "英國提賽德"
  },
  {
    "iata": "TSR",
    "name": "TIMISOARA",
    "city": "羅馬尼亞蒂米什瓦拉"
  },
  {
    "iata": "TLS",
    "name": "TOULOUSE",
    "city": "法國土魯斯"
  },
  {
    "iata": "VRN",
    "name": "VERONA",
    "city": "義大利維羅納"
  },
  {
    "iata": "VCE",
    "name": "VENICE",
    "city": "義大利威尼斯"
  },
  {
    "iata": "VIE",
    "name": "VIENNA",
    "city": "奧地利維也納"
  },
  {
    "iata": "VNO",
    "name": "VILNIUS",
    "city": "立陶宛維爾紐斯"
  },
  {
    "iata": "WAW",
    "name": "WARSAW",
    "city": "波蘭華沙"
  },
  {
    "iata": "WRO",
    "name": "WROCLAW",
    "city": "波蘭弗羅茨瓦夫"
  },
  {
    "iata": "ZAG",
    "name": "ZAGREB",
    "city": "克羅埃西亞薩格勒布"
  },
  {
    "iata": "ZRH",
    "name": "ZURICH",
    "city": "瑞士蘇黎世"
  },
  {
    "iata": "ACA",
    "name": "ACAPUCCO",
    "city": "墨西哥阿卡普爾科"
  },
  {
    "iata": "ASU",
    "name": "ASUNCION",
    "city": "巴拉圭亞松森"
  },
  {
    "iata": "BOG",
    "name": "BOGOTA",
    "city": "哥倫比亞波哥大"
  },
  {
    "iata": "BUE",
    "name": "BUENDS AIRES",
    "city": "阿根廷布宜諾斯艾利斯"
  },
  {
    "iata": "BSB",
    "name": "BRASILIA",
    "city": "巴西巴西利亞"
  },
  {
    "iata": "BGI",
    "name": "BRIDGE TOWN",
    "city": "巴貝多橋鎮"
  },
  {
    "iata": "CCS",
    "name": "CARACAS",
    "city": "委內瑞拉加拉加斯"
  },
  {
    "iata": "CAY",
    "name": "CAYENNE",
    "city": "法屬圭亞那卡宴"
  },
  {
    "iata": "GRG",
    "name": "GEORGE TOWN",
    "city": "蓋亞那喬治市"
  },
  {
    "iata": "GUA",
    "name": "GUATEMALA CITY",
    "city": "瓜地馬拉瓜地馬拉市"
  },
  {
    "iata": "HAV",
    "name": "HAVANA",
    "city": "古巴哈瓦那"
  },
  {
    "iata": "KIN",
    "name": "KINGSTON",
    "city": "牙買加京士頓"
  },
  {
    "iata": "LPB",
    "name": "LA PAZ",
    "city": "玻利維亞拉巴斯"
  },
  {
    "iata": "LIM",
    "name": "LIMA",
    "city": "秘魯利馬"
  },
  {
    "iata": "MGA",
    "name": "MANAGUA",
    "city": "尼加拉瓜馬拿瓜"
  },
  {
    "iata": "MAO",
    "name": "MANAUS",
    "city": "巴西瑪瑙斯"
  },
  {
    "iata": "MAY",
    "name": "MANGROVE CAY",
    "city": "巴哈馬紅樹灣"
  },
  {
    "iata": "MEX",
    "name": "MEXICO CITY",
    "city": "墨西哥墨西哥城"
  },
  {
    "iata": "MVD",
    "name": "MONTEBIDEO",
    "city": "烏拉圭蒙特維多"
  },
  {
    "iata": "MBJ",
    "name": "MONTEGO BAY",
    "city": "牙買加蒙特哥灣"
  },
  {
    "iata": "PTY",
    "name": "PANAMA CITY",
    "city": "巴拿馬巴拿馬城"
  },
  {
    "iata": "PBM",
    "name": "PARAMARIBO",
    "city": "蘇利南巴拉馬利波"
  },
  {
    "iata": "PAP",
    "name": "PORT AU PRINCE",
    "city": "海地太子港"
  },
  {
    "iata": "POS",
    "name": "PORT OF SPAIN",
    "city": "千里達及托巴哥西班牙港"
  },
  {
    "iata": "UIO",
    "name": "QUITO",
    "city": "厄瓜多基多"
  },
  {
    "iata": "REL",
    "name": "RECIFE",
    "city": "巴西累西腓"
  },
  {
    "iata": "RIO",
    "name": "RIO DE JANEIRO",
    "city": "巴西里約熱內盧"
  },
  {
    "iata": "SJO",
    "name": "SAN JOSE",
    "city": "哥斯大黎加聖約瑟"
  },
  {
    "iata": "SJU",
    "name": "SAN JUAN",
    "city": "波多黎各聖胡安"
  },
  {
    "iata": "SAO",
    "name": "SAO PAULO(GRU)",
    "city": "巴西聖保羅"
  },
  {
    "iata": "SAL",
    "name": "SAN SALVADOR",
    "city": "薩爾瓦多聖薩爾вадор"
  },
  {
    "iata": "SCL",
    "name": "SANTIAGO",
    "city": "智利聖地牙哥"
  },
  {
    "iata": "SDQ",
    "name": "SANTO DOMINGO",
    "city": "多明尼加聖多明哥"
  },
  {
    "iata": "TGU",
    "name": "TEGUCIGALPA",
    "city": "宏都拉斯德古斯加巴"
  },
  {
    "iata": "ACA",
    "name": "ACAPULCO",
    "city": "墨西哥阿卡普爾科"
  },
  {
    "iata": "ABD",
    "name": "ABADAN",
    "city": "伊朗阿巴丹"
  },
  {
    "iata": "ABJ",
    "name": "ABIDJAN",
    "city": "象牙海岸阿必尚"
  },
  {
    "iata": "AUH",
    "name": "ABU DHABI",
    "city": "阿拉伯聯合大公國阿布達比"
  },
  {
    "iata": "ABV",
    "name": "ABUJA",
    "city": "奈及利亞阿布加"
  },
  {
    "iata": "ACC",
    "name": "ACCRA",
    "city": "迦納阿克拉"
  },
  {
    "iata": "ADD",
    "name": "ADDIS ABABA",
    "city": "衣索比亞阿迪斯阿魯巴"
  },
  {
    "iata": "ADE",
    "name": "ADEN",
    "city": "葉門亞丁"
  },
  {
    "iata": "ALG",
    "name": "ALGIERS",
    "city": "阿爾及利亞阿爾及爾"
  },
  {
    "iata": "AMM",
    "name": "AMMAN",
    "city": "約旦安曼"
  },
  {
    "iata": "ANK",
    "name": "ANKARA",
    "city": "土耳其安卡拉"
  },
  {
    "iata": "BGW",
    "name": "BAGHDAD",
    "city": "伊拉克巴格達"
  },
  {
    "iata": "BAH",
    "name": "BAHRAIN",
    "city": "巴林"
  },
  {
    "iata": "BKO",
    "name": "BAMAKO",
    "city": "馬利巴馬科"
  },
  {
    "iata": "BGF",
    "name": "BAN-GUI",
    "city": "中非共和國班基"
  },
  {
    "iata": "BEY",
    "name": "BEIRUT",
    "city": "黎巴嫩貝魯特"
  },
  {
    "iata": "BLZ",
    "name": "BLANTYRE",
    "city": "馬拉威布蘭太"
  },
  {
    "iata": "BZV",
    "name": "BRAXXABILLE",
    "city": "剛果布拉薩市"
  },
  {
    "iata": "CAI",
    "name": "CAIRO",
    "city": "埃及開羅"
  },
  {
    "iata": "CPT",
    "name": "CAPETOWN",
    "city": "南非開普敦"
  },
  {
    "iata": "CAS",
    "name": "CASABLANCA",
    "city": "摩洛哥卡薩布蘭卡"
  },
  {
    "iata": "CKY",
    "name": "CONAKRY",
    "city": "幾內亞柯那克里"
  },
  {
    "iata": "COO",
    "name": "COTONOU",
    "city": "貝南柯多努"
  },
  {
    "iata": "DKR",
    "name": "DAKAR",
    "city": "塞內加爾達卡"
  },
  {
    "iata": "DAM",
    "name": "DAMASCUS",
    "city": "敘利亞大馬士革"
  },
  {
    "iata": "DAR",
    "name": "DAR ES SALAAM",
    "city": "坦尚尼亞達累斯薩拉姆"
  },
  {
    "iata": "DHA",
    "name": "DHAHRAN",
    "city": "沙烏地阿拉伯達蘭"
  },
  {
    "iata": "DOH",
    "name": "DOHA",
    "city": "卡達杜哈"
  },
  {
    "iata": "DXB",
    "name": "DUBAI",
    "city": "阿拉伯聯合大公國杜拜"
  },
  {
    "iata": "EBB",
    "name": "ENTEBBE/KAMPALA",
    "city": "烏干達恩特比/坎帕拉"
  },
  {
    "iata": "FTL",
    "name": "FORT LAMY",
    "city": "查德拉米堡"
  },
  {
    "iata": "FNA",
    "name": "FREETOWN",
    "city": "獅子山自由城"
  },
  {
    "iata": "HRE",
    "name": "HARARE",
    "city": "辛巴威哈拉雷"
  },
  {
    "iata": "HBT",
    "name": "HAFR ALBATIN",
    "city": "沙烏地阿拉伯哈夫爾巴廷"
  },
  {
    "iata": "IST",
    "name": "ISTANBUL",
    "city": "土耳其伊斯坦堡"
  },
  {
    "iata": "JED",
    "name": "JEDDAH",
    "city": "沙烏地阿拉伯吉達"
  },
  {
    "iata": "JNB",
    "name": "JOHANNESBURG",
    "city": "南非約翰尼斯堡"
  },
  {
    "iata": "KRT",
    "name": "KHARTOUM",
    "city": "蘇丹喀土穆"
  },
  {
    "iata": "FIA",
    "name": "KINSHASA",
    "city": "剛果民主共和國金夏沙"
  },
  {
    "iata": "KWI",
    "name": "KUWAIT",
    "city": "科威特"
  },
  {
    "iata": "LOS",
    "name": "LAGOS",
    "city": "奈及利亞拉哥斯"
  },
  {
    "iata": "LPA",
    "name": "LASPALMAS",
    "city": "西班牙拉斯巴馬斯"
  },
  {
    "iata": "LBV",
    "name": "LIBREVILLE",
    "city": "加彭自由市"
  },
  {
    "iata": "LLW",
    "name": "LILONGWE",
    "city": "馬拉威里郎威"
  },
  {
    "iata": "LFW",
    "name": "LOME",
    "city": "多哥洛美"
  },
  {
    "iata": "LUM",
    "name": "LOURENCO MAROUES",
    "city": "莫三比克魯倫素馬凱斯"
  },
  {
    "iata": "LAD",
    "name": "LUAN DA",
    "city": "安哥拉盧安達"
  },
  {
    "iata": "LUN",
    "name": "LUSAKA",
    "city": "尚比亞路沙卡"
  },
  {
    "iata": "MLA",
    "name": "MALTA",
    "city": "馬爾他"
  },
  {
    "iata": "MTS",
    "name": "MANZINI",
    "city": "史瓦帝尼曼齊尼"
  },
  {
    "iata": "MSU",
    "name": "MASERU",
    "city": "賴索托馬塞魯"
  },
  {
    "iata": "MRU",
    "name": "MAURITIUS",
    "city": "模里西斯"
  },
  {
    "iata": "MGQ",
    "name": "MOGADISHU",
    "city": "索馬利亞摩加迪休"
  },
  {
    "iata": "MLW",
    "name": "MONROVIA",
    "city": "賴比瑞亞蒙羅維亞"
  },
  {
    "iata": "MCT",
    "name": "MUSCAT",
    "city": "阿曼馬斯開特"
  },
  {
    "iata": "NBO",
    "name": "NAIROBI",
    "city": "肯亞奈洛比"
  },
  {
    "iata": "NDJ",
    "name": "N’DJAMENA",
    "city": "查德恩將納"
  },
  {
    "iata": "NIM",
    "name": "NIAMEY",
    "city": "尼日尼阿美"
  },
  {
    "iata": "OUA",
    "name": "OUAGADOUGOU",
    "city": "布吉納法索瓦加杜古"
  },
  {
    "iata": "WDH",
    "name": "WINDHOEK",
    "city": "納米比亞溫得和克"
  },
  {
    "iata": "RAK",
    "name": "MARRAKECH",
    "city": "摩洛哥馬拉喀什"
  },
  {
    "iata": "RUH",
    "name": "RIYADH",
    "city": "沙烏地阿拉伯利雅德"
  },
  {
    "iata": "SAY",
    "name": "SALISBURY",
    "city": "辛巴威索爾茲伯里"
  },
  {
    "iata": "SEC",
    "name": "SERRE CHEVALIER",
    "city": "法國塞爾舍瓦利耶"
  },
  {
    "iata": "TNG",
    "name": "TANGIER",
    "city": "摩洛哥丹吉爾"
  },
  {
    "iata": "TNR",
    "name": "TANANARIVE",
    "city": "馬達加斯加塔那那利佛"
  },
  {
    "iata": "THR",
    "name": "TEHRAN",
    "city": "伊朗德黑蘭"
  },
  {
    "iata": "TLV",
    "name": "TELAVIV",
    "city": "以色列特拉維夫"
  },
  {
    "iata": "TIP",
    "name": "TRIPOLI",
    "city": "利比亞的黎波里"
  },
  {
    "iata": "TUN",
    "name": "TUNIS",
    "city": "突尼西亞突尼斯"
  },
  {
    "iata": "YAO",
    "name": "YAOUNDE",
    "city": "喀麥隆雅恩德"
  }
]
</file>

<file path="src/pages/Notes.jsx">
import { useState, useEffect } from 'react';
import styled from 'styled-components';

const Container = styled.div`
  max-width: 800px;
  margin: 0 auto;
  padding: 0 1rem;
  
  @media (max-width: 768px) {
    padding: 0 0.5rem;
  }
`;

const Card = styled.div`
  background-color: white;
  border-radius: 8px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  padding: 1rem;
  margin-bottom: 1rem;
`;

const NoteForm = styled.form`
  display: flex;
  flex-direction: column;
  gap: 1rem;
  margin-bottom: 1rem;
`;

const TextArea = styled.textarea`
  width: 100%;
  min-height: 100px;
  padding: 0.5rem;
  border: 1px solid #ddd;
  border-radius: 4px;
  resize: vertical;
`;

const ButtonGroup = styled.div`
  display: flex;
  gap: 0.5rem;
  
  @media (max-width: 480px) {
    flex-direction: column;
    width: 100%;
  }
`;

const Button = styled.button`
  background-color: ${props => props.$primary ? '#3498db' : '#ccc'};
  color: white;
  border: none;
  padding: 0.5rem 1rem;
  border-radius: 4px;
  cursor: pointer;
`;

const NoteList = styled.div`
  display: flex;
  flex-direction: column;
  gap: 1rem;
`;

const NoteItem = styled.div`
  border: 1px solid #eee;
  border-radius: 8px;
  padding: 1rem;
  position: relative;
`;

const NoteContent = styled.div`
  white-space: pre-wrap;
  margin-bottom: 0.5rem;
`;

const NoteActions = styled.div`
  display: flex;
  justify-content: flex-end;
  gap: 0.5rem;
  
  @media (max-width: 480px) {
    flex-wrap: wrap;
  }
`;

const DeleteButton = styled.button`
  background-color: #e74c3c;
  color: white;
  border: none;
  padding: 0.25rem 0.5rem;
  border-radius: 4px;
  font-size: 0.8rem;
  cursor: pointer;
`;

const CheckboxButton = styled.button`
  background-color: ${props => props.checked ? '#4CAF50' : '#e74c3c'};
  color: white;
  border: 1px solid #ddd;
  border-radius: 4px;
  padding: 0.25rem 0.5rem;
  margin-right: 0.5rem;
  cursor: pointer;
  transition: all 0.2s ease;
  
  &:hover {
    background-color: ${props => props.checked ? '#45a049' : '#d62c1a'};
  }
`;

const InsertCheckboxButton = styled.button`
  background-color: white;
  color: #333;
  border: 1px solid #ddd;
  border-radius: 4px;
  padding: 0.5rem;
  cursor: pointer;
  margin-bottom: 0.5rem;
  display: inline-block;
  
  &:hover {
    background-color: #f5f5f5;
  }
`;

const ButtonDescription = styled.span`
  margin-left: 10px;
  font-size: 0.9rem;
  color: #666;
  display: inline-block;
  vertical-align: middle;
  
  @media (max-width: 480px) {
    margin-left: 0;
    margin-top: 5px;
    display: block;
  }
`;

const Notes = () => {
  // 從localStorage獲取記事
  const [notes, setNotes] = useState(() => {
    const savedNotes = localStorage.getItem('notes');
    return savedNotes ? JSON.parse(savedNotes) : [];
  });
  
  const [newNote, setNewNote] = useState('');
  const [editingNote, setEditingNote] = useState(null);
  
  // 保存記事到localStorage
  useEffect(() => {
    localStorage.setItem('notes', JSON.stringify(notes));
  }, [notes]);
  
  // 處理記事輸入變更
  const handleNoteChange = (e) => {
    setNewNote(e.target.value);
  };
  
  // 插入待辦按鈕
  const handleInsertCheckbox = () => {
    const checkboxPlaceholder = '[待辦] ';
    setNewNote(prev => prev + checkboxPlaceholder);
  };
  
  // 新增記事
  const handleAddNote = (e) => {
    e.preventDefault();
    
    if (!newNote.trim()) return;
    
    const noteWithCheckboxes = processCheckboxes(newNote);
    
    if (editingNote) {
      // 更新現有記事
      const updatedNotes = notes.map(note => 
        note.id === editingNote.id ? { ...note, content: noteWithCheckboxes } : note
      );
      setNotes(updatedNotes);
      setEditingNote(null);
    } else {
      // 新增記事
      const newNoteObj = {
        id: Date.now().toString(),
        content: noteWithCheckboxes,
        createdAt: new Date().toISOString()
      };
      setNotes([newNoteObj, ...notes]);
    }
    
    setNewNote('');
  };
  
  // 處理記事中的待辦按鈕
  const processCheckboxes = (text) => {
    // 將文本中的 [待辦] 標記轉換為帶有狀態的對象
    return text.replace(/\[待辦\]/g, (match, offset) => {
      const id = Date.now().toString() + offset;
      return `[CHECKBOX:${id}:false]`;
    });
  };
  
  // 切換完成狀態
  const toggleCheckbox = (noteId, checkboxId) => {
    const updatedNotes = notes.map(note => {
      if (note.id === noteId) {
        const regex = new RegExp(`\\[CHECKBOX:${checkboxId}:(true|false)\\]`, 'g');
        const updatedContent = note.content.replace(regex, (match, state) => {
          const newState = state === 'true' ? 'false' : 'true';
          return `[CHECKBOX:${checkboxId}:${newState}]`;
        });
        return { ...note, content: updatedContent };
      }
      return note;
    });
    
    setNotes(updatedNotes);
  };
  
  // 編輯記事
  const handleEditNote = (note) => {
    // 將記事內容中的複選框標記轉換回 [待辦] 格式以便編輯
    const editableContent = note.content.replace(/\[CHECKBOX:([^:]+):(true|false)\]/g, '[待辦]');
    setNewNote(editableContent);
    setEditingNote(note);
  };
  
  // 刪除記事
  const handleDeleteNote = (noteId) => {
    if (!window.confirm('確定要刪除這則記事嗎？此動作無法復原。')) return;
    setNotes(notes.filter(note => note.id !== noteId));
    
    if (editingNote && editingNote.id === noteId) {
      setEditingNote(null);
      setNewNote('');
    }
  };
  
  // 渲染記事內容，將複選框標記轉換為實際的按鈕
  const renderNoteContent = (note) => {
    const parts = [];
    let lastIndex = 0;
    const regex = /\[CHECKBOX:([^:]+):(true|false)\]/g;
    let match;
    
    while ((match = regex.exec(note.content)) !== null) {
      // 添加複選框前的文本
      if (match.index > lastIndex) {
        parts.push(
          <span key={`text-${lastIndex}`}>
            {note.content.substring(lastIndex, match.index)}
          </span>
        );
      }
      
      // 添加複選框按鈕
      const [, checkboxId, state] = match;
      parts.push(
        <CheckboxButton
          key={`checkbox-${checkboxId}`}
          checked={state === 'true'}
          onClick={() => toggleCheckbox(note.id, checkboxId)}
        >
          {state === 'true' ? '完成' : '待辦'}
        </CheckboxButton>
      );
      
      lastIndex = regex.lastIndex;
    }
    
    // 添加剩餘的文本
    if (lastIndex < note.content.length) {
      parts.push(
        <span key={`text-${lastIndex}`}>
          {note.content.substring(lastIndex)}
        </span>
      );
    }
    
    return parts;
  };
  
  // 格式化日期
  const formatDate = (dateString) => {
    const date = new Date(dateString);
    return date.toLocaleString();
  };
  
  return (
    <Container>
      <h2>記事本</h2>
      
      <Card>
        <NoteForm onSubmit={handleAddNote}>
          <div style={{ display: 'flex', alignItems: 'center' }}>
            <InsertCheckboxButton 
              type="button" 
              onClick={handleInsertCheckbox}
            >
              待辦
            </InsertCheckboxButton>
            <ButtonDescription>
              插入待辦按鈕即可在新增筆記後變成待辦清單模式
            </ButtonDescription>
          </div>
          
          <TextArea
            value={newNote}
            onChange={handleNoteChange}
            placeholder="輸入記事內容..."
            required
          />
          
          <ButtonGroup>
            <Button $primary type="submit">
              {editingNote ? '更新記事' : '新增記事'}
            </Button>
            {editingNote && (
              <Button 
                type="button" 
                onClick={() => {
                  setEditingNote(null);
                  setNewNote('');
                }}
              >
                取消編輯
              </Button>
            )}
          </ButtonGroup>
        </NoteForm>
      </Card>
      
      <NoteList>
        {notes.length === 0 ? (
          <p>尚無記事</p>
        ) : (
          notes.map(note => (
            <NoteItem key={note.id}>
              <NoteContent>{renderNoteContent(note)}</NoteContent>
              <div style={{ fontSize: '0.8rem', color: '#666' }}>
                {formatDate(note.createdAt)}
              </div>
              <NoteActions>
                <Button 
                  type="button" 
                  onClick={() => handleEditNote(note)}
                >
                  編輯
                </Button>
                <DeleteButton 
                  type="button" 
                  onClick={() => handleDeleteNote(note.id)}
                >
                  刪除
                </DeleteButton>
              </NoteActions>
            </NoteItem>
          ))
        )}
      </NoteList>
    </Container>
  );
};

export default Notes;
</file>

<file path="src/pages/PackingList.jsx">
import { useState, useEffect } from 'react'
import styled from 'styled-components'
import { useTrip } from '../contexts/TripContext'

const Container = styled.div`
  max-width: 800px;
  margin: 0 auto;
  padding: 0 1rem;
  
  @media (max-width: 768px) {
    padding: 0 0.5rem;
  }
`

const TripSelector = styled.div`
  margin-bottom: 1rem;
`

const CategoryCard = styled.div`
  background-color: white;
  border-radius: 8px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  padding: 1rem;
  margin-bottom: 1rem;
`

const ItemForm = styled.form`
  background-color: white;
  border-radius: 8px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  padding: 1rem;
  margin-bottom: 1rem;
`

const ItemRow = styled.div`
  display: flex;
  align-items: center;
  padding: 0.5rem 0;
  border-bottom: 1px solid #eee;
  
  &:last-child {
    border-bottom: none;
  }
  
  @media (max-width: 480px) {
    flex-wrap: wrap;
    gap: 0.5rem;
  }
`

const ItemButton = styled.button`
  display: flex;
  align-items: center;
  flex: 1;
  cursor: pointer;
  padding: 0.5rem;
  border-radius: 4px;
  border: 1px solid #ddd;
  background-color: ${props => props.isPacked ? '#4CAF50' : 'white'};
  color: ${props => props.isPacked ? 'white' : 'black'};
  text-align: left;
  transition: all 0.2s ease;
  
  &:hover {
    background-color: ${props => props.isPacked ? '#45a049' : '#f5f5f5'};
  }
  
  span {
    text-decoration: ${props => props.isPacked ? 'line-through' : 'none'};
  }
`

const AddItemButton = styled.button`
  display: block;
  width: 100%;
  padding: 0.5rem;
  margin-top: 0.5rem;
  border-radius: 4px;
  border: 1px dashed #3498db;
  background-color: white;
  color: #3498db;
  cursor: pointer;
  
  &:hover {
    background-color: #f0f8ff;
  }
`

const ButtonGroup = styled.div`
  display: flex;
  gap: 0.5rem;
  
  @media (max-width: 480px) {
    flex-wrap: wrap;
    width: 100%;
  }
`

const Button = styled.button`
  background-color: ${props => props.$primary ? '#3498db' : '#e74c3c'};
  color: white;
  border: none;
  padding: 0.5rem 1rem;
  border-radius: 4px;
  cursor: pointer;
  font-size: 0.8rem;
`

const ItemCategories = [
  '衣物',
  '鞋子與配件',
  '盥洗用品',
  '電子產品',
  '藥品與急救',
  '證件與文件',
  '其他'
];

// 預設物品清單
const DefaultItems = {
  '護照、簽證與證件': ['護照', '簽證', '國際信用卡', '駕照', '身分證/記憶卡', '旅行支票', '計算機', '現金一日用', '名片'],
  '衣物與鞋子': ['帽子', '隱形眼鏡', '太陽眼鏡', '內衣', '襪子', '輕便拖鞋', '涼鞋', '睡衣', '防寒衣物', '正式服裝'],
  '盥洗與美容用品': ['牙刷', '牙膏', '洗髮精', '沐浴乳', '毛巾', '刮鬍刀', '化妝品', '防曬霜', '髮膠', '保養品'],
  '電子產品': ['相機/數位相機', '充電器', '筆記型電腦', '筆電電源', '行動電源', '變壓器', '耳機', '手機', '平板'],
  '藥品與健康': ['個人藥物', '口罩', '防蚊液', 'OK繃', '常備藥品'],
  '旅行配件': ['行李箱', '背包', '旅遊指南', '地圖', '雨具', '望遠鏡', '筆記本', '筆', '指南針', '防曬傘'],
  '其他必需品': ['零錢包', '鑰匙包', '針線包', '塑膠袋', '日記簿', '濕紙巾']
};

const DefaultItemButton = styled.button`
  background-color: ${props => props.selected ? '#4CAF50' : 'white'};
  color: ${props => props.selected ? 'white' : 'black'};
  border: 1px solid #ddd;
  border-radius: 4px;
  padding: 8px 12px;
  margin: 4px;
  cursor: pointer;
  transition: all 0.2s ease;
  
  &:hover {
    background-color: ${props => props.selected ? '#45a049' : '#f5f5f5'};
  }
`;

const DefaultItemsContainer = styled.div`
  background-color: white;
  border-radius: 8px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  padding: 1rem;
  margin-bottom: 1rem;
`;

const DefaultItemsGrid = styled.div`
  display: flex;
  flex-wrap: wrap;
  gap: 8px;
  margin-top: 8px;
  
  @media (max-width: 480px) {
    gap: 5px;
  }
`;

const PackingList = () => {
  const { trips, selectedTripId, setSelectedTripId } = useTrip();
  const [packingLists, setPackingLists] = useState(() => {
    const savedLists = localStorage.getItem('packingLists');
    return savedLists ? JSON.parse(savedLists) : {};
  });
  
  const [newItem, setNewItem] = useState({
    id: '',
    category: '',
    name: '',
    quantity: 1,
    isPacked: false
  });
  
  const [isEditing, setIsEditing] = useState(false);
  const [filterCategory, setFilterCategory] = useState('');
  const [selectedDefaultCategory, setSelectedDefaultCategory] = useState('護照、簽證與證件');
  
  useEffect(() => {
    localStorage.setItem('packingLists', JSON.stringify(packingLists));
  }, [packingLists]);
  
  const handleTripChange = (e) => {
    const tripId = e.target.value;
    setSelectedTripId(tripId);
    
    // 確保選定行程的物品清單存在
    if (tripId && !packingLists[tripId]) {
      setPackingLists(prev => ({
        ...prev,
        [tripId]: []
      }));
    }
  };
  
  const handleInputChange = (e) => {
    const { name, value, type, checked } = e.target;
    setNewItem(prev => ({
      ...prev,
      [name]: type === 'checkbox' ? checked : value
    }));
  };
  
  const handleSubmit = (e) => {
    e.preventDefault();
    
    if (!selectedTripId) return;
    
    const tripItems = packingLists[selectedTripId] || [];
    
    if (isEditing) {
      const updatedItems = tripItems.map(item => 
        item.id === newItem.id ? newItem : item
      );
      
      setPackingLists({
        ...packingLists,
        [selectedTripId]: updatedItems
      });
      
      setIsEditing(false);
    } else {
      const id = Date.now().toString();
      
      setPackingLists({
        ...packingLists,
        [selectedTripId]: [...tripItems, { ...newItem, id }]
      });
    }
    
    setNewItem({
      id: '',
      category: '',
      name: '',
      quantity: 1,
      isPacked: false
    });
  };
  
  const handleEdit = (item) => {
    setNewItem(item);
    setIsEditing(true);
  };
  
  const handleDelete = (itemId) => {
    const tripItems = packingLists[selectedTripId] || [];
    
    const updatedItems = tripItems.filter(item => item.id !== itemId);
    
    setPackingLists({
      ...packingLists,
      [selectedTripId]: updatedItems
    });
  };
  
  const togglePacked = (itemId) => {
    const tripItems = packingLists[selectedTripId] || [];
    
    const updatedItems = tripItems.map(item => {
      if (item.id === itemId) {
        return { ...item, isPacked: !item.isPacked };
      }
      return item;
    });
    
    setPackingLists({
      ...packingLists,
      [selectedTripId]: updatedItems
    });
  };
  
  // 獲取選定行程的物品清單
  const selectedTripItems = selectedTripId ? (packingLists[selectedTripId] || []) : [];
  
  // 根據分類過濾物品
  const filteredItems = filterCategory
    ? selectedTripItems.filter(item => item.category === filterCategory)
    : selectedTripItems;
  
  // 按分類分組物品
  const groupedItems = filteredItems.reduce((acc, item) => {
    if (!acc[item.category]) {
      acc[item.category] = [];
    }
    acc[item.category].push(item);
    return acc;
  }, {});
  
  // 計算已打包物品的百分比
  const packedPercentage = selectedTripItems.length > 0
    ? Math.round((selectedTripItems.filter(item => item.isPacked).length / selectedTripItems.length) * 100)
    : 0;
  
  // 添加預設物品到清單中
  const addDefaultItem = (itemName) => {
    if (!selectedTripId) return;
    
    const tripItems = packingLists[selectedTripId] || [];
    
    // 檢查物品是否已存在
    const itemExists = tripItems.some(item => 
      item.name.toLowerCase() === itemName.toLowerCase() && 
      item.category === getItemCategory(itemName)
    );
    
    if (!itemExists) {
      const id = Date.now().toString();
      const category = getItemCategory(itemName);
      
      setPackingLists({
        ...packingLists,
        [selectedTripId]: [...tripItems, { 
          id, 
          name: itemName, 
          category, 
          quantity: 1, 
          isPacked: false 
        }]
      });
    }
  };
  
  // 根據物品名稱判斷其分類
  const getItemCategory = (itemName) => {
    for (const [category, items] of Object.entries(DefaultItems)) {
      if (items.includes(itemName)) {
        // 將預設分類映射到應用程式的分類
        if (category === '護照、簽證與證件') return '證件與文件';
        if (category === '衣物與鞋子') return '衣物';
        if (category === '盥洗與美容用品') return '盥洗用品';
        if (category === '電子產品') return '電子產品';
        if (category === '藥品與健康') return '藥品與急救';
        if (category === '旅行配件') return '其他';
        if (category === '其他必需品') return '其他';
      }
    }
    return '其他';
  };
  
  // 檢查物品是否已在清單中
  const isItemInList = (itemName) => {
    if (!selectedTripId) return false;
    
    const tripItems = packingLists[selectedTripId] || [];
    return tripItems.some(item => item.name.toLowerCase() === itemName.toLowerCase());
  };
  
  return (
    <Container>
      <h2>物品清單</h2>
      
      <TripSelector>
        <label htmlFor="trip">選擇行程:</label>
        <select
          id="trip"
          value={selectedTripId || ''}
          onChange={handleTripChange}
        >
          <option value="">-- 請選擇行程 --</option>
          {trips.map(trip => (
            <option key={trip.id} value={trip.id}>
              {trip.name} ({trip.startDate} 至 {trip.endDate})
            </option>
          ))}
        </select>
      </TripSelector>
      
      {selectedTripId ? (
        <>
          <DefaultItemsContainer>
            <h3>常用物品清單</h3>
            <div>
              <label htmlFor="defaultCategory" style={{ marginRight: '0.5rem' }}>選擇分類:</label>
              <select
                id="defaultCategory"
                value={selectedDefaultCategory}
                onChange={(e) => setSelectedDefaultCategory(e.target.value)}
              >
                {Object.keys(DefaultItems).map(category => (
                  <option key={category} value={category}>
                    {category}
                  </option>
                ))}
              </select>
            </div>
            
            <DefaultItemsGrid>
              {DefaultItems[selectedDefaultCategory].map(item => (
                <DefaultItemButton
                  key={item}
                  selected={isItemInList(item)}
                  onClick={() => addDefaultItem(item)}
                >
                  {item}
                </DefaultItemButton>
              ))}
            </DefaultItemsGrid>
          </DefaultItemsContainer>
          
          <ItemForm onSubmit={handleSubmit}>
            <h3>{isEditing ? '編輯物品' : '新增物品'}</h3>
            
            <div>
              <label htmlFor="category">分類</label>
              <select
                id="category"
                name="category"
                value={newItem.category}
                onChange={handleInputChange}
                required
              >
                <option value="">-- 選擇分類 --</option>
                {ItemCategories.map(category => (
                  <option key={category} value={category}>
                    {category}
                  </option>
                ))}
              </select>
            </div>
            
            <div>
              <label htmlFor="name">物品名稱</label>
              <input
                type="text"
                id="name"
                name="name"
                value={newItem.name}
                onChange={handleInputChange}
                required
              />
            </div>
            
            <div>
              <label htmlFor="quantity">數量</label>
              <input
                type="number"
                id="quantity"
                name="quantity"
                min="1"
                value={newItem.quantity}
                onChange={handleInputChange}
                required
              />
            </div>
            
            <div style={{ marginBottom: '1rem' }}>
              <Button 
                type="button"
                style={{
                  backgroundColor: newItem.isPacked ? '#4CAF50' : '#f0f0f0',
                  color: newItem.isPacked ? 'white' : 'black',
                  border: 'none',
                  padding: '0.5rem 1rem',
                  borderRadius: '4px',
                  cursor: 'pointer',
                  width: '100%',
                  textAlign: 'center'
                }}
                onClick={() => setNewItem(prev => ({ ...prev, isPacked: !prev.isPacked }))}
              >
                {newItem.isPacked ? '✓ 已打包' : '標記為已打包'}
              </Button>
            </div>
            
            <ButtonGroup>
              <Button $primary type="submit">
                {isEditing ? '更新物品' : '新增物品'}
              </Button>
              {isEditing && (
                <Button type="button" onClick={() => {
                  setIsEditing(false);
                  setNewItem({
                    id: '',
                    category: '',
                    name: '',
                    quantity: 1,
                    isPacked: false
                  });
                }}>
                  取消
                </Button>
              )}
            </ButtonGroup>
          </ItemForm>
          
          <div>
            <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '1rem' }}>
              <h3>打包進度: {packedPercentage}%</h3>
              
              <div>
                <label htmlFor="filterCategory" style={{ marginRight: '0.5rem' }}>按分類過濾:</label>
                <select
                  id="filterCategory"
                  value={filterCategory}
                  onChange={(e) => setFilterCategory(e.target.value)}
                >
                  <option value="">所有分類</option>
                  {ItemCategories.map(category => (
                    <option key={category} value={category}>
                      {category}
                    </option>
                  ))}
                </select>
              </div>
            </div>
            
            {Object.keys(groupedItems).length === 0 ? (
              <p>{filterCategory ? `沒有${filterCategory}分類的物品` : '尚未添加任何物品'}</p>
            ) : (
              Object.entries(groupedItems).map(([category, items]) => (
                <CategoryCard key={category}>
                  <h4>{category}</h4>
                  {items.map(item => (
                    <ItemRow key={item.id}>
                      <ItemButton 
                        isPacked={item.isPacked}
                        onClick={() => togglePacked(item.id)}
                      >
                        <span>
                          {item.name} {item.quantity > 1 ? `(${item.quantity})` : ''}
                        </span>
                      </ItemButton>
                      <ButtonGroup>
                        <Button $primary onClick={() => handleEdit(item)}>編輯</Button>
                        <Button onClick={() => handleDelete(item.id)}>刪除</Button>
                      </ButtonGroup>
                    </ItemRow>
                  ))}
                  <AddItemButton 
                    onClick={() => {
                      setNewItem({
                        id: '',
                        category: category,
                        name: '',
                        quantity: 1,
                        isPacked: false
                      });
                      window.scrollTo({ top: 0, behavior: 'smooth' });
                    }}
                  >
                    + 新增{category}物品
                  </AddItemButton>
                </CategoryCard>
              ))
            )}
          </div>
        </>
      ) : (
        <p>請先選擇一個行程</p>
      )}
    </Container>
  );
};

export default PackingList;
</file>

<file path="src/pages/TravelTips.jsx">
import { useState, useEffect } from 'react'
import styled from 'styled-components'
import { useTrip } from '../contexts/TripContext'

const Container = styled.div`
  max-width: 800px;
  margin: 0 auto;
`

const TripSelector = styled.div`
  margin-bottom: 1rem;
`

const TipCard = styled.div`
  background-color: white;
  border-radius: 8px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  padding: 1rem;
  margin-bottom: 1rem;
`

const TipForm = styled.form`
  background-color: white;
  border-radius: 8px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  padding: 1rem;
  margin-bottom: 1rem;
`

const ButtonGroup = styled.div`
  display: flex;
  gap: 0.5rem;
  margin-top: 1rem;
`

const Button = styled.button`
  background-color: ${props => props.$primary ? '#3498db' : '#e74c3c'};
  color: white;
  border: none;
  padding: 0.5rem 1rem;
  border-radius: 4px;
  cursor: pointer;
`

const TipCategories = [
  '簽證資訊',
  '天氣資訊',
  '交通資訊',
  '貨幣與支付',
  '安全提示',
  '當地習俗',
  '緊急聯絡',
  '其他'
];

const TravelTips = () => {
  const { trips, selectedTripId, setSelectedTripId } = useTrip();
  const [tips, setTips] = useState(() => {
    const savedTips = localStorage.getItem('travelTips');
    return savedTips ? JSON.parse(savedTips) : {};
  });
  
  const [newTip, setNewTip] = useState({
    id: '',
    category: '',
    title: '',
    content: ''
  });
  
  const [isEditing, setIsEditing] = useState(false);
  const [filterCategory, setFilterCategory] = useState('');
  
  useEffect(() => {
    localStorage.setItem('travelTips', JSON.stringify(tips));
  }, [tips]);
  
  const handleTripChange = (e) => {
    const tripId = e.target.value;
    setSelectedTripId(tripId);
    
    // 確保選定行程的旅遊須知存在
    if (tripId && !tips[tripId]) {
      setTips(prev => ({
        ...prev,
        [tripId]: []
      }));
    }
  };
  
  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setNewTip(prev => ({ ...prev, [name]: value }));
  };
  
  const handleSubmit = (e) => {
    e.preventDefault();
    
    if (!selectedTripId) return;
    
    const tripTips = tips[selectedTripId] || [];
    
    if (isEditing) {
      const updatedTips = tripTips.map(tip => 
        tip.id === newTip.id ? newTip : tip
      );
      
      setTips({
        ...tips,
        [selectedTripId]: updatedTips
      });
      
      setIsEditing(false);
    } else {
      const id = Date.now().toString();
      
      setTips({
        ...tips,
        [selectedTripId]: [...tripTips, { ...newTip, id }]
      });
    }
    
    setNewTip({
      id: '',
      category: '',
      title: '',
      content: ''
    });
  };
  
  const handleEdit = (tip) => {
    setNewTip(tip);
    setIsEditing(true);
  };
  
  const handleDelete = (tipId) => {
    const tripTips = tips[selectedTripId] || [];
    
    const updatedTips = tripTips.filter(tip => tip.id !== tipId);
    
    setTips({
      ...tips,
      [selectedTripId]: updatedTips
    });
  };
  
  // 獲取選定行程的旅遊須知
  const selectedTripTips = selectedTripId ? (tips[selectedTripId] || []) : [];
  
  // 根據分類過濾旅遊須知
  const filteredTips = filterCategory
    ? selectedTripTips.filter(tip => tip.category === filterCategory)
    : selectedTripTips;
  
  return (
    <Container>
      <h2>旅遊須知</h2>
      
      <TripSelector>
        <label htmlFor="trip">選擇行程:</label>
        <select
          id="trip"
          value={selectedTripId || ''}
          onChange={handleTripChange}
        >
          <option value="">-- 請選擇行程 --</option>
          {trips.map(trip => (
            <option key={trip.id} value={trip.id}>
              {trip.name} ({trip.startDate} 至 {trip.endDate})
            </option>
          ))}
        </select>
      </TripSelector>
      
      {selectedTripId ? (
        <>
          <TipForm onSubmit={handleSubmit}>
            <h3>{isEditing ? '編輯旅遊須知' : '新增旅遊須知'}</h3>
            
            <div>
              <label htmlFor="category">分類</label>
              <select
                id="category"
                name="category"
                value={newTip.category}
                onChange={handleInputChange}
                required
              >
                <option value="">-- 選擇分類 --</option>
                {TipCategories.map(category => (
                  <option key={category} value={category}>
                    {category}
                  </option>
                ))}
              </select>
            </div>
            
            <div>
              <label htmlFor="title">標題</label>
              <input
                type="text"
                id="title"
                name="title"
                value={newTip.title}
                onChange={handleInputChange}
                required
              />
            </div>
            
            <div>
              <label htmlFor="content">內容</label>
              <textarea
                id="content"
                name="content"
                value={newTip.content}
                onChange={handleInputChange}
                rows="4"
                required
              ></textarea>
            </div>
            
            <ButtonGroup>
              <Button $primary type="submit">
                {isEditing ? '更新旅遊須知' : '新增旅遊須知'}
              </Button>
              {isEditing && (
                <Button type="button" onClick={() => {
                  setIsEditing(false);
                  setNewTip({
                    id: '',
                    category: '',
                    title: '',
                    content: ''
                  });
                }}>
                  取消
                </Button>
              )}
            </ButtonGroup>
          </TipForm>
          
          <div>
            <h3>已保存的旅遊須知</h3>
            
            <div style={{ marginBottom: '1rem' }}>
              <label htmlFor="filterCategory">按分類過濾:</label>
              <select
                id="filterCategory"
                value={filterCategory}
                onChange={(e) => setFilterCategory(e.target.value)}
              >
                <option value="">所有分類</option>
                {TipCategories.map(category => (
                  <option key={category} value={category}>
                    {category}
                  </option>
                ))}
              </select>
            </div>
            
            {filteredTips.length === 0 ? (
              <p>{filterCategory ? `沒有${filterCategory}分類的旅遊須知` : '尚未添加任何旅遊須知'}</p>
            ) : (
              filteredTips.map(tip => (
                <TipCard key={tip.id}>
                  <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                    <h4>{tip.title}</h4>
                    <span style={{
                      backgroundColor: '#f0f0f0',
                      padding: '0.25rem 0.5rem',
                      borderRadius: '4px',
                      fontSize: '0.8rem'
                    }}>
                      {tip.category}
                    </span>
                  </div>
                  <p style={{ whiteSpace: 'pre-line' }}>{tip.content}</p>
                  <ButtonGroup>
                    <Button $primary onClick={() => handleEdit(tip)}>編輯</Button>
                    <Button onClick={() => handleDelete(tip.id)}>刪除</Button>
                  </ButtonGroup>
                </TipCard>
              ))
            )}
          </div>
        </>
      ) : (
        <p>請先選擇一個行程</p>
      )}
    </Container>
  );
};

export default TravelTips;
</file>

<file path="src/styles/index.css">
/* 全局樣式 */
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  font-family: 'Helvetica Neue', Arial, sans-serif;
  line-height: 1.6;
  color: #333;
}

h1, h2, h3, h4, h5, h6 {
  margin-bottom: 0.5rem;
}

button, input, select, textarea {
  font-family: inherit;
}

/* 表單元素樣式 */
input, textarea, select {
  padding: 0.5rem;
  border: 1px solid #ddd;
  border-radius: 4px;
  width: 100%;
  margin-bottom: 1rem;
}

button {
  background-color: #3498db;
  color: white;
  border: none;
  padding: 0.5rem 1rem;
  border-radius: 4px;
  cursor: pointer;
  transition: background-color 0.3s;
}

button:hover {
  background-color: #2980b9;
}

/* 卡片樣式 */
.card {
  background-color: white;
  border-radius: 8px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  padding: 1rem;
  margin-bottom: 1rem;
}

/* 響應式設計 */
@media (max-width: 768px) {
  .hide-mobile {
    display: none;
  }
}
</file>

<file path="index.html">
<!DOCTYPE html>
<html lang="zh-TW">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/src/assets/favicon.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>旅遊應用程序 v1.1Ai</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>
</file>

<file path="netlify.toml">
[functions]
  directory = "netlify/functions/"

[dev]
  command = "npm run dev"
  targetPort = 3000
</file>

<file path="netlify/functions/analyze-itinerary.js">
import { GoogleGenerativeAI } from "@google/generative-ai";

// 從環境變數中取得 API 金鑰
const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);

// 定義我們期望 AI 回傳的 JSON 結構
const JSON_SCHEMA = `
{
  "tripName": "string",
  "destination": "string",
  "startDate": "YYYY-MM-DD",
  "endDate": "YYYY-MM-DD",
  "description": "string",
  "flights": [
    {
      "id": "string",
      "date": "YYYY-MM-DD",
      "airline": "string",
      "flightNumber": "string",
      "departureCity": "string (IATA code)",
      "arrivalCity": "string (IATA code)",
      "departureTime": "HH:MM",
      "arrivalTime": "HH:MM",
      "duration": "string"
    }
  ],
  "hotels": [
    {
      "id": "string",
      "name": "string",
      "checkInDate": "YYYY-MM-DD",
      "checkOutDate": "YYYY-MM-DD",
      "address": "string",
      "contact": "string",
      "notes": "string"
    }
  ],
  "dailyItinerary": [
    {
      "id": "string",
      "date": "YYYY-MM-DD",
      "location": "string",
      "activity": "string",
      "time": "HH:MM",
      "notes": "string"
    }
  ]
}
`;

const getJsonPrompt = (text) => `
請分析以下旅遊行程文字，並嚴格按照這個 JSON 格式回傳結果。請確保所有欄位都是 string 格式。
如果資訊不存在，請回傳空字串 ""。
請不要包含任何 markdown 語法或前後的註解，只需要純粹的 JSON 物件。

請特別注意提取航班、住宿和每日行程的詳細資訊。
對於住宿，請提供飯店名稱、入住/退房日期、地址、聯絡方式和備註。
對於每日行程，請提供日期、地點、活動和時間。

JSON 格式:
${JSON_SCHEMA}

行程文字:
"""
${text}
"""
`;

export const handler = async (event) => {
  // 檢查 HTTP 方法是否為 POST
  if (event.httpMethod !== 'POST') {
    return { statusCode: 405, body: 'Method Not Allowed' };
  }

  try {
    const { text } = JSON.parse(event.body);
    if (!text) {
      return { statusCode: 400, body: 'Bad Request: text is required' };
    }

    const model = genAI.getGenerativeModel({ model: "gemini-2.0-flash" });
    const prompt = getJsonPrompt(text);

    const result = await model.generateContent(prompt);
    const response = await result.response;
    const responseText = await response.text();

    // 嘗試從 Markdown 程式碼區塊中提取 JSON 字串
    let jsonString = responseText;
    const jsonMatch = responseText.match(/```json\n([\s\S]*?)\n```/);
    if (jsonMatch && jsonMatch[1]) {
      jsonString = jsonMatch[1];
    }

    // 嘗試解析 AI 回傳的 JSON 字串
    let parsedJson;
    try {
      parsedJson = JSON.parse(jsonString);
    } catch (e) {
      console.error("Failed to parse JSON from AI response:", responseText);
      throw new Error("AI 回傳的格式不正確，無法解析。");
    }

    return {
      statusCode: 200,
      headers: {
        'Content-Type': 'application/json',
        'Access-Control-Allow-Origin': '*', // 開發時使用，生產環境建議指定來源
      },
      body: JSON.stringify(parsedJson),
    };

  } catch (error) {
    console.error("Error processing request:", error);
    return {
      statusCode: 500,
      headers: {
        'Content-Type': 'application/json',
        'Access-Control-Allow-Origin': '*',
      },
      body: JSON.stringify({ error: error.message }),
    };
  }
};
</file>

<file path="package.json">
{
  "name": "travel-app",
  "private": true,
  "version": "0.1.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint . --ext js,jsx --report-unused-disable-directives --max-warnings 0",
    "preview": "vite preview"
  },
  "dependencies": {
    "@google/generative-ai": "^0.24.1",
    "docx": "^9.5.0",
    "file-saver": "^2.0.5",
    "pdfmake": "^0.2.20",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-router-dom": "^6.16.0",
    "styled-components": "^6.0.8"
  },
  "devDependencies": {
    "@types/react": "^18.2.15",
    "@types/react-dom": "^18.2.7",
    "@vitejs/plugin-react": "^4.0.3",
    "eslint": "^8.45.0",
    "eslint-plugin-react": "^7.32.2",
    "eslint-plugin-react-hooks": "^4.6.0",
    "eslint-plugin-react-refresh": "^0.4.3",
    "vite": "^4.4.5"
  }
}
</file>

<file path="src/contexts/TripContext.jsx">
import { createContext, useState, useEffect, useContext } from 'react';

const TripContext = createContext();

// 定義預設字體大小
const defaultFontSizes = {
  h2: 24,          // 主要標題 (例如 "我的行程")
  h4: 18,          // 卡片標題
  destination: 20, // 卡片中的目的地
  body: 14,        // 一般內文
  small: 12,       // 較小文字 (例如航班資訊)
  label: 14,       // 表單標籤
};

export const TripProvider = ({ children }) => {
  // --- 原有的行程狀態管理 ---
  const [trips, setTrips] = useState(() => {
    const savedTrips = localStorage.getItem('trips');
    return savedTrips ? JSON.parse(savedTrips) : [];
  });

  const [selectedTripId, setSelectedTripId] = useState(() => {
    const lastSelectedTrip = localStorage.getItem('lastSelectedTrip');
    return lastSelectedTrip || '';
  });

  useEffect(() => {
    localStorage.setItem('lastSelectedTrip', selectedTripId);
  }, [selectedTripId]);

  useEffect(() => {
    localStorage.setItem('trips', JSON.stringify(trips));
  }, [trips]);

  // --- 新增的字體大小狀態管理 ---
  const [fontSizes, setFontSizes] = useState(() => {
    try {
      const savedFontSizes = localStorage.getItem('fontSizes');
      // 合併儲存的設定與預設值，避免未來新增設定時出錯
      return savedFontSizes ? { ...defaultFontSizes, ...JSON.parse(savedFontSizes) } : defaultFontSizes;
    } catch (error) {
      console.error("Failed to parse font sizes from localStorage", error);
      return defaultFontSizes;
    }
  });

  useEffect(() => {
    localStorage.setItem('fontSizes', JSON.stringify(fontSizes));
  }, [fontSizes]);

  // --- Theme (color palettes) 管理 ---
  const [appliedTheme, setAppliedTheme] = useState(() => {
    try {
      const raw = localStorage.getItem('colorTheme');
      return raw ? JSON.parse(raw) : null;
    } catch (e) {
      return null;
    }
  });

  const [previewTheme, setPreviewTheme] = useState(null);

  // helper: apply CSS variables to :root based on a palette object { id, name, colors: [] }
  const applyCssVars = (palette) => {
    try {
      const root = document && document.documentElement;
      if (!root) return;
      if (!palette || !palette.colors) {
        // clear theme vars
        root.style.removeProperty('--theme-1');
        root.style.removeProperty('--theme-2');
        root.style.removeProperty('--theme-3');
        root.style.removeProperty('--theme-4');
        root.style.removeProperty('--theme-accent');
        return;
      }
      const cols = palette.colors;
      root.style.setProperty('--theme-1', cols[0] || '');
      root.style.setProperty('--theme-2', cols[1] || '');
      root.style.setProperty('--theme-3', cols[2] || '');
      root.style.setProperty('--theme-4', cols[3] || '');
      // accent color for buttons / highlights
      root.style.setProperty('--theme-accent', cols[3] || cols[0] || '');
    } catch (e) {
      console.error('applyCssVars error', e);
    }
  };

  // apply persisted theme on mount
  useEffect(() => {
    if (appliedTheme) applyCssVars(appliedTheme);
  }, []); // eslint-disable-line react-hooks/exhaustive-deps

  const previewThemeFn = (palette) => {
    setPreviewTheme(palette);
    applyCssVars(palette);
  };

  const applyThemeFn = (palette) => {
    try {
      localStorage.setItem('colorTheme', JSON.stringify(palette));
      setAppliedTheme(palette);
      setPreviewTheme(null);
      applyCssVars(palette);
      // notify other tabs
      window.dispatchEvent(new Event('storage'));
    } catch (e) {
      console.error('applyTheme failed', e);
    }
  };

  const clearThemeFn = () => {
    try {
      localStorage.removeItem('colorTheme');
      setAppliedTheme(null);
      setPreviewTheme(null);
      applyCssVars(null);
      window.dispatchEvent(new Event('storage'));
    } catch (e) {
      console.error('clearTheme failed', e);
    }
  };


  // --- 提供給所有子元件的值 ---
  const value = {
    trips,
    setTrips,
    selectedTripId,
    setSelectedTripId,
    fontSizes,      // 提供字體大小設定
    setFontSizes,   // 提供更新字體大小的函式
    // theme helpers
    appliedTheme,
    previewTheme,
    previewThemeFn,
    applyThemeFn,
    clearThemeFn,
  };

  return <TripContext.Provider value={value}>{children}</TripContext.Provider>;
};

// 自定義鉤子，方便使用上下文
export const useTrip = () => {
  const context = useContext(TripContext);
  if (context === undefined) {
    throw new Error('useTrip 必須在 TripProvider 內使用');
  }
  return context;
};

export default TripContext;
</file>

<file path="src/main.jsx">
import React from 'react'
import ReactDOM from 'react-dom/client'
import { BrowserRouter } from 'react-router-dom'
import App from './App.jsx'
import './styles/index.css'

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <BrowserRouter future={{ v7_startTransition: true, v7_relativeSplatPath: true }}>
      <App />
    </BrowserRouter>
  </React.StrictMode>,
)
</file>

<file path="src/pages/DailyItinerary.jsx">
import { useState, useEffect } from 'react'
import styled from 'styled-components'
import { useTrip } from '../contexts/TripContext'

const Container = styled.div`
  max-width: 800px;
  margin: 0 auto;
`

const TripSelector = styled.div`
  margin-bottom: 1rem;
`

const DayCard = styled.div`
  background-color: white;
  border-radius: 8px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  padding: 1rem;
  margin-bottom: 1rem;
`

const ActivityCard = styled.div`
  background-color: #f8f9fa;
  border-left: 4px solid #3498db;
  padding: 0.5rem;
  margin-bottom: 0.5rem;
`

const ActivityForm = styled.form`
  background-color: white;
  border-radius: 8px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  padding: 1rem;
  margin-bottom: 1rem;
`

const ButtonGroup = styled.div`
  display: flex;
  gap: 0.5rem;
  margin-top: 1rem;
`

const Button = styled.button`
  background-color: ${props => props.$primary ? '#3498db' : '#e74c3c'};
  color: white;
  border: none;
  padding: 0.5rem 1rem;
  border-radius: 4px;
  cursor: pointer;
`

const FloatingActionButton = styled.button`
  position: fixed; bottom: 30px; right: 30px; width: 60px; height: 60px; border-radius: 50%;
  background-color: #3498db; color: white; border: none; font-size: 2rem;
  display: flex; justify-content: center; align-items: center; 
  box-shadow: 0 4px 10px rgba(0,0,0,0.2); cursor: pointer; z-index: 1000;
  transition: background-color 0.3s, transform 0.3s;
  &:hover { background-color: #2980b9; transform: scale(1.1); }
`;
const ModalBackdrop = styled.div`
  position: fixed; top: 0; left: 0; width: 100%; height: 100%;
  background-color: rgba(0, 0, 0, 0.5); display: flex; justify-content: center;
  align-items: center; z-index: 1500;
`;
const ModalContent = styled.div`
  background-color: white; padding: 2rem; border-radius: 8px;
  box-shadow: 0 5px 15px rgba(0,0,0,0.3); width: 90%; max-width: 700px; position: relative;
`;
const CloseButton = styled.button`
  position: absolute; top: 10px; right: 10px; background: transparent; border: none;
  font-size: 1.5rem; cursor: pointer; color: #888;
`;

const DailyItinerary = () => {
  const { trips, setTrips, selectedTripId, setSelectedTripId } = useTrip();
  
  const [newActivity, setNewActivity] = useState({
    id: '',
    date: '',
    time: '',
    activity: '',
    location: '',
    notes: ''
  });

  const initialActivityState = {
    id: '',
    date: '',
    time: '',
    activity: '',
    location: '',
    notes: ''
  };
  
  const [isEditing, setIsEditing] = useState(false);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [sortOrder, setSortOrder] = useState('asc'); // 預設升序
  
  const handleTripChange = (e) => {
    const tripId = e.target.value;
    setSelectedTripId(tripId);
  };
  
  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setNewActivity(prev => ({ ...prev, [name]: value }));
  };
  
  const handleSubmit = (e) => {
    e.preventDefault();
    
    if (!selectedTripId || !newActivity.date) return;
    
    setTrips(prevTrips => prevTrips.map(trip => {
      if (trip.id === selectedTripId) {
        let updatedDailyItinerary;
        if (isEditing) {
          updatedDailyItinerary = trip.dailyItinerary.map(activity => 
            activity.id === newActivity.id ? newActivity : activity
          );
        } else {
          const id = Date.now().toString();
          updatedDailyItinerary = [...(trip.dailyItinerary || []), { ...newActivity, id }];
        }
        return { ...trip, dailyItinerary: updatedDailyItinerary };
      }
      return trip;
    }));
    
    setIsEditing(false);
    setNewActivity({
      id: '',
      date: newActivity.date, // 保留當前選擇的日期
      time: '',
      activity: '',
      location: '',
      notes: ''
    });
  };
  
  const handleEdit = (activity) => {
    setNewActivity(activity);
    setIsEditing(true);
  };
  
  const handleDelete = (date, activityId) => {
    if (!selectedTripId) return;

    setTrips(prevTrips => prevTrips.map(trip => {
      if (trip.id === selectedTripId) {
        const updatedDailyItinerary = (trip.dailyItinerary || []).filter(activity => activity.id !== activityId);
        return { ...trip, dailyItinerary: updatedDailyItinerary };
      }
      return trip;
    }));
  };

  const openAddModal = () => {
    setIsEditing(false);
    setNewActivity(initialActivityState);
    setIsModalOpen(true);
  };

  const closeModal = () => {
    setIsModalOpen(false);
    setIsEditing(false);
    setNewActivity(initialActivityState);
  };

  const toggleSortOrder = () => {
    setSortOrder(prev => prev === 'asc' ? 'desc' : 'asc');
  };

  const sortActivities = (activitiesToSort) => {
    return [...activitiesToSort].sort((a, b) => {
      const dateA = new Date(a.date);
      const dateB = new Date(b.date);
      if (dateA - dateB !== 0) {
        return sortOrder === 'asc' ? dateA - dateB : dateB - dateA;
      }
      // If dates are the same, sort by time
      return sortOrder === 'asc' ? a.time.localeCompare(b.time) : b.time.localeCompare(a.time);
    });
  };
  
  // 生成日期選項
  const generateDayOptions = () => {
    if (!selectedTripId) return [];
    
    const trip = trips.find(trip => trip.id === selectedTripId);
    if (!trip) return [];
    
    const { startDate, endDate } = trip;
    const start = new Date(startDate);
    const end = new Date(endDate);
    const dayCount = Math.ceil((end - start) / (1000 * 60 * 60 * 24)) + 1;
    
    return Array.from({ length: dayCount }, (_, i) => {
      const date = new Date(start);
      date.setDate(date.getDate() + i);
      return {
        value: date.toISOString().split('T')[0],
        label: `第${i + 1}天 (${date.toLocaleDateString()})`
      };
    });
  };
  
  const dayOptions = generateDayOptions();
  
  // 獲取選定行程的行程表
  const selectedTrip = trips.find(trip => trip.id === selectedTripId);
  const selectedTripItinerary = selectedTrip ? (selectedTrip.dailyItinerary || []) : [];

  const sortedActivities = sortActivities(selectedTripItinerary);

  // Group activities by date for display
  const groupedActivities = sortedActivities.reduce((acc, activity) => {
    const date = activity.date;
    if (!acc[date]) {
      acc[date] = [];
    }
    acc[date].push(activity);
    return acc;
  }, {});

  return (
    <Container>
      <h2>每日行程</h2>
      
      <TripSelector>
        <label htmlFor="trip">選擇行程:</label>
        <select
          id="trip"
          value={selectedTripId || ''}
          onChange={handleTripChange}
        >
          <option value="">-- 請選擇行程 --</option>
          {trips.map(trip => (
            <option key={trip.id} value={trip.id}>
              {trip.name} ({trip.startDate} 至 {trip.endDate})
            </option>
          ))}
        </select>
      </TripSelector>
      
      {selectedTripId ? (
        <>
          <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '1rem' }}>
            <h3>行程安排</h3>
            <Button onClick={toggleSortOrder} $primary>
              排序：{sortOrder === 'asc' ? '日期時間 ↑' : '日期時間 ↓'}
            </Button>
          </div>
          {Object.keys(groupedActivities).length > 0 ? (
            Object.keys(groupedActivities)
              .sort((dateA, dateB) => {
                const d1 = new Date(dateA);
                const d2 = new Date(dateB);
                return sortOrder === 'asc' ? d1 - d2 : d2 - d1;
              })
              .map(date => {
                const activities = groupedActivities[date] || [];
                const dayLabel = dayOptions.find(day => day.value === date)?.label || date; // 找到對應的日期標籤
                return (
                  <DayCard key={date}>
                    <h4>{dayLabel}</h4>
                    {activities.length === 0 ? (
                      <p>尚未安排活動</p>
                    ) : (
                      activities.map(activity => (
                          <ActivityCard key={activity.id}>
                            <p><strong>{activity.time}</strong> - {activity.activity}</p>
                            {activity.location && <p>地點: {activity.location}</p>}
                            {activity.notes && <p>備註: {activity.notes}</p>}
                            <ButtonGroup>
                              <Button $primary onClick={() => handleEdit(activity)}>編輯</Button>
                              <Button onClick={() => handleDelete(activity.date, activity.id)}>刪除</Button>
                            </ButtonGroup>
                          </ActivityCard>
                        ))
                    )}
                  </DayCard>
                );
              })
          ) : (
            <p>尚未安排活動或請先設定行程的開始和結束日期</p>
          )}
        </>
      ) : (
        <p>請先選擇一個行程</p>
      )}

      <FloatingActionButton onClick={openAddModal}>+</FloatingActionButton>

      {isModalOpen && (
        <ModalBackdrop onClick={closeModal}>
          <ModalContent onClick={e => e.stopPropagation()}>
            <CloseButton onClick={closeModal}>&times;</CloseButton>
            <ActivityForm onSubmit={handleSubmit}>
              <h3>{isEditing ? '編輯活動' : '新增活動'}</h3>
              
              <div>
                <label htmlFor="date">日期</label>
                <select
                  id="date"
                  name="date"
                  value={newActivity.date}
                  onChange={handleInputChange}
                  required
                >
                  <option value="">-- 選擇日期 --</option>
                  {dayOptions.map(day => (
                    <option key={day.value} value={day.value}>
                      {day.label}
                    </option>
                  ))}
                </select>
              </div>
              
              <div>
                <label htmlFor="time">時間</label>
                <input
                  type="time"
                  id="time"
                  name="time"
                  value={newActivity.time}
                  onChange={handleInputChange}
                  required
                />
              </div>
              
              <div>
                <label htmlFor="activity">活動描述</label>
                <input
                  type="text"
                  id="activity"
                  name="activity"
                  value={newActivity.activity}
                  onChange={handleInputChange}
                  required
                />
              </div>
              
              <div>
                <label htmlFor="location">地點</label>
                <input
                  type="text"
                  id="location"
                  name="location"
                  value={newActivity.location}
                  onChange={handleInputChange}
                />
              </div>
              
              <div>
                <label htmlFor="notes">備註</label>
                <textarea
                  id="notes"
                  name="notes"
                  value={newActivity.notes}
                  onChange={handleInputChange}
                  rows="2"
                ></textarea>
              </div>
              
              <ButtonGroup>
                <Button $primary type="submit">
                  {isEditing ? '更新活動' : '新增活動'}
                </Button>
                {isEditing && (
                  <Button type="button" onClick={() => {
                    setIsEditing(false);
                    setNewActivity(initialActivityState);
                  }}>
                    取消
                  </Button>
                )}
              </ButtonGroup>
            </ActivityForm>
          </ModalContent>
        </ModalBackdrop>
      )}
    </Container>
  );
};

export default DailyItinerary;
</file>

<file path="src/pages/HotelInfo.jsx">
import { useState, useEffect } from 'react'
import styled from 'styled-components'
import { useTrip } from '../contexts/TripContext'

const Container = styled.div`
  max-width: 800px;
  margin: 0 auto;
`

const TripSelector = styled.div`
  margin-bottom: 1rem;
`

const HotelCard = styled.div`
  background-color: white;
  border-radius: 8px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  padding: 1rem;
  margin-bottom: 1rem;
`

const HotelForm = styled.form`
  background-color: white;
  border-radius: 8px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  padding: 1rem;
  margin-bottom: 1rem;
`

const ButtonGroup = styled.div`
  display: flex;
  gap: 0.5rem;
  margin-top: 1rem;
`

const Button = styled.button`
  background-color: ${props => props.$primary ? '#3498db' : '#e74c3c'};
  color: white;
  border: none;
  padding: 0.5rem 1rem;
  border-radius: 4px;
  cursor: pointer;
`

const FloatingActionButton = styled.button`
  position: fixed; bottom: 30px; right: 30px; width: 60px; height: 60px; border-radius: 50%;
  background-color: #3498db; color: white; border: none; font-size: 2rem;
  display: flex; justify-content: center; align-items: center; 
  box-shadow: 0 4px 10px rgba(0,0,0,0.2); cursor: pointer; z-index: 1000;
  transition: background-color 0.3s, transform 0.3s;
  &:hover { background-color: #2980b9; transform: scale(1.1); }
`;
const ModalBackdrop = styled.div`
  position: fixed; top: 0; left: 0; width: 100%; height: 100%;
  background-color: rgba(0, 0, 0, 0.5); display: flex; justify-content: center;
  align-items: center; z-index: 1500;
`;
const ModalContent = styled.div`
  background-color: white; padding: 2rem; border-radius: 8px;
  box-shadow: 0 5px 15px rgba(0,0,0,0.3); width: 90%; max-width: 700px; position: relative;
`;
const CloseButton = styled.button`
  position: absolute; top: 10px; right: 10px; background: transparent; border: none;
  font-size: 1.5rem; cursor: pointer; color: #888;
`;

const HotelInfo = () => {
  const { trips, setTrips, selectedTripId, setSelectedTripId } = useTrip();
  
  const [newHotel, setNewHotel] = useState({
    id: '',
    name: '',
    address: '',
    checkInDate: '',
    checkOutDate: '',
    contact: '',
    confirmationNumber: '',
    notes: '',
    price: ''
  });

  const initialHotelState = {
    id: '',
    name: '',
    address: '',
    checkInDate: '',
    checkOutDate: '',
    contact: '',
    confirmationNumber: '',
    notes: '',
    price: ''
  };
  
  const [isEditing, setIsEditing] = useState(false);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [sortOrder, setSortOrder] = useState('asc'); // 預設升序
  
  const handleTripChange = (e) => {
    const tripId = e.target.value;
    setSelectedTripId(tripId);
  };
  
  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setNewHotel(prev => ({ ...prev, [name]: value }));
  };
  
  const handleSubmit = (e) => {
    e.preventDefault();
    
    if (!selectedTripId) return;
    
    setTrips(prevTrips => prevTrips.map(trip => {
      if (trip.id === selectedTripId) {
        let updatedHotels;
        if (isEditing) {
          updatedHotels = trip.hotels.map(hotel => 
            hotel.id === newHotel.id ? newHotel : hotel
          );
        } else {
          const id = Date.now().toString();
          updatedHotels = [...(trip.hotels || []), { ...newHotel, id }];
        }
        return { ...trip, hotels: updatedHotels };
      }
      return trip;
    }));
    
    setIsEditing(false);
    setNewHotel({
      id: '',
      name: '',
      address: '',
      checkInDate: '',
      checkOutDate: '',
      contact: '',
      confirmationNumber: '',
      notes: '',
      price: ''
    });
  };
  
  const handleEdit = (hotel) => {
    setNewHotel(hotel);
    setIsEditing(true);
  };
  
  const handleDelete = (hotelId) => {
    if (!selectedTripId) return;

    setTrips(prevTrips => prevTrips.map(trip => {
      if (trip.id === selectedTripId) {
        const updatedHotels = (trip.hotels || []).filter(hotel => hotel.id !== hotelId);
        return { ...trip, hotels: updatedHotels };
      }
      return trip;
    }));
  };

  const openAddModal = () => {
    setIsEditing(false);
    setNewHotel(initialHotelState);
    setIsModalOpen(true);
  };

  const closeModal = () => {
    setIsModalOpen(false);
    setIsEditing(false);
    setNewHotel(initialHotelState);
  };

  const toggleSortOrder = () => {
    setSortOrder(prev => prev === 'asc' ? 'desc' : 'asc');
  };

  const sortHotels = (hotelsToSort) => {
    return [...hotelsToSort].sort((a, b) => {
      const dateA = new Date(a.checkInDate);
      const dateB = new Date(b.checkInDate);
      if (sortOrder === 'asc') {
        return dateA - dateB;
      } else {
        return dateB - dateA;
      }
    });
  };
  
  // 獲取選定行程的旅館資訊
  const selectedTrip = trips.find(trip => trip.id === selectedTripId);
  const selectedTripHotels = selectedTrip ? (selectedTrip.hotels || []) : [];

  const sortedHotels = sortHotels(selectedTripHotels);
  
  return (
    <Container>
      <h2>旅館資訊</h2>
      
      <TripSelector>
        <label htmlFor="trip">選擇行程:</label>
        <select
          id="trip"
          value={selectedTripId || ''}
          onChange={handleTripChange}
        >
          <option value="">-- 請選擇行程 --</option>
          {trips.map(trip => (
            <option key={trip.id} value={trip.id}>
              {trip.name} ({trip.startDate} 至 {trip.endDate})
            </option>
          ))}
        </select>
      </TripSelector>
      
      {selectedTripId ? (
        <>
          <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '1rem' }}>
            <h3>已保存的旅館資訊</h3>
            <Button onClick={toggleSortOrder} $primary>
              排序：{sortOrder === 'asc' ? '入住日期 ↑' : '入住日期 ↓'}
            </Button>
          </div>
          {sortedHotels.length === 0 ? (
            <p>尚未添加任何旅館資訊</p>
          ) : (
            sortedHotels.map(hotel => (
              <HotelCard key={hotel.id}>
                <h4>{hotel.name}</h4>
                <p><strong>地址:</strong> {hotel.address}</p>
                <p><strong>入住日期:</strong> {hotel.checkInDate}</p>
                <p><strong>退房日期:</strong> {hotel.checkOutDate}</p>
                {hotel.contact && (
                  <p><strong>聯絡方式:</strong> {hotel.contact}</p>
                )}
                {hotel.confirmationNumber && (
                  <p><strong>訂房確認號碼:</strong> {hotel.confirmationNumber}</p>
                )}
                {hotel.price && (
                  <p><strong>價格:</strong> ${hotel.price}</p>
                )}
                {hotel.notes && (
                  <p><strong>備註:</strong> {hotel.notes}</p>
                )}
                <ButtonGroup>
                  <Button $primary onClick={() => handleEdit(hotel)}>編輯</Button>
                  <Button onClick={() => handleDelete(hotel.id)}>刪除</Button>
                </ButtonGroup>
              </HotelCard>
            ))
          )}
        </>
      ) : (
        <p>請先選擇一個行程</p>
      )}

      <FloatingActionButton onClick={openAddModal}>+</FloatingActionButton>

      {isModalOpen && (
        <ModalBackdrop onClick={closeModal}>
          <ModalContent onClick={e => e.stopPropagation()}>
            <CloseButton onClick={closeModal}>&times;</CloseButton>
            <HotelForm onSubmit={handleSubmit}>
              <h3>{isEditing ? '編輯旅館資訊' : '新增旅館資訊'}</h3>
              
              <div>
                <label htmlFor="name">旅館名稱</label>
                <input
                  type="text"
                  id="name"
                  name="name"
                  value={newHotel.name}
                  onChange={handleInputChange}
                  required
                />
              </div>
              
              <div>
                <label htmlFor="address">地址</label>
                <input
                  type="text"
                  id="address"
                  name="address"
                  value={newHotel.address}
                  onChange={handleInputChange}
                  required
                />
              </div>
              
              <div>
                <label htmlFor="checkInDate">入住日期</label>
                <input
                  type="date"
                  id="checkInDate"
                  name="checkInDate"
                  value={newHotel.checkInDate}
                  onChange={handleInputChange}
                  required
                />
              </div>
              
              <div>
                <label htmlFor="checkOutDate">退房日期</label>
                <input
                  type="date"
                  id="checkOutDate"
                  name="checkOutDate"
                  value={newHotel.checkOutDate}
                  onChange={handleInputChange}
                  required
                />
              </div>
              
              <div>
                <label htmlFor="contact">聯絡方式</label>
                <input
                  type="text"
                  id="contact"
                  name="contact"
                  value={newHotel.contact}
                  onChange={handleInputChange}
                />
              </div>
              
              <div>
                <label htmlFor="confirmationNumber">訂房確認號碼</label>
                <input
                  type="text"
                  id="confirmationNumber"
                  name="confirmationNumber"
                  value={newHotel.confirmationNumber}
                  onChange={handleInputChange}
                />
              </div>
              
              <div>
                <label htmlFor="price">價格</label>
                <input
                  type="number"
                  id="price"
                  name="price"
                  value={newHotel.price}
                  onChange={handleInputChange}
                />
              </div>
              
              <div>
                <label htmlFor="notes">備註</label>
                <textarea
                  id="notes"
                  name="notes"
                  value={newHotel.notes}
                  onChange={handleInputChange}
                  rows="4"
                ></textarea>
              </div>
              
              <ButtonGroup>
                <Button $primary type="submit">
                  {isEditing ? '更新旅館資訊' : '新增旅館資訊'}
                </Button>
                {isEditing && (
                  <Button type="button" onClick={() => {
                    setIsEditing(false);
                    setNewHotel(initialHotelState);
                  }}>
                    取消
                  </Button>
                )}
              </ButtonGroup>
            </HotelForm>
          </ModalContent>
        </ModalBackdrop>
      )}
    </Container>
  );
};

export default HotelInfo;
</file>

<file path="src/pages/Settings.jsx">
import React, { useState, useEffect } from 'react';
import styled from 'styled-components';
import { useTrip } from '../contexts/TripContext';

// --- Styled Components ---
const Container = styled.div`
  max-width: 800px;
  margin: 0 auto;
`;

const Card = styled.div`
  background-color: white;
  border-radius: 8px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  padding: 1.5rem;
  margin-bottom: 1.5rem;
`;

const SettingItem = styled.div`
  display: flex;
  align-items: center;
  padding: 0.75rem 0;
  border-bottom: 1px solid #eee;
  
  &:last-child {
    border-bottom: none;
  }
`;

const PageName = styled.span`
  flex: 1;
`;

const ToggleButton = styled.button`
  background-color: ${props => props.$active ? '#1abc9c' : '#95a5a6'};
  color: white;
  border: none;
  padding: 0.5rem 1rem;
  border-radius: 4px;
  cursor: ${props => props.$disabled ? 'not-allowed' : 'pointer'};
  opacity: ${props => props.$disabled ? 0.7 : 1};
`;

const Button = styled.button`
  background-color: #3498db;
  color: white;
  border: none;
  padding: 0.5rem 1rem;
  border-radius: 4px;
  cursor: pointer;
  margin-top: 1rem;
  margin-right: 0.5rem;
`;

const SliderContainer = styled.div`
  flex: 2;
  display: flex;
  align-items: center;
  gap: 1rem;
`;

const Slider = styled.input`
  flex: 1;
  -webkit-appearance: none;
  appearance: none;
  width: 100%;
  height: 8px;
  background: #ddd;
  border-radius: 5px;
  outline: none;
  opacity: 0.7;
  transition: opacity .2s;

  &:hover {
    opacity: 1;
  }

  &::-webkit-slider-thumb {
    -webkit-appearance: none;
    appearance: none;
    width: 20px;
    height: 20px;
    background: #3498db;
    cursor: pointer;
    border-radius: 50%;
  }

  &::-moz-range-thumb {
    width: 20px;
    height: 20px;
    background: #3498db;
    cursor: pointer;
    border-radius: 50%;
  }
`;

const FontSizeValue = styled.span`
  font-weight: bold;
  min-width: 40px;
  text-align: right;
`;

const StorageCard = styled(Card)``;
const StorageHeader = styled.div` display: flex; align-items: center; margin-bottom: 1rem; `;
const StorageIcon = styled.div`
  width: 24px; height: 24px; margin-right: 0.5rem; display: flex; align-items: center;
  justify-content: center; border-radius: 50%;
  background-color: ${props => {
    if (props.$usage < 50) return '#2ecc71';
    if (props.$usage < 80) return '#f39c12';
    return '#e74c3c';
  }};
  color: white; font-size: 12px; font-weight: bold;
`;
const ProgressBar = styled.div` width: 100%; height: 20px; background-color: #ecf0f1; border-radius: 10px; overflow: hidden; margin-bottom: 0.5rem; `;
const ProgressFill = styled.div`
  height: 100%;
  background: linear-gradient(90deg, 
    ${props => {
      if (props.$usage < 50) return '#2ecc71, #27ae60';
      if (props.$usage < 80) return '#f39c12, #e67e22';
      return '#e74c3c, #c0392b';
    }}
  );
  width: ${props => props.$usage}%;
  transition: width 0.3s ease;
`;
const StorageDetails = styled.div` display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 0.5rem; margin-top: 1rem; font-size: 0.9rem; `;
const StorageItem = styled.div` display: flex; justify-content: space-between; padding: 0.25rem 0; border-bottom: 1px solid #eee; &:last-child { border-bottom: none; } `;
const RefreshButton = styled.button` background-color: #95a5a6; color: white; border: none; padding: 0.25rem 0.5rem; border-radius: 4px; cursor: pointer; font-size: 0.8rem; margin-left: auto; `;

// Color theme selection styled components
const PaletteGrid = styled.div`
  display: grid;
  /* single column on desktop to avoid side-by-side overlap */
  grid-template-columns: 1fr;
  gap: 0.75rem;
  margin-top: 0.75rem;
`;

const PaletteCard = styled.div`
  border: 1px solid #eee;
  border-radius: 8px;
  padding: 0.6rem;
  display: grid;
  grid-template-columns: 1fr minmax(160px, 220px); /* content | actions */
  gap: 12px;
  align-items: center;
  cursor: pointer;
  min-height: 56px;
  transition: box-shadow 0.15s ease, transform 0.08s ease;
  &:hover { box-shadow: 0 2px 8px rgba(0,0,0,0.08); transform: translateY(-2px); }
  @media (max-width: 600px) {
    display: flex;
    flex-direction: column;
    align-items: stretch;
    gap: 8px;
  }
`;

const SwatchRow = styled.div`
  display: flex;
  gap: 4px;
  align-items: center;
  flex-shrink: 0;
`;

const Swatch = styled.div`
  width: 28px;
  height: 28px;
  border-radius: 4px;
  border: 1px solid rgba(0,0,0,0.08);
  flex-shrink: 0;
`;

const PaletteLabel = styled.div`
  font-size: 0.95rem;
  color: #333;
  margin-left: 0.75rem;
  white-space: nowrap; /* prevent vertical wrapping */
  overflow: hidden;
  text-overflow: ellipsis;
`;

const SelectedMark = styled.div`
  width: 20px;
  height: 20px;
  border-radius: 50%;
  background-color: #1abc9c;
  color: white;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 12px;
`;

// Inline button for palette actions (no extra top margin)
const InlineButton = styled(Button)`
  margin-top: 0;
  padding: 0.35rem 0.6rem;
  min-width: 64px;
  font-size: 0.9rem;
`;

// Action group to align buttons in the same column
const ActionGroup = styled.div`
  display: flex;
  gap: 0.5rem;
  align-items: center;
  justify-content: flex-end;
  min-width: 220px; /* fixed column width for alignment */
  flex-shrink: 0;
  @media (max-width: 600px) {
    /* on small screens, allow actions to flow and align right below content */
    min-width: auto;
    justify-content: flex-end;
    width: 100%;
    padding-left: 6px;
  }
`;

const availablePages = [
  { id: 'tripManagement', name: '行程管理', path: '/', default: true },
  { id: 'dailyItinerary', name: '每日行程', path: '/daily', default: true },
  { id: 'hotelInfo', name: '旅館資訊', path: '/hotel', default: true },
  { id: 'travelTips', name: '旅遊須知', path: '/tips', default: true },
  { id: 'packingList', name: '物品清單', path: '/packing', default: true },
  { id: 'travelNotes', name: '旅遊筆記', path: '/notes', default: true },
  { id: 'expenseTracker', name: '消費追蹤', path: '/expenses', default: true },
  { id: 'notes', name: '記事本', path: '/notebook', default: true },
  { id: 'dataManagement', name: '數據管理', path: '/data', default: true },
  { id: 'settings', name: '設定', path: '/settings', default: true }
];

const fontSettingConfig = {
  h2: { label: '主要標題', min: 20, max: 32 },
  h4: { label: '卡片標題', min: 16, max: 26 },
  destination: { label: '目的地文字', min: 16, max: 28 },
  body: { label: '一般內文', min: 12, max: 20 },
  small: { label: '小型文字', min: 10, max: 16 },
  label: { label: '表單標籤', min: 12, max: 18 },
};

const defaultFontSizes = {
  h2: 24, h4: 18, destination: 20, body: 14, small: 12, label: 14,
};

const Settings = () => {
  const { fontSizes, setFontSizes, previewThemeFn, applyThemeFn, clearThemeFn, appliedTheme } = useTrip();

  // color palettes
  const colorPalettes = [
    { id: 'pink', name: '粉紅色系', colors: ['#FCF9EA','#BADFDB','#FFA4A4','#FFBDBD'] },
    { id: 'violet', name: '紫羅蘭', colors: ['#4E56C0','#9B5DE0','#D78FEE','#FDCFFA'] },
    { id: 'lightPurple', name: '淺紫調', colors: ['#FFF2E0','#C0C9EE','#A2AADB','#898AC4'] },
    { id: 'sunset', name: '強烈晚霞', colors: ['#FFB200','#EB5B00','#D91656','#640D5F'] },
    { id: 'matureOrange', name: '成熟橘', colors: ['#32012F','#524C42','#E2DFD0','#F97300'] }
  ];

  const [colorTheme, setColorTheme] = useState(appliedTheme ? appliedTheme.id : null);

  useEffect(() => {
    setColorTheme(appliedTheme ? appliedTheme.id : null);
  }, [appliedTheme]);

  const handlePreview = (p) => {
    previewThemeFn(p);
  };

  const handleApply = (p) => {
    applyThemeFn(p);
    setColorTheme(p.id);
  };

  const handleClear = () => {
    clearThemeFn();
    setColorTheme(null);
  };

  const [pageSettings, setPageSettings] = useState(() => {
    const savedSettings = localStorage.getItem('pageSettings');
    if (savedSettings) {
      return JSON.parse(savedSettings);
    } else {
      const defaultSettings = {};
      availablePages.forEach(page => {
        defaultSettings[page.id] = page.default;
      });
      return defaultSettings;
    }
  });
  
  const [tempSettings, setTempSettings] = useState({...pageSettings});
  
  const [storageInfo, setStorageInfo] = useState({
    used: 0,
    total: 5 * 1024 * 1024, // 5MB
    details: {}
  });

  useEffect(() => {
    setTempSettings({...pageSettings});
  }, [pageSettings]);
  
  const calculateStorageUsage = () => {
    const storageKeys = ['trips', 'hotels', 'itineraries', 'packingLists', 'travelNotes', 'travelTips', 'expenses', 'notes', 'pageSettings', 'fontSizes'];
    let totalUsed = 0;
    const details = {};
    storageKeys.forEach(key => {
      const data = localStorage.getItem(key);
      if (data) {
        const size = new Blob([data]).size;
        details[key] = size;
        totalUsed += size;
      }
    });
    setStorageInfo({ used: totalUsed, total: 5 * 1024 * 1024, details });
  };
  
  useEffect(() => {
    calculateStorageUsage();
  }, []);
  
  const formatFileSize = (bytes) => {
    if (bytes === 0) return '0 B';
    const k = 1024;
    const sizes = ['B', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  };
  
  const getUsagePercentage = () => {
    return Math.round((storageInfo.used / storageInfo.total) * 100);
  };
  
  const getChineseKeyName = (key) => {
    const keyMap = { 'trips': '行程資料', 'hotels': '旅館資訊', 'itineraries': '每日行程', 'packingLists': '物品清單', 'travelNotes': '旅遊筆記', 'travelTips': '旅遊須知', 'expenses': '消費追蹤', 'notes': '記事本', 'pageSettings': '頁面設定', 'fontSizes': '字體設定' };
    return keyMap[key] || key;
  };

  const handlePageToggle = (pageId) => {
    if (pageId === 'tripManagement' || pageId === 'settings') return;
    setTempSettings(prev => ({ ...prev, [pageId]: !prev[pageId] }));
  };
  
  const saveSettings = () => {
    localStorage.setItem('pageSettings', JSON.stringify(tempSettings));
    setPageSettings(tempSettings);
    window.dispatchEvent(new Event('storage'));
    calculateStorageUsage();
    alert('設定已保存！部分設定可能需要刷新頁面才能生效。');
  };

  const resetToDefaults = () => {
    const defaultSettings = {};
    availablePages.forEach(page => { defaultSettings[page.id] = page.default; });
    setTempSettings(defaultSettings);
  };

  const handleFontSizeChange = (e) => {
    const { name, value } = e.target;
    setFontSizes(prevSizes => ({ ...prevSizes, [name]: parseInt(value, 10) }));
  };

  const resetFontSizes = () => {
    setFontSizes(defaultFontSizes);
  };

  return (
    <Container>
      <h2>應用設定</h2>

      <Card>
        <h3>外觀設定</h3>
        {Object.entries(fontSettingConfig).map(([key, config]) => (
          <SettingItem key={key}>
            <PageName>{config.label}</PageName>
            <SliderContainer>
              <Slider 
                type="range" 
                min={config.min}
                max={config.max}
                name={key}
                value={fontSizes[key] || config.min}
                onChange={handleFontSizeChange}
              />
              <FontSizeValue>{fontSizes[key] || config.min}px</FontSizeValue>
            </SliderContainer>
          </SettingItem>
        ))}
        <div style={{ display: 'flex', justifyContent: 'flex-start' }}>
            <Button onClick={resetFontSizes} style={{backgroundColor: '#95a5a6'}}>重置字體</Button>
        </div>

        <div style={{ marginTop: '1rem' }}>
          <h4>介面色調</h4>
          <p>選擇一組配色，系統會儲存你的選擇以供跨頁面使用：</p>
          <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '0.5rem' }}>
            <div />
            <div>
              <Button onClick={handleClear} style={{ backgroundColor: '#e74c3c' }}>清除色調</Button>
            </div>
          </div>
          <PaletteGrid>
            {colorPalettes.map(p => (
              <PaletteCard key={p.id} style={{ borderColor: colorTheme === p.id ? '#1abc9c' : undefined }}>
                <div style={{ display: 'flex', alignItems: 'center' }}>
                  <SwatchRow>
                    {p.colors.map((c, idx) => <Swatch key={idx} style={{ backgroundColor: c }} />)}
                  </SwatchRow>
                  <PaletteLabel>{p.name}</PaletteLabel>
                </div>
                <ActionGroup>
                  <InlineButton onClick={() => handlePreview(p)} style={{ backgroundColor: '#95a5a6' }}>預覽</InlineButton>
                  <InlineButton onClick={() => handleApply(p)}>套用</InlineButton>
                  {colorTheme === p.id ? <SelectedMark>✓</SelectedMark> : <div style={{ width:20 }} />}
                </ActionGroup>
              </PaletteCard>
            ))}
          </PaletteGrid>
        </div>
      </Card>

      <StorageCard>
        <StorageHeader>
          <StorageIcon $usage={getUsagePercentage()}>
            {getUsagePercentage() < 50 ? '✓' : getUsagePercentage() < 80 ? '!' : '⚠'}
          </StorageIcon>
          <h3 style={{ margin: 0, flex: 1 }}>儲存容量使用情況</h3>
          <RefreshButton onClick={calculateStorageUsage}>🔄 刷新</RefreshButton>
        </StorageHeader>
        <ProgressBar><ProgressFill $usage={getUsagePercentage()} /></ProgressBar>
        <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: '0.5rem' }}>
          <span>已使用: {formatFileSize(storageInfo.used)}</span>
          <span>總容量: {formatFileSize(storageInfo.total)} ({getUsagePercentage()}%)</span>
        </div>
        <StorageDetails>
          {Object.entries(storageInfo.details).filter(([, size]) => size > 0).sort(([,a], [,b]) => b - a).map(([key, size]) => (
              <StorageItem key={key}><span>{getChineseKeyName(key)}</span><span>{formatFileSize(size)}</span></StorageItem>
          ))}
        </StorageDetails>
      </StorageCard>
      
      <Card>
        <h3>頁面顯示設定</h3>
        <p>選擇要在導航欄中顯示的頁面：</p>
        {availablePages.map(page => (
          <SettingItem key={page.id}>
            <PageName>
              {page.name}
              {(page.id === 'tripManagement' || page.id === 'settings') && <span style={{ fontSize: '0.8rem', color: '#666', marginLeft: '0.5rem' }}>(必須顯示)</span>}
            </PageName>
            <ToggleButton $active={tempSettings[page.id]} $disabled={page.id === 'tripManagement' || page.id === 'settings'} onClick={() => handlePageToggle(page.id)}>
              {tempSettings[page.id] ? '顯示' : '隱藏'}
            </ToggleButton>
          </SettingItem>
        ))}
        <div style={{ display: 'flex', justifyContent: 'flex-start' }}>
          <Button onClick={saveSettings}>保存頁面設定</Button>
          <Button onClick={resetToDefaults}>重置頁面</Button>
        </div>
      </Card>
    </Container>
  );
};

export default Settings;
</file>

<file path="vite.config.js">
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [react()],
  server: {
    port: 5174
  }
})
</file>

<file path="src/App.jsx">
import { Routes, Route, NavLink } from 'react-router-dom';
import styled, { createGlobalStyle } from 'styled-components';
import { useState, useEffect } from 'react';
import { useTrip, TripProvider } from './contexts/TripContext';

// 頁面組件
import TripManagement from './pages/TripManagement';
import DailyItinerary from './pages/DailyItinerary';
import HotelInfo from './pages/HotelInfo';
import TravelTips from './pages/TravelTips';
import PackingList from './pages/PackingList';
import TravelNotes from './pages/TravelNotes';
import DataManagement from './pages/DataManagement';
import ExpenseTracker from './pages/ExpenseTracker';
import Notes from './pages/Notes';
import Settings from './pages/Settings';

// --- 新增：全域字體樣式注入器 ---
const GlobalFontStyles = createGlobalStyle`
  :root {
    --font-size-h2: ${props => props.fontSizes.h2}px;
    --font-size-h4: ${props => props.fontSizes.h4}px;
    --font-size-destination: ${props => props.fontSizes.destination}px;
    --font-size-body: ${props => props.fontSizes.body}px;
    --font-size-small: ${props => props.fontSizes.small}px;
    --font-size-label: ${props => props.fontSizes.label}px;
  }
`;

// 這個輔助元件會從 Context 獲取字體設定，並傳遞給 GlobalFontStyles
const FontStyleInjector = () => {
  const { fontSizes } = useTrip();
  return <GlobalFontStyles fontSizes={fontSizes} />;
};

// --- 原有的樣式組件 ---
const AppContainer = styled.div`
  display: flex;
  flex-direction: column;
  min-height: 100vh;
`;

const Header = styled.header`
  background-color: var(--theme-2, #2c3e50);
  color: var(--theme-4, white);
  padding: 1rem;
  text-align: center;
`;

const MainContent = styled.main`
  flex: 1;
  padding: 1rem;
  background-color: var(--theme-1, #f5f5f5);
  
  @media (max-width: 768px) {
    padding: 0.8rem 0.5rem;
  }
`;

const Navigation = styled.nav`
  background-color: var(--theme-3, #34495e);
  padding: 0.5rem;
  display: flex;
  justify-content: space-around;
  flex-wrap: wrap;
  
  @media (max-width: 768px) {
    padding: 0.3rem;
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 0.5rem;
  }
  
  @media (max-width: 480px) {
    grid-template-columns: repeat(2, 1fr);
    gap: 0.5rem;
  }
`;

const NavItem = styled(NavLink)`
  color: var(--theme-4, white);
  text-decoration: none;
  padding: 0.5rem;
  border-radius: 4px;
  
  &.active {
    background-color: var(--theme-2, #1abc9c);
  }
  
  &:hover {
    background-color: var(--theme-2, #3498db);
  }
  
  @media (max-width: 768px) {
    font-size: 0.9rem;
    padding: 0.4rem;
    text-align: center;
    display: block;
  }
  
  @media (max-width: 480px) {
    text-align: center;
    display: block;
  }
`;

const Footer = styled.footer`
  background-color: #2c3e50;
  color: white;
  text-align: center;
  padding: 1rem;
`;

const availablePages = [
  { id: 'tripManagement', name: '行程管理', path: '/', component: TripManagement, default: true },
  { id: 'dailyItinerary', name: '每日行程', path: '/daily', component: DailyItinerary, default: true },
  { id: 'hotelInfo', name: '旅館資訊', path: '/hotel', component: HotelInfo, default: true },
  { id: 'travelTips', name: '旅遊須知', path: '/tips', component: TravelTips, default: true },
  { id: 'packingList', name: '物品清單', path: '/packing', component: PackingList, default: true },
  { id: 'travelNotes', name: '旅遊筆記', path: '/notes', component: TravelNotes, default: true },
  { id: 'expenseTracker', name: '消費追蹤', path: '/expenses', component: ExpenseTracker, default: true },
  { id: 'notes', name: '記事本', path: '/notebook', component: Notes, default: true },
  { id: 'dataManagement', name: '數據管理', path: '/data', component: DataManagement, default: true },
  { id: 'settings', name: '設定', path: '/settings', component: Settings, default: true }
];

function App() {
  const [pageSettings, setPageSettings] = useState(() => {
    const savedSettings = localStorage.getItem('pageSettings');
    if (savedSettings) {
      return JSON.parse(savedSettings);
    } else {
      const defaultSettings = {};
      availablePages.forEach(page => {
        defaultSettings[page.id] = page.default;
      });
      return defaultSettings;
    }
  });

  useEffect(() => {
    const handleStorageChange = () => {
      const savedSettings = localStorage.getItem('pageSettings');
      if (savedSettings) {
        setPageSettings(JSON.parse(savedSettings));
      }
    };

    window.addEventListener('storage', handleStorageChange);
    return () => window.removeEventListener('storage', handleStorageChange);
  }, []);

  return (
    <TripProvider>
      <FontStyleInjector /> {/* 在這裡注入全域字體樣式 */}
      <AppContainer>
        <Header>
          <h1>旅遊應用程序 v1.2Ai</h1>
        </Header>
        
        <Navigation>
          {availablePages.map(page => (
            pageSettings[page.id] && (
              <NavItem key={page.id} to={page.path} end={page.path === '/'}>
                {page.name}
              </NavItem>
            )
          ))}
        </Navigation>
        
        <MainContent>
          <Routes>
            {availablePages.map(page => (
              <Route key={page.id} path={page.path} element={<page.component />} />
            ))}
          </Routes>
        </MainContent>
        
        <Footer>
          <p>&copy; {new Date().getFullYear()} 旅遊應用程序 v1.1Ai</p>
        </Footer>
      </AppContainer>
    </TripProvider>
  );
}

export default App;
</file>

<file path="src/pages/DataManagement.jsx">
import { useState, useEffect } from 'react';
import styled from 'styled-components';
import { useTrip } from '../contexts/TripContext';

// 將 pdfMake 變數移到 Promise 外部，並初始化為 null
let pdfMakeInstance = null;

// 單獨處理PDF相關的導入，使用Promise確保順序正確
const pdfMakeReady = new Promise((resolve, reject) => {
  try {
    // 1. 載入 pdfmake 主模組
    import('pdfmake/build/pdfmake').then(module => {
      // 嘗試多種可能的方式獲取pdfMake實例
      if (module.default) {
        pdfMakeInstance = module.default;
        console.log('pdfmake 從 module.default 載入完成');
      } else if (module.pdfMake) {
        pdfMakeInstance = module.pdfMake;
        console.log('pdfmake 從 module.pdfMake 載入完成');
      } else if (window && window.pdfMake) {
        pdfMakeInstance = window.pdfMake;
        console.log('pdfmake 從 window.pdfMake 載入完成');
      } else {
        // 遍歷模組尋找可能的pdfMake對象
        for (const key in module) {
          if (module[key] && typeof module[key] === 'object' && module[key].createPdf) {
            pdfMakeInstance = module[key];
            console.log(`pdfmake 從 module[${key}] 載入完成`);
            break;
          }
        }
      }

      if (!pdfMakeInstance) {
        throw new Error("pdfmake主模組載入失敗，無法找到有效的pdfMake對象");
      }

      // 2. 主模組載入成功後，載入字體模組
      return import('pdfmake/build/vfs_fonts');
    }).then(module => {
      // 確保 pdfMakeInstance 已載入
      if (!pdfMakeInstance) {
        console.error('pdfMakeInstance 在字體載入後為空');
        throw new Error('pdfMake物件初始化失敗');
      }

      // 嘗試從 vfs_fonts 模組中直接獲取 vfs
      // 根據 pdfmake 的打包方式，vfs 可能在 module.pdfMake.vfs 或 module.default.pdfMake.vfs
      if (module && module.pdfMake && module.pdfMake.vfs) {
        pdfMakeInstance.vfs = module.pdfMake.vfs;
        console.log('pdfMake vfs 從 module.pdfMake.vfs 載入並註冊完成');
      } else if (module && module.default && module.default.pdfMake && module.default.pdfMake.vfs) {
        pdfMakeInstance.vfs = module.default.pdfMake.vfs;
        console.log('pdfMake vfs 從 module.default.pdfMake.vfs 載入並註冊完成');
      } else {
        console.warn('無法找到有效的vfs字體路徑，將使用默認字體。');
        // 設置一個空的vfs對象，讓pdfMake使用默認字體
        pdfMakeInstance.vfs = pdfMakeInstance.vfs || {};
      }

      // 定義字體
      // 注意：如果需要顯示中文字符，您需要在此處添加中文字體配置
      pdfMakeInstance.fonts = {
        Roboto: {
          normal: 'Roboto-Regular.ttf',
          bold: 'Roboto-Medium.ttf',
          italics: 'Roboto-Italics.ttf',
          bolditalics: 'Roboto-MediumItalics.ttf'
        }
      };
      resolve(pdfMakeInstance);
    }).catch(err => {
      console.error('pdfMake或字體載入過程中出錯 (來自 Promise 鏈):', err);
      reject(err);
    });
  } catch (error) {
    console.error('動態導入pdfMake流程啟動失敗 (來自 Try/Catch):', error);
    reject(error);
  }
});


const Container = styled.div`
  max-width: 800px;
  margin: 0 auto;
`;

const Card = styled.div`
  background-color: white;
  border-radius: 8px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  padding: 1rem;
  margin-bottom: 1rem;
`;

const ButtonGroup = styled.div`
  display: flex;
  gap: 1rem; /* 增加按鈕間距以獲得更好的視覺效果 */
  margin-top: 1rem;
  align-items: center; /* 垂直居中對齊 */
  flex-wrap: wrap; /* 當空間不足時允許按鈕換行 */
`;

const Button = styled.button`
  background-color: #3498db; /* 主色調 */
  color: white;
  border: none;
  padding: 0.75rem 1.5rem; /* 調整 padding 使按鈕大小更合適 */
  border-radius: 4px;
  cursor: pointer;
  min-width: 180px; /* 設置統一的最小寬度，確保大小一致 */
  text-align: center;
  font-size: 16px;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  white-space: nowrap;

  &:hover {
    opacity: 0.9;
  }
`;

// 新增警告文字的 styled-component
const WarningText = styled.p`
  color: red;
  font-weight: bold;
  margin-bottom: 1rem; /* 與按鈕組的間距 */
  text-align: center; /* 文字居中 */
`;


const DataManagement = () => {
  const { trips } = useTrip();

  // 從localStorage獲取所有數據
  const getAllData = () => {
    const data = {
      trips: trips, // trips 從 context 獲取，可能不是最新的，如果其他地方也修改localStorage中的trips
      hotels: JSON.parse(localStorage.getItem('hotels') || '{}'),
      itineraries: JSON.parse(localStorage.getItem('itineraries') || '{}'),
      packingLists: JSON.parse(localStorage.getItem('packingLists') || '{}'),
      travelNotes: JSON.parse(localStorage.getItem('travelNotes') || '{}'),
      travelTips: JSON.parse(localStorage.getItem('travelTips') || '{}'),
    };
     // 如果 trips 也主要通過 localStorage 管理，可以考慮也從 localStorage 讀取以確保一致性
     const storedTrips = localStorage.getItem('trips');
     if (storedTrips) {
         data.trips = JSON.parse(storedTrips);
     }
    return data;
  };

  // 匯出所有數據
  const exportAllData = () => {
    const allData = getAllData();
    const dataStr = JSON.stringify(allData, null, 2);
    const dataUri = 'data:application/json;charset=utf-8,'+ encodeURIComponent(dataStr);

    const exportFileDefaultName = `travel_app_data_${new Date().toISOString().slice(0, 10)}.json`;

    const linkElement = document.createElement('a');
    linkElement.setAttribute('href', dataUri);
    linkElement.setAttribute('download', exportFileDefaultName);
    linkElement.click();
  };

  // Helper: unique array by id (keep existing first)
  const uniqueById = (existing = [], incoming = []) => {
    const map = new Map();
    existing.forEach(item => { if (item && item.id) map.set(item.id, item); else if (item) map.set(JSON.stringify(item), item); });
    incoming.forEach(item => { if (item && item.id) { if (!map.has(item.id)) map.set(item.id, item); } else if (item) { const k = JSON.stringify(item); if (!map.has(k)) map.set(k, item); } });
    return Array.from(map.values());
  };

  // 匯出分組（按 trip 分類）- 會把所有 page 的資料按照 tripId 分組，並將全域資料放入 unassigned
  const exportAllDataGrouped = () => {
    const meta = { version: 1, exportedAt: new Date().toISOString(), appVersion: 'v1.1' };

    const storedTrips = JSON.parse(localStorage.getItem('trips') || '[]');
    const expenses = JSON.parse(localStorage.getItem('expenses') || '{}');
    const packingLists = JSON.parse(localStorage.getItem('packingLists') || '{}');
    const travelNotes = JSON.parse(localStorage.getItem('travelNotes') || '{}');
    const travelTips = JSON.parse(localStorage.getItem('travelTips') || '{}');
    const hotels = JSON.parse(localStorage.getItem('hotels') || '{}');
    const itineraries = JSON.parse(localStorage.getItem('itineraries') || '{}');
    const notes = JSON.parse(localStorage.getItem('notes') || '[]');
    const savedCustomCurrencyPairs = JSON.parse(localStorage.getItem('savedCustomCurrencyPairs') || '[]');
    const lastExchangeRates = JSON.parse(localStorage.getItem('lastExchangeRates') || 'null');
    const pageSettings = JSON.parse(localStorage.getItem('pageSettings') || '{}');
    const fontSizes = JSON.parse(localStorage.getItem('fontSizes') || '{}');

    const byTripId = {};
    // initialize from trips
    (storedTrips || []).forEach(trip => {
      byTripId[trip.id] = {
        trip,
        expenses: expenses[trip.id] || [],
        packingLists: packingLists[trip.id] || [],
        travelNotes: travelNotes[trip.id] || [],
        travelTips: travelTips[trip.id] || [],
        hotels: hotels[trip.id] || [],
        itineraries: itineraries[trip.id] || []
      };
    });

    // include any tripIds present in other keys but not listed in trips
    Object.keys(expenses || {}).forEach(tripId => {
      if (!byTripId[tripId]) {
        byTripId[tripId] = {
          trip: null,
          expenses: expenses[tripId] || [],
          packingLists: packingLists[tripId] || [],
          travelNotes: travelNotes[tripId] || [],
          travelTips: travelTips[tripId] || [],
          hotels: hotels[tripId] || [],
          itineraries: itineraries[tripId] || []
        };
      }
    });

    const payload = {
      meta,
      trips: storedTrips,
      groupedData: {
        byTripId,
        unassigned: {
          notes,
          pageSettings,
          fontSizes,
          savedCustomCurrencyPairs,
          lastExchangeRates
        }
      }
    };

    const text = JSON.stringify(payload, null, 2);
    const blob = new Blob([text], { type: 'text/plain;charset=utf-8' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');

    // filename by date range
    let fileNameSuffix = 'all_trips';
    if (storedTrips && storedTrips.length === 1) {
      const t = storedTrips[0];
      fileNameSuffix = `${(t.name || t.id).replace(/[\\/:*?"<>|]/g,'_')}_${t.startDate || ''}`;
    } else if (storedTrips && storedTrips.length > 1) {
      const sorted = [...storedTrips].sort((a,b) => (a.startDate || '').localeCompare(b.startDate || ''));
      if (sorted[0] && sorted[sorted.length-1]) {
        fileNameSuffix = `${sorted[0].startDate || ''}_to_${sorted[sorted.length-1].endDate || ''}`;
      }
    }

    a.href = url;
    a.download = `AiTravel_Grouped_${fileNameSuffix}_${new Date().toISOString().split('T')[0]}.txt`;
    document.body.appendChild(a);
    a.click();
    a.remove();
    URL.revokeObjectURL(url);
  };

  // 匯入已分組的資料並合併到現有 localStorage（保留現有，避免重複 id）
  const importAllDataGrouped = (event) => {
    const file = event.target.files?.[0];
    if (!file) return;
    const reader = new FileReader();
    reader.onload = (e) => {
      try {
        const parsed = JSON.parse(e.target.result);
        if (!parsed || !parsed.groupedData) {
          alert('匯入檔案不符合預期格式 (缺少 groupedData)。');
          return;
        }

        const importedTrips = parsed.trips || [];
        const byTripId = parsed.groupedData.byTripId || {};
        const unassigned = parsed.groupedData.unassigned || {};

        // Merge trips (array)
        const existingTrips = JSON.parse(localStorage.getItem('trips') || '[]');
        const tripMap = new Map();
        existingTrips.forEach(t => tripMap.set(t.id, t));
        importedTrips.forEach(t => { if (!tripMap.has(t.id)) tripMap.set(t.id, t); });
        const mergedTrips = Array.from(tripMap.values());
        localStorage.setItem('trips', JSON.stringify(mergedTrips));

        // Keys that are per-trip (object mapping tripId -> array)
        const perTripKeys = ['expenses','packingLists','travelNotes','travelTips','hotels','itineraries'];
        perTripKeys.forEach(key => {
          const existing = JSON.parse(localStorage.getItem(key) || '{}');
          const result = { ...existing };
          Object.keys(byTripId).forEach(tripId => {
            const incomingList = (byTripId[tripId] && byTripId[tripId][key]) || [];
            const baseList = result[tripId] ? result[tripId] : [];
            result[tripId] = uniqueById(baseList, incomingList);
          });
          localStorage.setItem(key, JSON.stringify(result));
        });

        // Merge savedCustomCurrencyPairs (array, unique by toCode)
        const existingPairs = JSON.parse(localStorage.getItem('savedCustomCurrencyPairs') || '[]');
        const importedPairs = unassigned.savedCustomCurrencyPairs || [];
        const pairMap = new Map();
        existingPairs.forEach(p => pairMap.set(p.toCode, p));
        importedPairs.forEach(p => { if (!pairMap.has(p.toCode)) pairMap.set(p.toCode, p); });
        const mergedPairs = Array.from(pairMap.values());
        localStorage.setItem('savedCustomCurrencyPairs', JSON.stringify(mergedPairs));

        // notes (array) - unique by id
        const existingNotes = JSON.parse(localStorage.getItem('notes') || '[]');
        const importedNotes = unassigned.notes || [];
        const mergedNotes = uniqueById(existingNotes, importedNotes);
        localStorage.setItem('notes', JSON.stringify(mergedNotes));

        // pageSettings/fontSizes/lastExchangeRates - validate and merge safely
        const existingPageSettings = JSON.parse(localStorage.getItem('pageSettings') || '{}');
        const existingFontSizes = JSON.parse(localStorage.getItem('fontSizes') || '{}');

        const knownPageKeys = ['tripManagement','dailyItinerary','hotelInfo','travelTips','packingList','travelNotes','expenseTracker','notes','dataManagement','settings'];

        // pageSettings: only merge if imported has at least one true and keys are known; coerce to boolean and remove unknown keys
        if (unassigned.pageSettings && typeof unassigned.pageSettings === 'object') {
          const importedPS = unassigned.pageSettings;
          const validEntries = {};
          let hasTrue = false;
          knownPageKeys.forEach(k => {
            if (Object.prototype.hasOwnProperty.call(importedPS, k)) {
              const v = importedPS[k];
              // Accept true, 'true', 1, '1' as true
              const boolV = (v === true || v === 'true' || v === 1 || v === '1');
              validEntries[k] = Boolean(boolV);
              if (validEntries[k]) hasTrue = true;
            }
          });
          if (hasTrue) {
            const merged = { ...existingPageSettings, ...validEntries };
            // Ensure merged only contains known keys and boolean values
            const cleaned = {};
            knownPageKeys.forEach(k => { cleaned[k] = Boolean(merged[k]); });
            localStorage.setItem('pageSettings', JSON.stringify(cleaned));
          } else {
            // ignore imported pageSettings if empty or all false to avoid hiding UI
            console.log('Ignored imported pageSettings because it was empty or all false');
          }
        }

        // fontSizes: basic validation (accept numbers between 10 and 40)
        if (unassigned.fontSizes && typeof unassigned.fontSizes === 'object') {
          const importedFS = unassigned.fontSizes;
          const validated = { ...existingFontSizes };
          Object.keys(importedFS).forEach(key => {
            const val = parseInt(importedFS[key], 10);
            if (!isNaN(val) && val >= 10 && val <= 40) {
              validated[key] = val;
            } else {
              console.log(`Ignored invalid fontSizes.${key}:`, importedFS[key]);
            }
          });
          localStorage.setItem('fontSizes', JSON.stringify(validated));
        }

        if (unassigned.lastExchangeRates) {
          try {
            const lr = unassigned.lastExchangeRates;
            if (lr && typeof lr === 'object') {
              localStorage.setItem('lastExchangeRates', JSON.stringify(lr));
            } else {
              console.log('Ignored invalid lastExchangeRates in import');
            }
          } catch (e) {
            console.log('Error processing lastExchangeRates:', e);
          }
        }

        alert('匯入並合併完成。請重新整理頁面以載入新數據。');
        window.location.reload();
      } catch (err) {
        console.error('匯入合併失敗:', err);
        alert('匯入失敗：檔案格式錯誤或內容非預期。');
      }
    };
    reader.readAsText(file);
    event.target.value = null;
  };

  // 匯入數據
  const importData = (event) => {
    const file = event.target.files[0];
    if (!file) return;

    const reader = new FileReader();
    reader.onload = (e) => {
      try {
        const importedData = JSON.parse(e.target.result);

        // 更新localStorage中的所有數據
        if (importedData.trips) localStorage.setItem('trips', JSON.stringify(importedData.trips));
        if (importedData.hotels) localStorage.setItem('hotels', JSON.stringify(importedData.hotels));
        if (importedData.itineraries) localStorage.setItem('itineraries', JSON.stringify(importedData.itineraries));
        if (importedData.packingLists) localStorage.setItem('packingLists', JSON.stringify(importedData.packingLists));
        if (importedData.travelNotes) localStorage.setItem('travelNotes', JSON.stringify(importedData.travelNotes));
        if (importedData.travelTips) localStorage.setItem('travelTips', JSON.stringify(importedData.travelTips));

        alert('數據匯入成功！請重新整理頁面以載入新數據。');
        window.location.reload(); // 重新載入頁面以應用新數據
      } catch (error) {
        console.error('匯入失敗:', error);
        alert('匯入失敗，請確保檔案格式正確。');
      }
    };
    reader.readAsText(file);

    // 重置input，以便可以重複選擇同一個檔案
    event.target.value = null;
  };

// Word export functions removed

// 渲染組件
return (
  <Container>
    <h2>數據管理</h2>

    <Card>
      <h3>匯出/匯入數據</h3>
      <p>您可以匯出所有應用程式數據進行備份，或匯入之前備份的數據。</p>

      {/* 在這裡添加警告文字 */}
      <WarningText>
        此功能尚在開發當中，有可能產生未預期的錯誤
      </WarningText>

      <ButtonGroup>
        <Button onClick={exportAllDataGrouped}>
          匯出所有資料（按行程分組）
        </Button>

        {/* 匯出為 Word 已移除 */}

        <input id="groupedImportInput" type="file" accept=".txt,.json" style={{ display: 'none' }} onChange={importAllDataGrouped} />
        <label htmlFor="groupedImportInput">
          <Button as="span">匯入分組資料（TXT）</Button>
        </label>
        <Button onClick={() => {
          // reset page settings to defaults
          const defaults = {
            tripManagement: true,
            dailyItinerary: true,
            hotelInfo: true,
            travelTips: true,
            packingList: true,
            travelNotes: true,
            expenseTracker: true,
            notes: true,
            dataManagement: true,
            settings: true
          };
          localStorage.setItem('pageSettings', JSON.stringify(defaults));
          window.location.reload();
        }}>恢復預設頁面顯示</Button>
      </ButtonGroup>
    </Card>
  </Container>
);
};

export default DataManagement;
</file>

<file path="src/pages/TravelNotes.jsx">
import { useState, useEffect, useRef } from 'react'
import styled from 'styled-components'
import { useTrip } from '../contexts/TripContext'

// 動態導入，避免在沒有安裝套件時出錯
let saveAs;
let Document, Packer, Paragraph, TextRun, HeadingLevel;

// 嘗試導入file-saver和docx套件
try {
  import('file-saver').then(module => {
    saveAs = module.saveAs;
  }).catch(err => console.error('無法載入file-saver:', err));

  import('docx').then(module => {
    Document = module.Document;
    Packer = module.Packer;
    Paragraph = module.Paragraph;
    TextRun = module.TextRun;
    HeadingLevel = module.HeadingLevel;
  }).catch(err => console.error('無法載入docx:', err));
} catch (error) {
  console.error('動態導入套件失敗:', error);
}

const Container = styled.div`
  max-width: 800px;
  margin: 0 auto;
`

const TripSelector = styled.div`
  margin-bottom: 1rem;
`

const NoteCard = styled.div`
  background-color: white;
  border-radius: 8px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  padding: 1rem;
  margin-bottom: 1rem;
`

const NoteForm = styled.form`
  background-color: white;
  border-radius: 8px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  padding: 1rem;
  margin-bottom: 1rem;
`

const ButtonGroup = styled.div`
  display: flex;
  gap: 0.5rem;
  margin-top: 1rem;
`

const Button = styled.button`
  background-color: ${props => props.$primary ? '#3498db' : '#e74c3c'};
  color: white;
  border: none;
  padding: 0.5rem 1rem;
  border-radius: 4px;
  cursor: pointer;
  &:disabled {
    background-color: #ccc;
    cursor: not-allowed;
  }
`

const QuickTextButton = styled.button.attrs({
  type: 'button' // 設置按鈕類型為button，防止在表單中自動提交
})`
  background-color: ${props => props.$negative ? '#ffebee' : '#e3f2fd'};
  color: ${props => props.$negative ? '#c62828' : '#1565c0'};
  border: 1px solid ${props => props.$negative ? '#ffcdd2' : '#bbdefb'};
  border-radius: 4px;
  padding: 0.3rem 0.6rem;
  margin: 0.2rem;
  cursor: pointer;
  font-size: 0.9rem;
  transition: all 0.2s;

  &:hover {
    background-color: ${props => props.$negative ? '#ffcdd2' : '#bbdefb'};
  }
`

const QuickTextContainer = styled.div`
  margin: 1rem 0;
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
`

const QuickTextSection = styled.div`
  display: flex;
  flex-wrap: wrap;
  gap: 0.3rem;
`

// ImportExportContainer is not used in this file after moving functionality
// const ImportExportContainer = styled.div`
//   display: flex;
//   gap: 0.5rem;
//   margin-top: 1rem;
//   margin-bottom: 1rem;
// `

const TravelNotes = () => {
  const { trips, selectedTripId, setSelectedTripId } = useTrip();
  const [notes, setNotes] = useState(() => {
    const savedNotes = localStorage.getItem('travelNotes');
    return savedNotes ? JSON.parse(savedNotes) : {};
  });

  const contentRef = useRef(null);

  const positiveWords = ["好吃", "有特色", "美麗", "親切", "想再來", "難忘", "便利", "高CP"];
  const negativeWords = ["服務差", "不推薦", "難吃", "無聊", "太貴", "太花時間", "不值得"];
  const noteTemplates = ["我到了...", "我看了...", "我吃了...", "我聽了...", "我玩了..."];

  const getCurrentDateTime = () => {
    const now = new Date();
    const year = now.getFullYear();
    const month = String(now.getMonth() + 1).padStart(2, '0');
    const day = String(now.getDate()).padStart(2, '0');
    const hours = String(now.getHours()).padStart(2, '0');
    const minutes = String(now.getMinutes()).padStart(2, '0');
    return `${year}/${month}/${day} ${hours}:${minutes}`;
  };

  const initialNewNoteData = {
    id: '',
    title: getCurrentDateTime(),
    content: '',
    date: new Date().toISOString().split('T')[0],
    location: '',
    address: '', // New field for formatted address,
    weather: '',
    temperature: ''
  };

  const [newNote, setNewNote] = useState(initialNewNoteData);
  const [isEditing, setIsEditing] = useState(false);
  const [gpsStatus, setGpsStatus] = useState('');
  const [weatherStatus, setWeatherStatus] = useState('');
  const [sortNewestFirst, setSortNewestFirst] = useState(true); // 新增排序狀態

  const fetchAddressData = async (latitude, longitude) => {
    try {
        setGpsStatus('正在獲取地址...');
        const response = await fetch(`https://nominatim.openstreetmap.org/reverse?format=json&lat=${latitude}&lon=${longitude}&accept-language=zh-TW`);
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        const data = await response.json();
        if (data && data.address) {
            const { country, state, city, town, village } = data.address;
            const displayCity = city || state || town || village || '';
            const displayAddress = `${country || ''} ${displayCity} ${data.address.suburb || data.address.road || ''}`.trim();
            setNewNote(prev => ({
                ...prev,
                address: displayAddress,
                location: `${latitude.toFixed(6)}, ${longitude.toFixed(6)}`
            }));
            setGpsStatus('地址已獲取');
        } else {
            throw new Error('無法解析地址');
        }
    } catch (error) {
        console.error('獲取地址失敗:', error);
        setGpsStatus('無法獲取地址');
        // Fallback to just lat/lon
        setNewNote(prev => ({
            ...prev,
            location: `${latitude.toFixed(6)}, ${longitude.toFixed(6)}`,
            address: ''
        }));
    }
  };

  // Debug: Log newNote whenever it changes
  useEffect(() => {
    console.log("newNote state updated:", newNote);
  }, [newNote]);

  useEffect(() => {
    localStorage.setItem('travelNotes', JSON.stringify(notes));
  }, [notes]);

  useEffect(() => {
    if (!isEditing && selectedTripId && navigator.geolocation) {
      setGpsStatus('正在獲取位置...');
      setWeatherStatus(''); // Clear previous weather status
      // Optionally clear previous location/weather from newNote for a fresh start
      // setNewNote(prev => ({ ...prev, location: '', weather: '', temperature: '' }));

      navigator.geolocation.getCurrentPosition(
        (position) => {
          const { latitude, longitude } = position.coords;
          fetchAddressData(latitude, longitude); // Fetch address
          fetchWeatherData(latitude, longitude); // Fetch weather
        },
        (error) => {
          console.error('獲取位置失敗:', error);
          setGpsStatus('無法獲取位置');
          setWeatherStatus(''); // Clear weather status on GPS error
        }
      );
    } else if (!selectedTripId) {
      // Clear form if no trip is selected
      setNewNote({...initialNewNoteData, title: getCurrentDateTime()});
      setGpsStatus('');
      setWeatherStatus('');
    } else if (isEditing) {
      // If user starts editing, statuses should reflect the loaded note, not "loading"
      // unless refresh is clicked.
      setGpsStatus('');
      setWeatherStatus('');
    }
  // Make sure initialNewNoteData is stable or memoized if used in deps,
  // but here it's fine as it's used to reset state.
  // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [isEditing, selectedTripId]);

  const fetchWeatherData = async (latitude, longitude) => {
    try {
      setWeatherStatus('正在獲取天氣信息...');
      // Simulating API call
      await new Promise(resolve => setTimeout(resolve, 500)); // Simulate delay

      const mockWeatherData = {
        main: { temp: Math.floor(Math.random() * 15) + 15 }, // Random temp between 15-29
        weather: [{ description: ['晴天', '多雲', '小雨'][Math.floor(Math.random() * 3)] }] // Random weather
      };

      setNewNote(prev => ({
        ...prev,
        weather: mockWeatherData.weather[0].description,
        temperature: `${mockWeatherData.main.temp}°C`
      }));
      setWeatherStatus('天氣信息已獲取');
    } catch (error) {
      console.error('獲取天氣信息失敗:', error);
      setWeatherStatus('無法獲取天氣信息');
    }
  };

  const refreshLocationAndWeather = () => {
    if (navigator.geolocation) {
      setGpsStatus('正在重新獲取位置...');
      setWeatherStatus('等待位置信息...'); // Indicate that weather will follow
      navigator.geolocation.getCurrentPosition(
        (position) => {
          const { latitude, longitude } = position.coords;
          fetchAddressData(latitude, longitude); // Fetch address
          fetchWeatherData(latitude, longitude); // Fetch weather
        },
        (error) => {
          console.error('重新獲取位置失敗:', error);
          setGpsStatus('無法獲取位置');
          setWeatherStatus(''); // Clear weather status on GPS error
        }
      );
    }
  };

  const handleTripChange = (e) => {
    const tripId = e.target.value;
    setSelectedTripId(tripId);
    setIsEditing(false); // Reset editing state when trip changes
    setNewNote({...initialNewNoteData, title: getCurrentDateTime() }); // Reset form for new trip

    if (tripId && !notes[tripId]) {
      setNotes(prev => ({
        ...prev,
        [tripId]: []
      }));
    }
  };

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setNewNote(prev => ({ ...prev, [name]: value }));
  };

  const handleQuickTextClick = (text) => {
    if (contentRef.current) {
      const start = contentRef.current.selectionStart;
      const end = contentRef.current.selectionEnd;
      const currentContent = newNote.content || ""; // Ensure currentContent is not null
      const newContentValue = currentContent.substring(0, start) + text + currentContent.substring(end);
      setNewNote(prev => ({ ...prev, content: newContentValue }));
      setTimeout(() => {
        if (contentRef.current) {
            contentRef.current.focus();
            contentRef.current.setSelectionRange(start + text.length, start + text.length);
        }
      }, 0);
    } else {
      setNewNote(prev => ({ ...prev, content: (prev.content || "") + text }));
    }
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    if (!selectedTripId) {
        alert("請先選擇一個行程。");
        return;
    }
    if (!newNote.content.trim()) {
        alert("筆記內容不能為空。");
        return;
    }

    // Debug: Log the note object that is about to be saved
    console.log("Submitting note data:", newNote);

    const tripNotes = notes[selectedTripId] || [];
    let noteToSave = { ...newNote };

    // Ensure all auto-fetched fields are part of the saved object
    // (newNote should already have them if fetched successfully)

    if (isEditing) {
      const updatedNotes = tripNotes.map(note =>
        note.id === noteToSave.id ? noteToSave : note
      );
      setNotes({ ...notes, [selectedTripId]: updatedNotes });
      setIsEditing(false);
    } else {
      noteToSave.id = Date.now().toString();
      setNotes({ ...notes, [selectedTripId]: [...tripNotes, noteToSave] });
    }

    setNewNote({...initialNewNoteData, title: getCurrentDateTime()}); // Reset form, new title
    // GPS and weather will be fetched again by useEffect if !isEditing
  };

  const handleEdit = (note) => {
    setNewNote(note);
    setIsEditing(true);
    // When editing, clear current fetching statuses as they pertain to a new note
    setGpsStatus(note.location ? '位置已載入' : '');
    setWeatherStatus(note.weather ? '天氣已載入' : '');
  };

  const handleDelete = (noteId) => {
    if (!selectedTripId) return;
    if (!window.confirm('確定要刪除這則旅遊筆記嗎？此動作無法復原。')) return;
    const updatedNotes = (notes[selectedTripId] || []).filter(note => note.id !== noteId);
    setNotes({ ...notes, [selectedTripId]: updatedNotes });
  };

  const selectedTripNotes = selectedTripId ? (notes[selectedTripId] || []) : [];
  // 根據排序狀態決定排序方式
  const sortedNotes = [...selectedTripNotes].sort((a, b) => {
    const aDate = new Date(a.date + 'T' + (a.title.split(' ')[1] || '00:00'));
    const bDate = new Date(b.date + 'T' + (b.title.split(' ')[1] || '00:00'));
    return sortNewestFirst ? bDate - aDate : aDate - bDate;
  });


  // Disable submit button if essential data is loading for a NEW note.
  // For existing notes, user can save with old data or refresh.
  const isFetchingInitialData = !isEditing && (gpsStatus.includes('正在') || weatherStatus.includes('正在') || weatherStatus === '等待位置信息...');

  const displayLocation = newNote.address ? `${newNote.address} (${newNote.location})` : newNote.location;

  return (
    <Container>
      <h2>旅遊筆記</h2>
      <TripSelector>
        <label htmlFor="trip">選擇行程:</label>
        <select id="trip" value={selectedTripId || ''} onChange={handleTripChange}>
          <option value="">-- 請選擇行程 --</option>
          {trips.map(trip => (
            <option key={trip.id} value={trip.id}>
              {trip.name} ({trip.startDate} 至 {trip.endDate})
            </option>
          ))}
        </select>
      </TripSelector>
      {selectedTripId ? (
        <>
          <NoteForm onSubmit={handleSubmit}>
            <h3>{isEditing ? '編輯筆記' : '新增筆記'}</h3>
            <div>
              <label htmlFor="title">標題</label>
              <input type="text" id="title" name="title" value={newNote.title} onChange={handleInputChange} placeholder="輸入標題（選填）" />
            </div>
            <div>
              <label htmlFor="date">日期</label>
              <input type="date" id="date" name="date" value={newNote.date} onChange={handleInputChange} required />
            </div>
            <div style={{ display: 'flex', gap: '10px', alignItems: 'center', marginTop: '1rem' }}>
              <div style={{ flex: 1 }}>
                <label htmlFor="location">地點 {gpsStatus && <small>({gpsStatus})</small>}</label>
                <input type="text" id="location" name="location" value={displayLocation} onChange={handleInputChange} placeholder="位置資訊" />
              </div>
              <Button type="button" $primary onClick={refreshLocationAndWeather} style={{ marginTop: '20px', padding: '0.3rem 0.6rem', fontSize:'0.9rem' }}>
                重新獲取
              </Button>
            </div>
            <div style={{ display: 'flex', gap: '10px', marginTop: '1rem' }}>
              <div style={{ flex: 1 }}>
                <label htmlFor="weather">天氣 {weatherStatus && <small>({weatherStatus})</small>}</label>
                <input type="text" id="weather" name="weather" value={newNote.weather} onChange={handleInputChange} placeholder="例如：晴天、多雲" />
              </div>
              <div style={{ flex: 1 }}>
                <label htmlFor="temperature">氣溫</label>
                <input type="text" id="temperature" name="temperature" value={newNote.temperature} onChange={handleInputChange} placeholder="例如：25°C" />
              </div>
            </div>
            <div>
              <label htmlFor="content">內容</label>
              <textarea id="content" name="content" value={newNote.content} onChange={handleInputChange} rows="8" required ref={contentRef}></textarea>
            </div>
            <QuickTextContainer>
              <div>
                <label>筆記模板：</label>
                <QuickTextSection style={{ display: 'flex', flexDirection: 'column', gap: '5px', alignItems: 'flex-start' }}>
                  {noteTemplates.map(template => (
                    <QuickTextButton key={template} onClick={() => handleQuickTextClick(template + '\n')} style={{ textAlign: 'left', margin: '2px 0' }}>
                      {template}
                    </QuickTextButton>
                  ))}
                </QuickTextSection>
              </div>
              <div>
                <label>正面評價詞：</label>
                <QuickTextSection>
                  {positiveWords.map(word => (<QuickTextButton key={word} onClick={() => handleQuickTextClick(word)}>{word}</QuickTextButton>))}
                </QuickTextSection>
              </div>
              <div>
                <label>負面評價詞：</label>
                <QuickTextSection>
                  {negativeWords.map(word => (<QuickTextButton key={word} $negative onClick={() => handleQuickTextClick(word)}>{word}</QuickTextButton>))}
                </QuickTextSection>
              </div>
            </QuickTextContainer>
            <ButtonGroup>
              <Button $primary type="submit" disabled={isFetchingInitialData}>
                {isEditing ? '更新筆記' : '新增筆記'}
              </Button>
              {isEditing && (
                <Button type="button" onClick={() => {
                  setIsEditing(false);
                  setNewNote({...initialNewNoteData, title: getCurrentDateTime()});
                }}>
                  取消
                </Button>
              )}
            </ButtonGroup>
          </NoteForm>
          <div>
            <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>
              <h3 style={{ margin: 0 }}>我的旅遊筆記</h3>
              <Button
                type="button"
                $primary={false}
                style={{ backgroundColor: '#7f8c8d', color: 'white', fontSize: '0.9rem', padding: '0.3rem 0.8rem' }}
                onClick={() => setSortNewestFirst(s => !s)}
              >
                {sortNewestFirst ? '最舊在前' : '最新在前'}
                <span style={{ marginLeft: 6 }}>
                  {sortNewestFirst ? '↑' : '↓'}
                </span>
              </Button>
            </div>
            {sortedNotes.length === 0 ? (
              <p>尚未添加任何旅遊筆記</p>
            ) : (
              sortedNotes.map(note => (
                <NoteCard key={note.id}>
                  <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                    <h4>{note.title}</h4>
                    <span style={{ color: '#777', fontSize: '0.9rem' }}>
                      {new Date(note.date).toLocaleDateString()}
                    </span>
                  </div>
                  {note.location && (
                    <p style={{ color: '#555', fontSize: '0.9rem', marginBottom: '0.3rem', marginTop: '0.3rem' }}>
                      <strong>地點:</strong> {note.address ? `${note.address} (${note.location})` : note.location}
                    </p>
                  )}
                  {(note.weather || note.temperature) && (
                    <p style={{ color: '#555', fontSize: '0.9rem', marginBottom: '0.5rem' }}>
                      <strong>天氣:</strong> {note.weather || '未記錄'}
                      {note.temperature && ` (${note.temperature || '未記錄'})`}
                    </p>
                  )}
                  <p style={{ whiteSpace: 'pre-line', marginTop: '0.5rem', marginBottom: '1rem' }}>{note.content}</p>
                  <ButtonGroup>
                    <Button $primary onClick={() => handleEdit(note)}>編輯</Button>
                    <Button onClick={() => handleDelete(note.id)}>刪除</Button>
                  </ButtonGroup>
                </NoteCard>
              ))
            )}
          </div>
        </>
      ) : (
        <p>請先選擇一個行程</p>
      )}
    </Container>
  );
};

export default TravelNotes;
</file>

<file path="src/pages/ExpenseTracker.jsx">
import { useState, useEffect, useRef } from 'react';
import styled from 'styled-components';
import { useTrip } from '../contexts/TripContext';

const Container = styled.div`
  max-width: 800px;
  margin: 0 auto;
`;

const Card = styled.div`
  background-color: white;
  border-radius: 8px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  padding: 1rem;
  margin-bottom: 1rem;
`;

const TotalExpenseCard = styled(Card)`
  background-color: #f8f9fa;
  border-left: 4px solid #3498db;
`;

const FormGroup = styled.div`
  margin-bottom: 1rem;
`;

const CurrencyConverterContainer = styled.div`
  display: flex;
  flex-direction: column;
  gap: 1rem;
  margin-bottom: 1rem;
  
  @media (max-width: 768px) {
    gap: 0.8rem;
  }
`;

const CurrencyRow = styled.div`
  display: flex;
  gap: 1rem;
  align-items: center;
  
  @media (max-width: 480px) {
    flex-direction: column;
    align-items: stretch;
    gap: 0.5rem;
  }
`;

const InputGroup = styled.div`
  flex: 1;
  display: flex;
  flex-direction: column;
`;

const ButtonGroup = styled.div`
  display: flex;
  gap: 0.5rem;
  margin-top: 0.5rem; /* 調整與上方元素的間距 */
  margin-bottom: 1rem; /* 新增與下方元素的間距 */
  
  @media (max-width: 480px) {
    flex-wrap: wrap;
  }
`;

const Button = styled.button`
  background-color: ${props =>
    props.$primary ? '#3498db' :
    props.$active ? '#3498db' : // 手動匯率按鈕啟用時的顏色
    props.$danger ? '#e74c3c' : // 刪除按鈕的顏色
    props.$secondary ? '#95a5a6' : // 次要按鈕的顏色
    '#ccc'}; /* 預設或非活動狀態的顏色 */
  color: white;
  border: none;
  padding: 0.5rem 1rem;
  border-radius: 4px;
  cursor: pointer;

  /* 為刪除按鈕特別指定背景色，因為它不是 primary 也不是 active */
  ${props => props.$danger && `
    background-color: #e74c3c;
  `}
`;

const ExpenseList = styled.div`
  margin-top: 1rem;
`;

const ExpenseItem = styled.div`
  display: flex;
  justify-content: space-between;
  align-items: center; /* 垂直居中 */
  padding: 0.5rem 0;
  border-bottom: 1px solid #eee;

  &:last-child {
    border-bottom: none;
  }
`;

const ExpenseAmount = styled.span`
  font-weight: bold;
  font-size: 1.2rem;
`;

const RateInfoText = styled.div`
  font-size: 0.8rem;
  color: #666;
  margin-top: 0.5rem;
  display: flex; /* 讓內部元素可以並排 */
  align-items: center; /* 垂直居中 */
  gap: 0.5rem; /* 內部元素間距 */
`;

// 新增用於描述標籤的 styled component 容器
const DescriptionTags = styled.div`
  display: flex;
  flex-wrap: wrap; /* 讓標籤可以換行 */
  gap: 0.5rem;
  margin-top: 0.5rem; /* 標籤上方空間 */
  
  @media (max-width: 480px) {
    gap: 0.3rem;
  }
`;

// 新增用於描述標籤的 styled component 個別標籤
const DescriptionTag = styled.span`
  background-color: #eee;
  color: #333;
  padding: 0.3rem 0.6rem;
  border-radius: 12px; /* 圓角讓它看起來像標籤 */
  cursor: pointer;
  font-size: 0.9rem;
  &:hover {
    background-color: #ddd;
  }
`;

const StyledSelect = styled.select`
  font-size: 16px;
  padding: 0.5rem;
  border-radius: 4px;
  border: 1px solid #ccc;
`;

// 新增編輯模式的樣式組件
const EditForm = styled.div`
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
  width: 100%;
`;

const EditRow = styled.div`
  display: flex;
  gap: 0.5rem;
  align-items: center;
  
  @media (max-width: 480px) {
    flex-direction: column;
    align-items: stretch;
  }
`;

const EditInputGroup = styled.div`
  flex: 1;
  display: flex;
  flex-direction: column;
`;

const EditActions = styled.div`
  display: flex;
  gap: 0.5rem;
  justify-content: flex-end;
  margin-top: 0.5rem;
`;


// 預設的消費描述選項
const defaultDescriptions = ["早餐", "午餐", "晚餐", "交通", "點心", "飲料", "伴手", "禮物", "門票"];


const ExpenseTracker = () => {
  const { trips, selectedTripId, setSelectedTripId } = useTrip();

  // 從localStorage獲取消費記錄
  const [expenses, setExpenses] = useState(() => {
    const savedExpenses = localStorage.getItem('expenses');
    return savedExpenses ? JSON.parse(savedExpenses) : {};
  });

  // 貨幣轉換相關狀態
  const [selectedPair, setSelectedPair] = useState('TWD_JPY');
  const [fromAmount, setFromAmount] = useState('');
  const [toAmount, setToAmount] = useState('');
  const [exchangeRates, setExchangeRates] = useState({});
  const [manualRate, setManualRate] = useState('');
  const [useManualRate, setUseManualRate] = useState(false);
  const [lastUpdated, setLastUpdated] = useState(null);
  const [isLoading, setIsLoading] = useState(false);

  // 自訂匯率相關狀態
  const [customCurrencyCode, setCustomCurrencyCode] = useState('');
  const [customCurrencyRate, setCustomCurrencyRate] = useState('');
  const [savedCustomCurrencyPairs, setSavedCustomCurrencyPairs] = useState(() => {
    const saved = localStorage.getItem('savedCustomCurrencyPairs');
    return saved ? JSON.parse(saved) : [];
  });

  // 編輯模式相關狀態
  const [editingExpenseId, setEditingExpenseId] = useState(null);
  const [editFormData, setEditFormData] = useState({
    description: '',
    date: '',
    time: ''
  });


  // 新增消費記錄相關狀態
  const [newExpense, setNewExpense] = useState({
    description: '',
    amount: '', // 這個欄位似乎沒有被直接使用於表單，可以考慮是否移除
    date: new Date().toISOString().split('T')[0], // 這裡仍然只儲存日期用於日期輸入框
    currencyPair: 'TWD_JPY', // 這個欄位似乎沒有被直接使用於表單，可以考慮是否移除
    fromAmount: '', // 這個欄位似乎沒有被直接使用於表單，可以考慮是否移除
    toAmount: '', // 這個欄位似乎沒有被直接使用於表單，可以考慮是否移除
    rate: '' // 這個欄位似乎沒有被直接使用於表單，可以考慮是否移除
  });

  // 動態貨幣對選項
  const allCurrencyPairs = [
    { id: 'TWD_JPY', name: '台幣 → 日幣', fromCode: 'TWD', toCode: 'JPY' },
    { id: 'TWD_USD', name: '台幣 → 美金', fromCode: 'TWD', toCode: 'USD' },
    { id: 'TWD_CNY', name: '台幣 → 人民幣', fromCode: 'TWD', toCode: 'CNY' },
    { id: 'TWD_KRW', name: '台幣 → 韓元', fromCode: 'TWD', toCode: 'KRW' },
    { id: 'TWD_THB', name: '台幣 → 泰銖', fromCode: 'TWD', toCode: 'THB' },
    { id: 'TWD_MOP', name: '台幣 → 澳門元', fromCode: 'TWD', toCode: 'MOP' },
    ...savedCustomCurrencyPairs.map(pair => ({
        id: `TWD_${pair.toCode}`,
        name: `台幣 → ${pair.toCode} (自訂)`,
        fromCode: 'TWD',
        toCode: pair.toCode,
        rate: pair.rate
    })),
    { id: 'TWD_CUSTOM_NEW', name: '自訂匯率 (新增)', fromCode: 'TWD', toCode: 'CUSTOM_NEW' }
  ];


  // 保存消費記錄到localStorage
  useEffect(() => {
    localStorage.setItem('expenses', JSON.stringify(expenses));
  }, [expenses]);

  // 保存自訂匯率到localStorage
  useEffect(() => {
    localStorage.setItem('savedCustomCurrencyPairs', JSON.stringify(savedCustomCurrencyPairs));
  }, [savedCustomCurrencyPairs]);


  // 獲取匯率數據
  const fetchExchangeRates = async () => {
    try {
      setIsLoading(true);

      // 使用真實的匯率API - ExchangeRate-API (免費版本)
      const response = await fetch('https://api.exchangerate-api.com/v4/latest/TWD');
      
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      
      const data = await response.json();
      
      // 提取我們需要的匯率
      const rates = {
        JPY: data.rates.JPY || 4.32,   // 台幣對日幣
        USD: data.rates.USD || 0.032,  // 台幣對美元
        CNY: data.rates.CNY || 0.23,   // 台幣對人民幣
        KRW: data.rates.KRW || 42.5,    // 台幣對韓元
        THB: data.rates.THB || 1.05,    // 台幣對泰銖
        MOP: data.rates.MOP || 0.25    // 台幣對澳門元
      };

      setExchangeRates(rates);
      localStorage.setItem('lastExchangeRates', JSON.stringify(rates)); // 新增這行
      setLastUpdated(new Date());
      setIsLoading(false);
    } catch (error) {
      console.error('獲取匯率失敗:', error);
      
      // 如果API失敗，使用備用的模擬數據
      const fallbackRates = {
        JPY: 4.32,   // 1台幣約等於4.32日幣
        USD: 0.032,  // 1台幣約等於0.032美元
        CNY: 0.23,   // 1台幣約等於0.23人民幣
        KRW: 42.5,    // 1台幣約等於42.5韓元
        THB: 1.05,    // 1台幣約等於1.05泰銖
        MOP: 0.25    // 1台幣約等於0.25澳門元
      };
      
      const lastRates = localStorage.getItem('lastExchangeRates');
      if (lastRates) {
        setExchangeRates(JSON.parse(lastRates));
      } else {
        setExchangeRates(fallbackRates);
      }
      setLastUpdated(new Date());
      setIsLoading(false);
      alert('無法獲取即時匯率，目前使用上次的匯率數據或預設值。請檢查網路連線後重新整理匯率。');
    }
  };

  // 初始化時獲取匯率
  useEffect(() => {
    fetchExchangeRates();

    // 每小時更新一次匯率
    const intervalId = setInterval(fetchExchangeRates, 3600000);

    return () => clearInterval(intervalId);
  }, []);

  // 處理行程選擇變更
  const handleTripChange = (e) => {
    const tripId = e.target.value;
    setSelectedTripId(tripId);

    // 確保選定行程的消費記錄存在
    if (tripId && !expenses[tripId]) {
      setExpenses(prev => ({
        ...prev,
        [tripId]: []
      }));
    }
  };

  // 處理貨幣對選擇變更
  const handlePairChange = (e) => {
    const selectedValue = e.target.value;
    setSelectedPair(selectedValue);
    setFromAmount('');
    setToAmount('');

    if (selectedValue === 'TWD_CUSTOM_NEW') {
        setUseManualRate(true);
        setCustomCurrencyCode('');
        setCustomCurrencyRate('');
        setManualRate('');
    } else {
        const selectedPairObject = allCurrencyPairs.find(p => p.id === selectedValue);
        if (selectedPairObject && selectedPairObject.rate) { // It's a saved custom pair
            setUseManualRate(true);
            setCustomCurrencyCode(selectedPairObject.toCode);
            setCustomCurrencyRate(selectedPairObject.rate.toString());
            setManualRate(selectedPairObject.rate.toString());
        } else { // It's a standard pair
            setUseManualRate(false);
            setCustomCurrencyCode('');
            setCustomCurrencyRate('');
            setManualRate('');
        }
    }
  };

  // 獲取當前選擇的貨幣對
  const getCurrentPair = () => {
    return allCurrencyPairs.find(pair => pair.id === selectedPair) || allCurrencyPairs[0];
  };

  // 獲取當前匯率
  const getCurrentRate = () => {
    const pair = getCurrentPair();
    if (pair.id === 'TWD_CUSTOM_NEW') {
        return parseFloat(customCurrencyRate) || 0;
    }
    if (pair.rate) { // Saved custom pair
        return pair.rate;
    }
    if (useManualRate && manualRate) {
      const parsedManualRate = parseFloat(manualRate);
      if (!isNaN(parsedManualRate)) return parsedManualRate;
    }
    return exchangeRates[pair.toCode] || 0;
  };

  // 處理金額輸入變更 - 從第一個貨幣到第二個貨幣
  const handleFromAmountChange = (e) => {
    const value = e.target.value;
    setFromAmount(value);

    if (value === '' || isNaN(parseFloat(value))) {
      setToAmount('');
      return;
    }

    const rate = getCurrentRate();
    if (rate > 0) {
      const converted = (parseFloat(value) * rate).toFixed(2);
      setToAmount(converted);
    } else {
      setToAmount('');
    }
  };

  // 處理金額輸入變更 - 從第二個貨幣到第一個貨幣
  const handleToAmountChange = (e) => {
    const value = e.target.value;
    setToAmount(value);

    if (value === '' || isNaN(parseFloat(value))) {
      setFromAmount('');
      return;
    }

    const rate = getCurrentRate();
    if (rate > 0) {
      const converted = (parseFloat(value) / rate).toFixed(2);
      setFromAmount(converted);
    } else {
      setFromAmount('');
    }
  };

  // 處理手動匯率變更
  const handleManualRateChange = (e) => {
    const newRate = e.target.value;
    setManualRate(newRate);
    // 當手動匯率改變時，如果 fromAmount 有值，立即重新計算 toAmount
    if (fromAmount && newRate && !isNaN(parseFloat(newRate)) && parseFloat(newRate) > 0) {
        const converted = (parseFloat(fromAmount) * parseFloat(newRate)).toFixed(2);
        setToAmount(converted);
    } else if (fromAmount && (newRate === '' || isNaN(parseFloat(newRate)) || parseFloat(newRate) <= 0)) {
        // 如果手動匯率被清空或無效，且之前是手動模式，則可以選擇清空toAmount或用自動匯率重算
        //setToAmount(''); // 或者用自動匯率重算
          if (!useManualRate && exchangeRates[getCurrentPair().toCode]) { // 確保不是在手動模式下清空，且有自動匯率
            const autoRate = exchangeRates[getCurrentPair().toCode] || 0;
            const converted = (parseFloat(fromAmount) * autoRate).toFixed(2);
            setToAmount(converted);
          } else {
            setToAmount('');
          }
    }
  };

  // 切換使用手動匯率
  const toggleUseManualRate = () => {
    const newUseManualRateState = !useManualRate;
    setUseManualRate(newUseManualRateState);

    // 如果從手動切換回自動匯率，並且 fromAmount 有值
    if (!newUseManualRateState && fromAmount) {
      const autoRate = exchangeRates[getCurrentPair().toCode] || 0;
      if (autoRate > 0) {
        const converted = (parseFloat(fromAmount) * autoRate).toFixed(2);
        setToAmount(converted);
      } else {
        setToAmount('');
      }
    } else if (newUseManualRateState && fromAmount && manualRate && parseFloat(manualRate) > 0) {
      // 如果從自動切換回手動匯率，並且 fromAmount 和 manualRate 有值
      const converted = (parseFloat(fromAmount) * parseFloat(manualRate)).toFixed(2);
      setToAmount(converted);
    } else if (newUseManualRateState && fromAmount) {
      // 切換到手動，但手動匯率可能還沒輸入或無效，可以先清空 toAmount
      setToAmount('');
    }
  };


  // 處理新增消費記錄表單輸入變更
  const handleExpenseInputChange = (e) => {
    const { name, value } = e.target;
    setNewExpense(prev => ({ ...prev, [name]: value }));
  };

  // 處理點擊描述標籤的函式
  const handleTagClick = (description) => {
    // 將點擊的標籤文字設定到 newExpense.description
    setNewExpense(prev => ({ ...prev, description: description }));
  };

  // 儲存自訂匯率
  const handleSaveCustomPair = () => {
    if (!customCurrencyCode || !customCurrencyRate || isNaN(parseFloat(customCurrencyRate))) {
        alert('請輸入有效的自訂貨幣代碼和匯率');
        return;
    }
    const newPair = {
        toCode: customCurrencyCode.toUpperCase(),
        rate: parseFloat(customCurrencyRate)
    };

    setSavedCustomCurrencyPairs(prev => {
        const existingIndex = prev.findIndex(p => p.toCode === newPair.toCode);
        if (existingIndex > -1) {
            const updated = [...prev];
            updated[existingIndex] = newPair;
            return updated;
        } else {
            return [...prev, newPair];
        }
    });

    setSelectedPair(`TWD_${newPair.toCode}`);
    setManualRate(newPair.rate.toString());
  };

  // 刪除自訂匯率
  const handleDeleteCustomPair = () => {
      const pair = getCurrentPair();
      if (!pair || !pair.rate) return; // Not a custom pair

      if (window.confirm(`確定要刪除 ${pair.toCode} 這個自訂匯率嗎？`)) {
          setSavedCustomCurrencyPairs(prev => prev.filter(p => p.toCode !== pair.toCode));
          setSelectedPair('TWD_JPY'); // Reset to default
          setCustomCurrencyCode('');
          setCustomCurrencyRate('');
          setManualRate('');
          setUseManualRate(false);
      }
  };


  // 記錄當前轉換
  const recordExpense = () => {
    if (!selectedTripId) {
      alert('請先選擇一個行程');
      return;
    }
    if (!newExpense.description) {
      alert('請填寫消費描述');
      return;
    }
    if (fromAmount === '' || isNaN(parseFloat(fromAmount)) || toAmount === '' || isNaN(parseFloat(toAmount))) {
        alert('請輸入有效的轉換金額');
        return;
    }


    const pair = getCurrentPair();
    const rate = getCurrentRate();

    if (rate <= 0) {
        alert('目前的匯率無效，無法記錄消費');
        return;
    }

    const expense = {
      id: Date.now().toString(),
      description: newExpense.description,
      // Capture date and time for recording.
      // If the user selected a date in the form (`newExpense.date`), use that date
      // combined with the current time so the record's day matches the user's selection.
      // If no date was selected, fall back to the current moment.
      dateTime: (() => {
        const now = new Date();
        if (newExpense.date) {
          const pad = (n) => n.toString().padStart(2, '0');
          const hh = pad(now.getHours());
          const mm = pad(now.getMinutes());
          const ss = pad(now.getSeconds());
          const localDateTime = `${newExpense.date}T${hh}:${mm}:${ss}`;
          return new Date(localDateTime).toISOString();
        }
        return now.toISOString();
      })(),
      // Also keep the date field from the form for the input display
      date: newExpense.date,
      currencyPair: selectedPair,
      fromCurrency: pair.fromCode,
      toCurrency: pair.toCode,
      fromAmount: parseFloat(fromAmount),
      toAmount: parseFloat(toAmount),
      rate: rate
    };

    setExpenses(prev => ({
      ...prev,
      [selectedTripId]: [...(prev[selectedTripId] || []), expense]
    }));

    // Reset form (do not reset manual rate and mode for continuity)
    setNewExpense({
      description: '',
      amount: '',
      // Keep the date input as today's date by default for the next entry
      date: new Date().toISOString().split('T')[0],
      currencyPair: 'TWD_JPY',
      fromAmount: '',
      toAmount: '',
      rate: ''
    });
    setFromAmount('');
    setToAmount('');
    // setManualRate(''); // 記錄後不清空手動匯率，方便連續記錄
    // setUseManualRate(false); // 記錄後不清空手動匯率模式，方便連續記錄

    // Removed the alert message here as requested. (Confirmed it was not present in the provided code)
  };

  // 刪除消費記錄（新增確認提示）
  const deleteExpense = (expenseId) => {
    if (!selectedTripId) return;
    if (!window.confirm('確定要刪除此筆消費記錄嗎？')) return;
    setExpenses(prev => {
      const updated = { ...prev };
      if (updated[selectedTripId]) {
        updated[selectedTripId] = updated[selectedTripId].filter(exp => exp.id !== expenseId);
      }
      return updated;
    });
  };

  // 獲取選定行程的消費記錄
  const selectedTripExpenses = selectedTripId ? (expenses[selectedTripId] || []) : [];

  // Sort by dateTime if available, falling back to date
  const sortedExpenses = [...selectedTripExpenses].sort((a, b) => {
      const dateA = a.dateTime ? new Date(a.dateTime) : new Date(a.date);
      const dateB = b.dateTime ? new Date(b.dateTime) : new Date(b.date);
      return dateB - dateA; // Sort descending (latest first)
  });


  // Format function to display date and time for new entries, or just date for old ones
  const formatDateTime = (dateTimeString) => {
    if (!dateTimeString) return 'N/A Date/Time'; // Should not happen with new data, but for safety
    const date = new Date(dateTimeString);
    // Use toLocaleString to get both date and time based on locale
    return date.toLocaleString();
  };

  // Function to format date only for older entries without dateTime
  const formatDateOnly = (dateString) => {
     if (!dateString) return 'N/A Date';
     const date = new Date(dateString);
     return date.toLocaleDateString();
  }


  const currentPairDetails = getCurrentPair();
  const currentEffectiveRate = getCurrentRate();
  const selectedPairObject = allCurrencyPairs.find(p => p.id === selectedPair);


  // 計算總花費（以新台幣為單位）
  const calculateTotalExpense = () => {
    if (!selectedTripId || !selectedTripExpenses.length) return 0;
    
    return selectedTripExpenses.reduce((total, expense) => {
      return total + expense.fromAmount;
    }, 0);
  };

  const totalExpense = calculateTotalExpense();

  // 編輯功能相關函數
  // 啟動編輯模式
  const startEditing = (expense) => {
    setEditingExpenseId(expense.id);
    
    // 從dateTime中提取日期和時間
    let date = '';
    let time = '';
    
    if (expense.dateTime) {
      const dateTime = new Date(expense.dateTime);
      date = dateTime.toISOString().split('T')[0];
      time = dateTime.toTimeString().slice(0, 5); // 取 HH:MM 格式
    } else {
      date = expense.date;
      time = '12:00'; // 默認時間
    }
    
    setEditFormData({
      description: expense.description,
      date: date,
      time: time
    });
  };

  // 處理編輯表單輸入變更
  const handleEditInputChange = (e) => {
    const { name, value } = e.target;
    setEditFormData(prev => ({ ...prev, [name]: value }));
  };

  // 保存編輯
  const saveEdit = () => {
    if (!selectedTripId || !editingExpenseId) return;
    
    // 驗證輸入
    if (!editFormData.description) {
      alert('請填寫消費描述');
      return;
    }
    
    if (!editFormData.date) {
      alert('請選擇日期');
      return;
    }
    
    // 合併日期和時間
    const dateTimeString = `${editFormData.date}T${editFormData.time}:00`;
    const newDateTime = new Date(dateTimeString).toISOString();
    
    setExpenses(prev => {
      const updated = { ...prev };
      if (updated[selectedTripId]) {
        updated[selectedTripId] = updated[selectedTripId].map(expense => {
          if (expense.id === editingExpenseId) {
            return {
              ...expense,
              description: editFormData.description,
              date: editFormData.date,
              dateTime: newDateTime
            };
          }
          return expense;
        });
      }
      return updated;
    });
    
    // 退出編輯模式
    setEditingExpenseId(null);
    setEditFormData({ description: '', date: '', time: '' });
  };

  // 取消編輯
  const cancelEdit = () => {
    setEditingExpenseId(null);
    setEditFormData({ description: '', date: '', time: '' });
  };

  return (
    <Container>
      <h2>消費追蹤</h2>

      <FormGroup>
        <label htmlFor="trip">選擇行程:</label>
        <StyledSelect
          id="trip"
          value={selectedTripId || ''}
          onChange={handleTripChange}
        >
          <option value="">-- 請選擇行程 --</option>
          {trips.map(trip => (
            <option key={trip.id} value={trip.id}>
              {trip.name} ({trip.startDate} 至 {trip.endDate})
            </option>
          ))}
        </StyledSelect>
      </FormGroup>
      
      {selectedTripId && (
        <TotalExpenseCard>
          <h3>總花費</h3>
          <div style={{ fontSize: '1.5rem', fontWeight: 'bold' }}>
            {totalExpense.toFixed(2)} TWD
          </div>
        </TotalExpenseCard>
      )}

      {selectedTripId ? (
        <>
          <Card>
            <h3>貨幣換算器</h3>

            <FormGroup>
              <label htmlFor="currencyPair">選擇貨幣對:</label>
              <StyledSelect
                id="currencyPair"
                value={selectedPair}
                onChange={handlePairChange}
              >
                {allCurrencyPairs.map(pair => (
                  <option key={pair.id} value={pair.id}>
                    {pair.name}
                  </option>
                ))}
              </StyledSelect>
            </FormGroup>

            {selectedPair === 'TWD_CUSTOM_NEW' && (
                <Card>
                    <FormGroup>
                        <label htmlFor="customCurrencyCode">自訂貨幣代碼 (例如: EUR):</label>
                        <input
                            type="text"
                            id="customCurrencyCode"
                            value={customCurrencyCode}
                            onChange={(e) => setCustomCurrencyCode(e.target.value)}
                            placeholder="3位英文代碼"
                            maxLength="3"
                        />
                    </FormGroup>
                    <FormGroup>
                        <label htmlFor="customCurrencyRate">自訂匯率 (1 TWD = ?):</label>
                        <input
                            type="number"
                            id="customCurrencyRate"
                            value={customCurrencyRate}
                            onChange={(e) => setCustomCurrencyRate(e.target.value)}
                            placeholder="輸入匯率"
                            min="0"
                            step="0.0001"
                        />
                    </FormGroup>
                    <Button $primary onClick={handleSaveCustomPair}>儲存自訂匯率</Button>
                </Card>
            )}

            <CurrencyConverterContainer>
              <CurrencyRow>
                <InputGroup>
                  <label htmlFor="fromAmount">{currentPairDetails.fromCode}:</label>
                  <input
                    type="number"
                    id="fromAmount"
                    value={fromAmount}
                    onChange={handleFromAmountChange}
                    placeholder="輸入金額"
                    min="0"
                    step="0.01"
                  />
                </InputGroup>

                <div style={{ alignSelf: 'flex-end', padding: '0.5rem' }}>→</div>

                <InputGroup>
                  <label htmlFor="toAmount">{currentPairDetails.toCode === 'CUSTOM_NEW' ? (customCurrencyCode || '??') : currentPairDetails.toCode}:</label>
                  <input
                    type="number"
                    id="toAmount"
                    value={toAmount}
                    onChange={handleToAmountChange}
                    placeholder="換算結果"
                    min="0"
                    step="0.01"
                  />
                </InputGroup>
              </CurrencyRow>

              <ButtonGroup>
                <Button
                  type="button"
                  $active={useManualRate}
                  onClick={toggleUseManualRate}
                  style={{ padding: '0.5rem', fontSize: '0.8rem' }}
                >
                  手動設定匯率
                </Button>
                <Button
                  type="button"
                  $primary // 保持刷新匯率按鈕為主要樣式
                  onClick={fetchExchangeRates}
                  disabled={isLoading} // 正在加載時禁用
                  style={{ padding: '0.5rem', fontSize: '0.8rem' }}
                >
                  {isLoading ? '更新中...' : '刷新匯率'}
                </Button>
                {selectedPairObject && selectedPairObject.rate && selectedPairObject.toCode !== 'CUSTOM_NEW' && (
                    <Button
                        type="button"
                        $danger
                        onClick={handleDeleteCustomPair}
                        style={{ padding: '0.5rem', fontSize: '0.8rem' }}
                    >
                        刪除此匯率
                    </Button>
                )}
              </ButtonGroup>


              {useManualRate && selectedPair !== 'TWD_CUSTOM_NEW' ? (
                <FormGroup style={{ marginTop: '0.5rem' }}>
                  <label htmlFor="manualRate">自訂匯率 (1 {currentPairDetails.fromCode} = ? {currentPairDetails.toCode}):</label>
                  <input
                    type="number"
                    id="manualRate"
                    value={manualRate}
                    onChange={handleManualRateChange}
                    placeholder="輸入匯率"
                    min="0"
                    step="0.0001"
                  />
                </FormGroup>
              ) : (
                <RateInfoText>
                  <span>
                    當前匯率: 1 {currentPairDetails.fromCode} = {currentEffectiveRate > 0 ? currentEffectiveRate.toFixed(4) : 'N/A'} {currentPairDetails.toCode === 'CUSTOM_NEW' ? (customCurrencyCode || '??') : currentPairDetails.toCode}
                  </span>
                  {lastUpdated && (
                    <span>(更新時間: {lastUpdated.toLocaleTimeString()})</span>
                  )}
                </RateInfoText>
              )}
            </CurrencyConverterContainer>

            {/* --- 消費描述及其快速填寫標籤部分 --- */}
            <FormGroup>
              <label htmlFor="description">消費描述:</label>
              <input
                type="text"
                id="description"
                name="description"
                value={newExpense.description}
                onChange={handleExpenseInputChange}
                placeholder="例如：晚餐、交通費"
              />
              {/* 渲染可點擊的標籤 */}
              <DescriptionTags>
                {defaultDescriptions.map((desc, index) => (
                  <DescriptionTag key={index} onClick={() => handleTagClick(desc)}>
                    {desc}
                  </DescriptionTag>
                ))}
              </DescriptionTags>
            </FormGroup>
            {/* --- 消費描述及其快速填寫標籤部分結束 --- */}


            <FormGroup>
              {/* Keeping the date input field as it seems intended for selecting the date of the expense */}
              <label htmlFor="date">消費日期:</label>
              <input
                type="date"
                id="date"
                name="date"
                value={newExpense.date}
                onChange={handleExpenseInputChange}
              />
            </FormGroup>

            <Button $primary onClick={recordExpense}>記錄消費</Button>
          </Card>

          <Card>
            <h3>消費記錄</h3>

            {sortedExpenses.length === 0 ? (
              <p>尚無消費記錄</p>
            ) : (
              <ExpenseList>
                {sortedExpenses.map(expense => (
                  <ExpenseItem key={expense.id}>
                    {editingExpenseId === expense.id ? (
                      // 編輯模式
                      <EditForm>
                        <EditRow>
                          <EditInputGroup>
                            <label>描述:</label>
                            <input
                              type="text"
                              name="description"
                              value={editFormData.description}
                              onChange={handleEditInputChange}
                              placeholder="消費描述"
                            />
                          </EditInputGroup>
                        </EditRow>
                        
                        <EditRow>
                          <EditInputGroup>
                            <label>日期:</label>
                            <input
                              type="date"
                              name="date"
                              value={editFormData.date}
                              onChange={handleEditInputChange}
                            />
                          </EditInputGroup>
                          
                          <EditInputGroup>
                            <label>時間:</label>
                            <input
                              type="time"
                              name="time"
                              value={editFormData.time}
                              onChange={handleEditInputChange}
                            />
                          </EditInputGroup>
                        </EditRow>
                        
                        <EditActions>
                          <Button $secondary onClick={cancelEdit}>取消</Button>
                          <Button $primary onClick={saveEdit}>保存</Button>
                        </EditActions>
                      </EditForm>
                    ) : (
                      // 顯示模式
                      <div style={{ flex: 1 }}>
                        <div><strong>{expense.description}</strong></div>
                        <div style={{ fontSize: '0.9rem', color: '#666' }}>
                          <ExpenseAmount>
                            {expense.fromAmount.toFixed(2)} {expense.fromCurrency} =
                            {expense.toAmount.toFixed(2)} {expense.toCurrency}
                          </ExpenseAmount>
                          <span> · 匯率: {expense.rate.toFixed(4)} · </span>
                          <span>
                            {/* Use formatDateTime for new data (has dateTime) or formatDateOnly for old data (only has date) */}
                            {expense.dateTime ? formatDateTime(expense.dateTime) : formatDateOnly(expense.date)}
                          </span>
                        </div>
                      </div>
                    )}
                    <div>
                      {editingExpenseId === expense.id ? null : (
                        <>
                          <Button $secondary onClick={() => startEditing(expense)} style={{ marginRight: '0.5rem' }}>編輯</Button>
                          <Button $danger onClick={() => deleteExpense(expense.id)}>刪除</Button>
                        </>
                      )}
                    </div>
                  </ExpenseItem>
                ))}
              </ExpenseList>
            )}
          </Card>
        </>
      ) : (
        <p>請先選擇一個行程</p>
      )}
    </Container>
  );
};

export default ExpenseTracker;
</file>

<file path="src/pages/TripManagement.jsx">
import { useState, useEffect, useRef } from 'react';
import styled, { createGlobalStyle } from 'styled-components';
import { useTrip } from '../contexts/TripContext';
import airportsData from '../data/airports.json';

// --- Styled Components using CSS Variables ---

const GlobalStyle = createGlobalStyle` body.modal-open { overflow: hidden; } `;

const Container = styled.div` 
  padding: 1rem; 
  max-width: 100%; 
  box-sizing: border-box;
  h2 { font-size: var(--font-size-h2); }
  h3 { font-size: calc(var(--font-size-h2) * 0.8); }
  h4 { font-size: var(--font-size-h4); }
`;
const CardsContainer = styled.div`
  display: flex; overflow-x: auto; gap: 1rem; padding: 1rem 0;
  scrollbar-width: thin; scrollbar-color: #ccc #f1f1f1;
  scroll-behavior: smooth;
  &::-webkit-scrollbar { height: 8px; }
  &::-webkit-scrollbar-track { background: #f1f1f1; border-radius: 10px; }
  &::-webkit-scrollbar-thumb { background: #ccc; border-radius: 10px; }
`;
const TripCard = styled.div`
  flex: 0 0 300px; background-color: white; border-radius: 8px;
  box-shadow: ${props => props.$selected ? '0 8px 20px rgba(52, 152, 219, 0.3)' : '0 4px 8px rgba(0, 0, 0, 0.1)'};
  border: ${props => props.$selected ? '2px solid #3498db' : '2px solid transparent'};
  padding: 1.5rem;
  display: flex; flex-direction: column; justify-content: space-between;
  transition: all 0.3s ease-in-out;
  transform: ${props => props.$selected ? 'translateY(-10px)' : 'translateY(0)'};
  opacity: ${props => props.$selected ? '1' : '0.6'};
  filter: ${props => props.$selected ? 'none' : 'brightness(0.85)'};
  
  &:hover {
    transform: ${props => props.$selected ? 'translateY(-10px)' : 'translateY(-5px)'};
    opacity: ${props => props.$selected ? '1' : '0.8'};
    filter: ${props => props.$selected ? 'none' : 'brightness(0.95)'};
  }
`;

const CardBodyText = styled.p`
  font-size: var(--font-size-body);
  margin: 0.5rem 0;
`;

const DestinationDisplay = styled.p`
  font-size: var(--font-size-destination);
  font-weight: 500; margin: 0.5rem 0;
  strong { font-weight: 700; }
`;
const FlightInfoList = styled.div`
  margin-top: 1rem; padding-top: 1rem; border-top: 1px solid #eee;
  color: #333; /* Removed max-height and overflow-y */
  font-size: var(--font-size-small);
  h5 { margin-top: 0; margin-bottom: 0.5rem; font-size: calc(var(--font-size-small) + 2px); color: #3498db; }
  p { font-size: var(--font-size-small); }
`;
const FlightEntry = styled.div`
  margin-bottom: 0.75rem; padding-bottom: 0.75rem; border-bottom: 1px solid #f0f0f0;
  &:last-child { border-bottom: none; margin-bottom: 0; padding-bottom: 0; }
  p { margin: 0.2rem 0; line-height: 1.4; }
`;
const EmptyCard = styled(TripCard)`
  justify-content: center; align-items: center; color: #888;
  font-size: var(--font-size-body);
`;
const TripForm = styled.form`
  display: flex; flex-direction: column; gap: 1rem;
  max-height: 80vh; overflow-y: auto; padding-right: 1rem;
`;
const FormSection = styled.div` margin-top: 1.5rem; border-top: 1px solid #eee; padding-top: 1rem; `;
const FormRow = styled.div`
  display: flex; gap: 1rem; margin-bottom: 1rem;
  @media (max-width: 768px) { flex-direction: column; gap: 0.5rem; }
`;
const FormGroup = styled.div`
  flex: 1; margin-bottom: 0.5rem; position: relative;
  label { 
    display: block; margin-bottom: 0.5rem; font-weight: bold; 
    font-size: var(--font-size-label);
  }
  input, select, textarea {
    width: 100%; padding: 0.75rem; border: 1px solid #ddd; border-radius: 4px;
    background-color: ${props => props.$editing ? '#fff8e6' : '#f9f9f9'};
    transition: background-color 0.3s ease; box-sizing: border-box;
    font-size: var(--font-size-body);
  }
`;
const FlightTable = styled.table`
  width: 100%; border-collapse: collapse; margin-top: 0.5rem;
  font-size: var(--font-size-small);
  th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
  th { background-color: #f2f2f2; }
`;
const ButtonGroup = styled.div` display: flex; gap: 0.5rem; margin-top: 1rem; justify-content: flex-end; `;
const Button = styled.button`
  background-color: ${props => 
    props.$choiceButton ? '#3498db' : // Default blue for choice buttons
    (props.$primary ? '#3498db' : 
    (props.$danger ? '#e74c3c' : '#bdc3c7'))
  };
  color: white; border: none; padding: 0.75rem 1.5rem; border-radius: 4px;
  cursor: pointer; font-weight: bold;
  transition: background-color 0.2s ease; /* Always transition background-color */
  font-size: var(--font-size-body);

  &:hover {
    background-color: ${props => 
      props.$choiceButton ? '#27ae60' : // Green on hover for choice buttons
      (props.$primary ? '#2980b9' : 
      (props.$danger ? '#c0392b' : '#95a5a6'))
    };
  }

  &:active {
    background-color: ${props => 
      props.$choiceButton ? '#27ae60' : // Green on active for choice buttons (same as hover for simplicity)
      (props.$primary ? '#2980b9' : 
      (props.$danger ? '#c0392b' : '#95a5a6'))
    };
  }
`;
const ToastBackdrop = styled.div`
  position: fixed; top: 0; left: 0; width: 100%; height: 100%;
  background-color: rgba(0, 0, 0, 0.7); /* Darker background */
  display: flex; justify-content: center; align-items: center;
  z-index: 1999; /* Below toast, above other content */
`;

const Toast = styled.div`
  background-color: #4CAF50; color: white;
  padding: 30px 40px; /* Increased padding for larger text */
  border-radius: 8px;
  box-shadow: 0 5px 15px rgba(0,0,0,0.3);
  z-index: 2000;
  opacity: 0;
  transition: opacity 0.3s ease-in-out;
  font-size: 24px; /* Larger text */
  text-align: center;
  min-width: 250px; /* Ensure it's not too small */

  &.show {
    opacity: 1;
  }
`;
const FloatingActionButton = styled.button`
  position: fixed; bottom: 30px; right: 30px; width: 60px; height: 60px; border-radius: 50%;
  background-color: #3498db; color: white; border: none; font-size: 2rem;
  display: flex; justify-content: center; align-items: center; 
  box-shadow: 0 4px 10px rgba(0,0,0,0.2); cursor: pointer; z-index: 1000;
  transition: background-color 0.3s, transform 0.3s;
  &:hover { background-color: #2980b9; transform: scale(1.1); }
`;
const ModalBackdrop = styled.div`
  position: fixed; top: 0; left: 0; width: 100%; height: 100%;
  background-color: rgba(0, 0, 0, 0.5); display: flex; justify-content: center;
  align-items: center; z-index: 1500;
`;
const ModalContent = styled.div`
  background-color: white; padding: 2rem; border-radius: 8px;
  box-shadow: 0 5px 15px rgba(0,0,0,0.3); width: 90%; max-width: 700px; position: relative;
`;
const CloseButton = styled.button`
  position: absolute; top: 10px; right: 10px; background: transparent; border: none;
  font-size: 1.5rem; cursor: pointer; color: #888;
`;
const SuggestionsList = styled.ul`
  position: absolute; background-color: white; border: 1px solid #ddd; border-top: none;
  border-radius: 0 0 4px 4px; list-style-type: none; margin: 0; padding: 0;
  width: 100%; max-height: 150px; overflow-y: auto; z-index: 1600;
`;
const SuggestionItem = styled.li`
  padding: 0.75rem; cursor: pointer;
  font-size: var(--font-size-body);
  &:hover { background-color: #f1f1f1; }
`;

// --- Autocomplete Component ---
const AutocompleteInput = ({ airports, value, onChange, onSelect, placeholder, name }) => {
  const [suggestions, setSuggestions] = useState([]);
  const [showSuggestions, setShowSuggestions] = useState(false);

  const handleChange = (e) => {
    const inputValue = e.target.value;
    onChange({ target: { name, value: inputValue } });

    if (inputValue.length > 0) {
      const filtered = airports.filter(airport => 
        airport.name.toLowerCase().includes(inputValue.toLowerCase()) ||
        airport.iata.toLowerCase().includes(inputValue.toLowerCase()) ||
        airport.city.toLowerCase().includes(inputValue.toLowerCase())
      );
      setSuggestions(filtered);
      setShowSuggestions(true);
    } else {
      setShowSuggestions(false);
    }
  };

  const handleSelect = (airport) => {
    onSelect(name, `${airport.city} (${airport.iata})`);
    setShowSuggestions(false);
  };

  return (
    <>
      <input
        type="text"
        value={value}
        onChange={handleChange}
        onBlur={() => setTimeout(() => setShowSuggestions(false), 150)}
        placeholder={placeholder}
        name={name}
      />
      {showSuggestions && suggestions.length > 0 && (
        <SuggestionsList>
          {suggestions.map(airport => (
            <SuggestionItem key={airport.iata} onMouseDown={() => handleSelect(airport)}>
              {airport.name} ({airport.iata})
            </SuggestionItem>
          ))}
        </SuggestionsList>
      )}
    </>
  );
};


// --- Main TripManagement Component ---
const taiwanAirlines = ['中華航空', '長榮航空', '立榮航空', '華信航空', '台灣虎航', '星宇航空', '遠東航空', '其他'];

const TripManagement = () => {
  const { trips, setTrips, selectedTripId, setSelectedTripId } = useTrip();
  const cardsContainerRef = useRef(null);
  const cardRefs = useRef({});
  const isScrollingProgrammatically = useRef(false);
  const scrollTimeoutRef = useRef(null);
  const isUserScrolling = useRef(false);
  const touchStartRef = useRef(null);
  const [sortOrder, setSortOrder] = useState('desc');
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [toast, setToast] = useState({ show: false, message: '' });

  // --- AI Feature State ---
  const [isChoiceModalOpen, setIsChoiceModalOpen] = useState(false);
  const [isAiModalOpen, setIsAiModalOpen] = useState(false);
  const [aiInputText, setAiInputText] = useState('');
  const [isAiLoading, setIsAiLoading] = useState(false); // Loading state for AI

  const initialTripState = { id: '', name: '', destination: '', startDate: '', endDate: '', description: '', flights: [], hotels: [], dailyItinerary: [] };
  const initialFlightState = { date: '', airline: '', flightNumber: '', departureCity: '', arrivalCity: '', departureTime: '', arrivalTime: '', departureTimezone: 'UTC+8（中港澳台 / 中原標準）', arrivalTimezone: 'UTC+8（中港澳台 / 中原標準）', customAirline: '', duration: '' };

  const [newTrip, setNewTrip] = useState(initialTripState);
  const [newFlight, setNewFlight] = useState(initialFlightState);
  const [isEditing, setIsEditing] = useState(false);
  const [isEditingFlight, setIsEditingFlight] = useState(false);
  const [editingFlightId, setEditingFlightId] = useState(null);

  useEffect(() => {
    const bodyClassList = document.body.classList;
    const hasModalOpen = isModalOpen || isChoiceModalOpen || isAiModalOpen;
    if (hasModalOpen) {
      bodyClassList.add('modal-open');
    } else {
      bodyClassList.remove('modal-open');
    }
    return () => bodyClassList.remove('modal-open');
  }, [isModalOpen, isChoiceModalOpen, isAiModalOpen]);

  // 卡片選定邏輯：監聽滾動事件，自動選定中間的卡片
  useEffect(() => {
    const container = cardsContainerRef.current;
    if (!container || trips.length === 0) return;

    const handleScroll = () => {
      // 如果是程式化滾動，不觸發自動選定邏輯
      if (isScrollingProgrammatically.current) {
        return;
      }
      
      // 清除之前的定時器
      if (scrollTimeoutRef.current) {
        clearTimeout(scrollTimeoutRef.current);
      }
      
      // 延遲執行選定邏輯，避免滾動過程中頻繁觸發
      scrollTimeoutRef.current = setTimeout(() => {
        // 如果用戶正在手動滾動，延後處理
        if (isUserScrolling.current) {
          return;
        }
        
        const containerRect = container.getBoundingClientRect();
        const containerCenter = containerRect.left + containerRect.width / 2;
        
        let closestCard = null;
        let closestDistance = Infinity;
        
        // 找出最接近中心的卡片
        Object.entries(cardRefs.current).forEach(([tripId, cardElement]) => {
          if (cardElement) {
            const cardRect = cardElement.getBoundingClientRect();
            const cardCenter = cardRect.left + cardRect.width / 2;
            const distance = Math.abs(cardCenter - containerCenter);
            
            if (distance < closestDistance) {
              closestDistance = distance;
              closestCard = tripId;
            }
          }
        });
        
        // 只有當最接近的卡片真的在容器範圍內且與當前選定不同時才選定
        if (closestCard && closestDistance < 200 && closestCard !== selectedTripId) {
          setSelectedTripId(closestCard);
        }
      }, 150); // 150ms 延遲
    };

    const handleTouchStart = (e) => {
      isUserScrolling.current = true;
      touchStartRef.current = e.touches[0].clientX;
    };

    const handleTouchMove = (e) => {
      if (touchStartRef.current !== null) {
        isUserScrolling.current = true;
      }
    };

    const handleTouchEnd = () => {
      // 觸控結束後延遲重置，讓滾動慣性完成
      setTimeout(() => {
        isUserScrolling.current = false;
        touchStartRef.current = null;
      }, 300);
    };

    const handleMouseDown = () => {
      isUserScrolling.current = true;
    };

    const handleMouseUp = () => {
      setTimeout(() => {
        isUserScrolling.current = false;
      }, 300);
    };

    container.addEventListener('scroll', handleScroll, { passive: true });
    container.addEventListener('touchstart', handleTouchStart, { passive: true });
    container.addEventListener('touchmove', handleTouchMove, { passive: true });
    container.addEventListener('touchend', handleTouchEnd, { passive: true });
    container.addEventListener('mousedown', handleMouseDown);
    container.addEventListener('mouseup', handleMouseUp);
    
    // 清理函數
    return () => {
      container.removeEventListener('scroll', handleScroll);
      container.removeEventListener('touchstart', handleTouchStart);
      container.removeEventListener('touchmove', handleTouchMove);
      container.removeEventListener('touchend', handleTouchEnd);
      container.removeEventListener('mousedown', handleMouseDown);
      container.removeEventListener('mouseup', handleMouseUp);
      if (scrollTimeoutRef.current) {
        clearTimeout(scrollTimeoutRef.current);
      }
    };
  }, [trips, selectedTripId, setSelectedTripId]);

  // 當 selectedTripId 從其他頁面改變時，滾動到對應卡片
  useEffect(() => {
    if (!selectedTripId || !cardsContainerRef.current) return;
    
    const selectedCard = cardRefs.current[selectedTripId];
    if (selectedCard) {
      const container = cardsContainerRef.current;
      const containerRect = container.getBoundingClientRect();
      const cardRect = selectedCard.getBoundingClientRect();
      
      // 標記為程式化滾動
      isScrollingProgrammatically.current = true;
      
      // 計算需要滾動的距離，讓卡片居中
      const scrollLeft = selectedCard.offsetLeft - (containerRect.width / 2) + (cardRect.width / 2);
      
      container.scrollTo({
        left: scrollLeft,
        behavior: 'smooth'
      });
      
      // 滾動完成後重置標記（延遲足夠長時間確保滾動完成）
      setTimeout(() => {
        isScrollingProgrammatically.current = false;
      }, 800); // 增加延遲時間以確保滾動動畫完成
    }
  }, [selectedTripId]);

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setNewTrip(prev => ({ ...prev, [name]: value }));
  };

  const handleFlightInputChange = (e) => {
    const { name, value } = e.target;
    setNewFlight(prev => ({ ...prev, [name]: value }));
  };
  
  const handleAutocompleteSelect = (name, value) => {
    setNewFlight(prev => ({ ...prev, [name]: value }));
  };

  const calculateFlightDuration = (departureTime, arrivalTime, departureTimezone, arrivalTimezone) => {
    const parseTimezoneOffset = (tz) => {
      if (!tz) return 0;
      // 支援更多時區格式的解析
      const match = tz.match(/UTC([+-]?\d+(?::\d+)?(?:\.\d+)?)/);
      if (match) {
        const offsetStr = match[1];
        // 處理小時:分鐘格式 (如 +5:30, -3:30)
        if (offsetStr.includes(':')) {
          const [hours, minutes] = offsetStr.split(':');
          return parseFloat(hours) + (parseFloat(minutes) / 60) * (hours.startsWith('-') ? -1 : 1);
        }
        return parseFloat(offsetStr);
      }
      return 0;
    };

    const departureOffsetHours = parseTimezoneOffset(departureTimezone);
    const arrivalOffsetHours = parseTimezoneOffset(arrivalTimezone);

    // 檢查時間是否為有效格式
    if (!departureTime || !arrivalTime || !departureTime.match(/^\d{2}:\d{2}$/) || !arrivalTime.match(/^\d{2}:\d{2}$/)) {
      return '';
    }

    // 將時間和時區轉換為毫秒數
    // 建立一個固定的 UTC 基準點
    const baseDate = new Date('2000-01-01T00:00:00Z').getTime();

    // 計算起飛時間的毫秒數（在 UTC 基準點上加上時間和時區偏移）
    const [depHour, depMin] = departureTime.split(':').map(Number);
    const departureMs = baseDate + (depHour * 60 + depMin) * 60 * 1000 - departureOffsetHours * 60 * 60 * 1000;

    // 計算抵達時間的毫秒數（在 UTC 基準點上加上時間和時區偏移）
    const [arrHour, arrMin] = arrivalTime.split(':').map(Number);
    let arrivalMs = baseDate + (arrHour * 60 + arrMin) * 60 * 1000 - arrivalOffsetHours * 60 * 60 * 1000;

    // 處理跨日問題：如果抵達時間在數值上小於起飛時間，則代表至少跨了一天
    // 這裡不再假設只跨一天，而是直接判斷時間戳大小
    if (arrivalMs < departureMs) {
      // 假設最少跨一天
      arrivalMs += 24 * 60 * 60 * 1000;
    }
    
    // 計算時間差（毫秒）
    const durationMs = arrivalMs - departureMs;

    // 檢查是否為有效數字
    if (isNaN(durationMs) || durationMs < 0) {
      return '';
    }

    const hours = Math.floor(durationMs / 3600000);
    const minutes = Math.floor((durationMs % 3600000) / 60000);

    return `${hours}小時${minutes}分`;
  };

  useEffect(() => {
    const { departureTime, arrivalTime, departureTimezone, arrivalTimezone } = newFlight;
    if (departureTime && arrivalTime) {
      const duration = calculateFlightDuration(departureTime, arrivalTime, departureTimezone, arrivalTimezone);
      setNewFlight(prev => ({ ...prev, duration }));
    }
  }, [newFlight.departureTime, newFlight.arrivalTime, newFlight.departureTimezone, newFlight.arrivalTimezone]);

  const generateTimezoneOptions = () => {
    return [
      'UTC-12（國際換日線）',
      'UTC-11（美屬薩摩亞）',
      'UTC-10（夏威夷－阿留申）',
      'UTC-9:30（馬克薩斯群島）',
      'UTC-9（阿拉斯加）',
      'UTC-8（太平洋）',
      'UTC-7（北美山區）',
      'UTC-6（北美中部）',
      'UTC-5（北美東部）',
      'UTC-4（大西洋）',
      'UTC-3:30（紐芬蘭島）',
      'UTC-3（巴西利亞）',
      'UTC-2（費爾南多·迪諾羅尼亞群島）',
      'UTC-1（維德角）',
      'UTC（歐洲西部.格林威治）',
      'UTC+1（歐洲中部）',
      'UTC+2（歐洲東部）',
      'UTC+3（歐洲極東／莫斯科）',
      'UTC+3:30（伊朗）',
      'UTC+4（海灣）',
      'UTC+4:30（阿富汗）',
      'UTC+5（巴基斯坦）',
      'UTC+5:30（印度）',
      'UTC+5:45（尼泊爾）',
      'UTC+6（孟加拉）',
      'UTC+6:30（緬甸）',
      'UTC+7（泰國.越南 / 中南半島）',
      'UTC+8（中港澳台 / 中原標準）',
      'UTC+9（日本）',
      'UTC+9:30（澳洲中部）',
      'UTC+10（澳洲東部）',
      'UTC+10:30（豪勳爵群島）',
      'UTC+11（萬那杜）',
      'UTC+12（紐西蘭）',
      'UTC+12:45（查塔姆群島）',
      'UTC+13（鳳凰群島）',
      'UTC+14（萊恩群島）'
    ];
  };
  const timezoneOptions = generateTimezoneOptions();

  const sortFlights = (flights) => [...flights].sort((a, b) => new Date(a.date) - new Date(b.date) || (a.departureTime || '').localeCompare(b.departureTime || ''));
  const sortTrips = (tripsToSort) => [...tripsToSort].sort((a, b) => sortOrder === 'desc' ? new Date(b.startDate) - new Date(a.startDate) : new Date(a.startDate) - new Date(b.startDate));
  const toggleSortOrder = () => setSortOrder(prev => prev === 'desc' ? 'asc' : 'desc');

  const showToast = (message) => {
    setToast({ show: true, message });
    setTimeout(() => setToast({ show: false, message: '' }), 1500);
  };

  const closeModal = () => {
    setIsModalOpen(false);
    setIsEditing(false);
    setNewTrip(initialTripState);
    setNewFlight(initialFlightState);
    setIsEditingFlight(false);
    setEditingFlightId(null);
  };

  // --- Modal Handlers ---
  const openAddModal = () => {
    setIsChoiceModalOpen(false);
    setIsEditing(false);
    setNewTrip(initialTripState);
    setNewFlight(initialFlightState);
    setIsModalOpen(true);
  };

  const openAiModal = () => {
    setIsChoiceModalOpen(false);
    setIsAiModalOpen(true);
  };

  const closeAiModal = () => {
    setIsAiModalOpen(false);
    setAiInputText('');
  };

  const handleAiSubmit = async () => {
    if (!aiInputText.trim()) {
      alert("請輸入行程文字。");
      return;
    }
    setIsAiLoading(true);
    try {
      const response = await fetch(`/.netlify/functions/analyze-itinerary`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ text: aiInputText }),
      });

      if (!response.ok) {
        throw new Error(`伺服器錯誤: ${response.status}`);
      }

      const data = await response.json();

      // 將 AI 回傳的資料填入表單
      setNewTrip(prev => ({
        ...prev,
        name: data.tripName || '',
        destination: data.destination || '',
        startDate: data.startDate || '',
        endDate: data.endDate || '',
        description: data.description || '',
        flights: data.flights || [],
        hotels: data.hotels || [],
        dailyItinerary: data.dailyItinerary || [],
      }));

      closeAiModal();
      setIsModalOpen(true); // 打開手動表單讓使用者確認
      showToast("AI 分析完成，請確認後儲存");

    } catch (error) {
      console.error("AI 分析失敗:", error);
      alert(`AI 分析失敗: ${error.message}`);
    } finally {
      setIsAiLoading(false);
    }
  };

  const handleEdit = (trip) => {
    setIsEditing(true);
    setNewTrip(trip);
    setIsModalOpen(true);
  };

  const handleDelete = (id) => {
    if (window.confirm("確定要刪除此行程嗎？此操作無法復原。")) {
      setTrips(trips.filter(trip => trip.id !== id));
      showToast('已刪除');
    }
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    if (newTrip.startDate && newTrip.endDate && new Date(newTrip.endDate) < new Date(newTrip.startDate)) {
      alert("結束日期不能早於開始日期。");
      return;
    }
    if (isEditing) {
      setTrips(trips.map(trip => trip.id === newTrip.id ? newTrip : trip));
      showToast('已更新');
    } else {
      const id = Date.now().toString();
      setTrips([...trips, { ...newTrip, id }]);
      setSelectedTripId(id);
      showToast('已新增');
    }
    closeModal();
  };

  const handleEditFlight = (flight) => {
    setNewFlight(flight);
    setIsEditingFlight(true);
    setEditingFlightId(flight.id);
  };

  const addFlight = () => {
    let airlineName = newFlight.airline === '其他' && newFlight.customAirline ? newFlight.customAirline : newFlight.airline;
    const flightToAdd = { ...newFlight, airline: airlineName, id: isEditingFlight ? editingFlightId : Date.now().toString() };
    
    let updatedFlights;
    if (isEditingFlight) {
      updatedFlights = newTrip.flights.map(f => f.id === editingFlightId ? flightToAdd : f);
      showToast('已更新航班');
    } else {
      updatedFlights = [...(newTrip.flights || []), flightToAdd];
      showToast('已新增航班');
    }
    setNewTrip(prev => ({ ...prev, flights: sortFlights(updatedFlights) }));
    showToast('請記得儲存行程後生效');

    setIsEditingFlight(false);
    setEditingFlightId(null);
    setNewFlight(initialFlightState);
  };

  const removeFlight = (flightId) => {
    setNewTrip(prev => ({ ...prev, flights: prev.flights.filter(f => f.id !== flightId) }));
    showToast('已刪除航班');
  };

  return (
    <>
      <GlobalStyle />
      <Container>
        {toast.show && (
          <ToastBackdrop>
            <Toast className="show">{toast.message}</Toast>
          </ToastBackdrop>
        )}
        <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '1rem' }}>
          <h2>我的行程</h2>
          <Button onClick={toggleSortOrder} style={{ padding: '0.5rem 1rem' }} $fixedBlue>
            {sortOrder === 'desc' ? '排序：新到舊 ↓' : '排序：舊到新 ↑'}
          </Button>
        </div>

        <CardsContainer ref={cardsContainerRef}>
          {trips.length === 0 ? (
            <EmptyCard>尚未新增行程</EmptyCard>
          ) : (
            sortTrips(trips).map(trip => (
              <TripCard 
                key={trip.id}
                ref={el => cardRefs.current[trip.id] = el}
                $selected={selectedTripId === trip.id}
                onClick={() => setSelectedTripId(trip.id)}
              >
                <div>
                  <h4>{trip.name}</h4>
                  <DestinationDisplay><strong>目的地:</strong> {trip.destination}</DestinationDisplay>
                  <CardBodyText><strong>日期:</strong> {trip.startDate} to {trip.endDate}</CardBodyText>
                  <CardBodyText>{trip.description}</CardBodyText>

                  {trip.flights && trip.flights.length > 0 && (
                    <FlightInfoList>
                      <h5>✈️ 航班資訊</h5>
                      {sortFlights(trip.flights).map(flight => (
                        <FlightEntry key={flight.id}>
                          <p><strong>{flight.date}</strong> - {flight.airline || 'N/A'} {flight.flightNumber || 'N/A'}</p>
                          <p>{flight.departureCity || 'N/A'} ({flight.departureTime || '--:--'}) → {flight.arrivalCity || 'N/A'} ({flight.arrivalTime || '--:--'})</p>
                          <p><i>飛行時間: {flight.duration || 'N/A'}</i></p>
                        </FlightEntry>
                      ))}
                    </FlightInfoList>
                  )}
                </div>
                <ButtonGroup>
                  <Button $primary onClick={(e) => { e.stopPropagation(); handleEdit(trip); }}>編輯</Button>
                  <Button $danger onClick={(e) => { e.stopPropagation(); handleDelete(trip.id); }}>刪除</Button>
                </ButtonGroup>
              </TripCard>
            ))
          )}
        </CardsContainer>

        <FloatingActionButton onClick={() => setIsChoiceModalOpen(true)}>+</FloatingActionButton>

        {/* --- Choice Modal --- */}
        {isChoiceModalOpen && (
          <ModalBackdrop onClick={() => setIsChoiceModalOpen(false)}>
            <ModalContent onClick={e => e.stopPropagation()}>
              <CloseButton onClick={() => setIsChoiceModalOpen(false)}>&times;</CloseButton>
              <h3 style={{ textAlign: 'center', marginBottom: '2rem' }}>選擇新增方式</h3>
              <ButtonGroup style={{ justifyContent: 'center', gap: '1rem' }}>
                <Button onClick={openAddModal} $choiceButton style={{ padding: '1rem 2rem' }}>手動輸入行程</Button>
                <Button onClick={openAiModal} $choiceButton style={{ padding: '1rem 2rem' }}>AI 辨識行程</Button>
              </ButtonGroup>
            </ModalContent>
          </ModalBackdrop>
        )}

        {/* --- AI Input Modal --- */}
        {isAiModalOpen && (
          <ModalBackdrop onClick={closeAiModal}>
            <ModalContent onClick={e => e.stopPropagation()}>
              <CloseButton onClick={closeAiModal}>&times;</CloseButton>
              <h3>AI 辨識行程</h3>
              <p style={{ margin: '1rem 0', color: '#666' }}>請在下方貼上您的行程文字，AI 將嘗試自動為您分析並填入表單。</p>
              <textarea
                style={{ width: '100%', minHeight: '250px', marginTop: '1rem', padding: '0.75rem', border: '1px solid #ccc', borderRadius: '4px', fontSize: '1rem', boxSizing: 'border-box' }}
                value={aiInputText}
                onChange={(e) => setAiInputText(e.target.value)}
                placeholder="例如：&#10;- 航班：中華航空 CI751 8/15 09:20 TPE -> SIN&#10;- 飯店：濱海灣金沙酒店 8/15-8/18&#10;- 活動：8/16 早上 10:00 環球影城"
              />
              <ButtonGroup>
                <Button type="button" onClick={closeAiModal} disabled={isAiLoading}>取消</Button>
                <Button type="button" onClick={handleAiSubmit} $primary disabled={isAiLoading}>
                  {isAiLoading ? '辨識中...' : '開始辨識'}
                </Button>
              </ButtonGroup>
            </ModalContent>
          </ModalBackdrop>
        )}

        {/* --- Manual Input Modal --- */}
        {isModalOpen && (
          <ModalBackdrop onClick={closeModal}>
            <ModalContent onClick={e => e.stopPropagation()}>
              <CloseButton onClick={closeModal}>&times;</CloseButton>
              <h3>{isEditing ? '編輯行程' : '新增行程'}</h3>
              <TripForm onSubmit={handleSubmit}>
                <FormGroup $editing={isEditing}>
                  <label htmlFor="name">行程名稱</label>
                  <input type="text" id="name" name="name" value={newTrip.name} onChange={handleInputChange} required />
                </FormGroup>
                <FormGroup $editing={isEditing}>
                  <label htmlFor="destination">目的地</label>
                  <input type="text" id="destination" name="destination" value={newTrip.destination} onChange={handleInputChange} required />
                </FormGroup>
                <FormRow>
                  <FormGroup $editing={isEditing}>
                    <label htmlFor="startDate">開始日期</label>
                    <input type="date" id="startDate" name="startDate" value={newTrip.startDate} onChange={handleInputChange} required />
                  </FormGroup>
                  <FormGroup $editing={isEditing}>
                    <label htmlFor="endDate">結束日期</label>
                    <input type="date" id="endDate" name="endDate" value={newTrip.endDate} onChange={handleInputChange} required />
                  </FormGroup>
                </FormRow>
                <FormGroup $editing={isEditing}>
                  <label htmlFor="description">行程描述</label>
                  <textarea id="description" name="description" value={newTrip.description} onChange={handleInputChange} rows="3"></textarea>
                </FormGroup>

                <FormSection>
                  <h4>{isEditingFlight ? '編輯航班資訊' : '航班資訊（選填）'}</h4>
                  <FormRow>
                    <FormGroup $editing={isEditingFlight}><label>日期</label><input type="date" name="date" value={newFlight.date} onChange={handleFlightInputChange} /></FormGroup>
                    <FormGroup $editing={isEditingFlight}><label>航空公司</label><select name="airline" value={newFlight.airline} onChange={handleFlightInputChange}><option value="">--選擇--</option>{taiwanAirlines.map(a => <option key={a} value={a}>{a}</option>)}</select></FormGroup>
                    {newFlight.airline === '其他' && <FormGroup $editing={isEditingFlight}><label>自定義</label><input type="text" name="customAirline" value={newFlight.customAirline} onChange={handleFlightInputChange} /></FormGroup>}
                  </FormRow>
                  <FormRow>
                    <FormGroup $editing={isEditingFlight}><label>航班編號</label><input type="text" name="flightNumber" value={newFlight.flightNumber} onChange={handleFlightInputChange} placeholder="例如: BR182" /></FormGroup>
                  </FormRow>
                  <FormRow>
                    <FormGroup $editing={isEditingFlight}>
                      <label>起飛城市</label>
                      <AutocompleteInput airports={airportsData} value={newFlight.departureCity} onChange={handleFlightInputChange} onSelect={handleAutocompleteSelect} name="departureCity" placeholder="輸入城市或機場代碼" />
                    </FormGroup>
                    <FormGroup $editing={isEditingFlight}>
                      <label>抵達城市</label>
                      <AutocompleteInput airports={airportsData} value={newFlight.arrivalCity} onChange={handleFlightInputChange} onSelect={handleAutocompleteSelect} name="arrivalCity" placeholder="輸入城市或機場代碼" />
                    </FormGroup>
                  </FormRow>
                  <FormRow>
                    <FormGroup $editing={isEditingFlight}><label>起飛時間</label><input type="time" name="departureTime" value={newFlight.departureTime} onChange={handleFlightInputChange} /></FormGroup>
                    <FormGroup $editing={isEditingFlight}><label>起飛時區</label><select name="departureTimezone" value={newFlight.departureTimezone} onChange={handleFlightInputChange}>{timezoneOptions.map(tz => <option key={tz} value={tz}>{tz}</option>)}</select></FormGroup>
                  </FormRow>
                  <FormRow>
                    <FormGroup $editing={isEditingFlight}><label>降落時間</label><input type="time" name="arrivalTime" value={newFlight.arrivalTime} onChange={handleFlightInputChange} /></FormGroup>
                    <FormGroup $editing={isEditingFlight}><label>降落時區</label><select name="arrivalTimezone" value={newFlight.arrivalTimezone} onChange={handleFlightInputChange}>{timezoneOptions.map(tz => <option key={tz} value={tz}>{tz}</option>)}</select></FormGroup>
                  </FormRow>
                  <ButtonGroup>
                    <Button type="button" $primary onClick={addFlight}>{isEditingFlight ? '更新航班' : '新增航班'}</Button>
                    {isEditingFlight && <Button type="button" onClick={() => { setIsEditingFlight(false); setEditingFlightId(null); setNewFlight(initialFlightState); }}>取消編輯</Button>}
                  </ButtonGroup>
                  
                  {newTrip.flights && newTrip.flights.length > 0 && (
                    <div style={{ marginTop: '1rem' }}>
                      <h5>已新增航班</h5>
                      <FlightTable>
                        <thead><tr><th>日期</th><th>航班</th><th>時間</th><th>操作</th></tr></thead>
                        <tbody>
                          {sortFlights(newTrip.flights).map(f => (
                            <tr key={f.id} style={{backgroundColor: f.id === editingFlightId ? '#fff8e6' : 'transparent'}}>
                              <td>{f.date}</td>
                              <td>{f.airline}<br/>{f.flightNumber}</td>
                              <td>{f.departureTime} - {f.arrivalTime}<br/><i>{f.duration}</i></td>
                              <td>
                                <ButtonGroup>
                                  <Button type="button" $primary onClick={() => handleEditFlight(f)}>編</Button>
                                  <Button type="button" $danger onClick={() => removeFlight(f.id)}>刪</Button>
                                </ButtonGroup>
                              </td>
                            </tr>
                          ))}
                        </tbody>
                      </FlightTable>
                    </div>
                  )}
                </FormSection>

                <ButtonGroup>
                  <Button type="button" onClick={closeModal}>取消</Button>
                  <Button $primary type="submit">{isEditing ? '更新行程' : '新增行程'}</Button>
                </ButtonGroup>
              </TripForm>
            </ModalContent>
          </ModalBackdrop>
        )}
      </Container>
    </>
  );
};

export default TripManagement;
</file>

</files>
